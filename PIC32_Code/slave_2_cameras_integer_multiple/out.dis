
out.elf:     file format elf32-tradlittlemips


Disassembly of section .config_BFC02FF0:

bfc02ff0 <__config_BFC02FF0>:
bfc02ff0:	ff ff fe fa                                         ....

Disassembly of section .config_BFC02FF4:

bfc02ff4 <__config_BFC02FF4>:
bfc02ff4:	d9 79 f8 ff                                         .y..

Disassembly of section .config_BFC02FF8:

bfc02ff8 <__config_BFC02FF8>:
bfc02ff8:	db ce 6c ff                                         ..l.

Disassembly of section .config_BFC02FFC:

bfc02ffc <__config_BFC02FFC>:
bfc02ffc:	ff ff ff 7e                                         ...~

Disassembly of section .reset:

bd001970 <_reset>:
bd001970:	0f40065e 	jal	bd001978 <_startup>
bd001974:	00000000 	nop

bd001978 <_startup>:
bd001978:	401a6000 	mfc0	k0,c0_status
bd00197c:	7f5a04c0 	ext	k0,k0,0x13,0x1
bd001980:	13400005 	beqz	k0,bd001998 <_no_nmi>
bd001984:	00000000 	nop
bd001988:	3c1a9d00 	lui	k0,0x9d00
bd00198c:	275a4db0 	addiu	k0,k0,19888
bd001990:	03400008 	jr	k0
bd001994:	00000000 	nop

bd001998 <_no_nmi>:
bd001998:	3c1da002 	lui	sp,0xa002
bd00199c:	27bdfff8 	addiu	sp,sp,-8
bd0019a0:	3c1ca000 	lui	gp,0xa000
bd0019a4:	279c7ff0 	addiu	gp,gp,32752
bd0019a8:	40096002 	mfc0	t1,c0_srsctl
bd0019ac:	01205820 	add	t3,t1,zero
bd0019b0:	7d2a1e80 	ext	t2,t1,0x1a,0x4
bd0019b4:	7d494984 	ins	t1,t2,0x6,0x4
bd0019b8:	40896002 	mtc0	t1,c0_srsctl
bd0019bc:	000000c0 	ehb
bd0019c0:	41dce000 	wrpgpr	gp,gp
bd0019c4:	408b6002 	mtc0	t3,c0_srsctl
bd0019c8:	000000c0 	ehb
bd0019cc:	3c089d00 	lui	t0,0x9d00
bd0019d0:	25084e28 	addiu	t0,t0,20008
bd0019d4:	0100f809 	jalr	t0
bd0019d8:	00000000 	nop

bd0019dc <_start_bss_init>:
bd0019dc:	3c08a000 	lui	t0,0xa000
bd0019e0:	2508000c 	addiu	t0,t0,12
bd0019e4:	3c09a000 	lui	t1,0xa000
bd0019e8:	25290034 	addiu	t1,t1,52
bd0019ec:	10000006 	b	bd001a08 <_bss_check>
bd0019f0:	00000000 	nop

bd0019f4 <_bss_init>:
bd0019f4:	ad000000 	sw	zero,0(t0)
bd0019f8:	ad000004 	sw	zero,4(t0)
bd0019fc:	ad000008 	sw	zero,8(t0)
bd001a00:	ad00000c 	sw	zero,12(t0)
bd001a04:	25080010 	addiu	t0,t0,16

bd001a08 <_bss_check>:
bd001a08:	0109082b 	sltu	at,t0,t1
bd001a0c:	1420fff9 	bnez	at,bd0019f4 <_bss_init>
bd001a10:	00000000 	nop
bd001a14:	3c089d00 	lui	t0,0x9d00
bd001a18:	2508489c 	addiu	t0,t0,18588
bd001a1c:	0100f809 	jalr	t0
bd001a20:	00000000 	nop
bd001a24:	3c090000 	lui	t1,0x0
bd001a28:	25290000 	addiu	t1,t1,0
bd001a2c:	11200010 	beqz	t1,bd001a70 <_ramfunc_done>
bd001a30:	00000000 	nop
bd001a34:	3c090002 	lui	t1,0x2
bd001a38:	25290000 	addiu	t1,t1,0
bd001a3c:	3c0abf88 	lui	t2,0xbf88
bd001a40:	254a2010 	addiu	t2,t2,8208
bd001a44:	ad490000 	sw	t1,0(t2)
bd001a48:	3c090002 	lui	t1,0x2
bd001a4c:	25290000 	addiu	t1,t1,0
bd001a50:	3c0abf88 	lui	t2,0xbf88
bd001a54:	254a2020 	addiu	t2,t2,8224
bd001a58:	ad490000 	sw	t1,0(t2)
bd001a5c:	3c090002 	lui	t1,0x2
bd001a60:	25290000 	addiu	t1,t1,0
bd001a64:	3c0abf88 	lui	t2,0xbf88
bd001a68:	254a2030 	addiu	t2,t2,8240
bd001a6c:	ad490000 	sw	t1,0(t2)

bd001a70 <_ramfunc_done>:
bd001a70:	40804800 	mtc0	zero,c0_count
bd001a74:	240affff 	li	t2,-1
bd001a78:	408a5800 	mtc0	t2,c0_compare
bd001a7c:	3c080040 	lui	t0,0x40
bd001a80:	400a6000 	mfc0	t2,c0_status
bd001a84:	010a5025 	or	t2,t0,t2
bd001a88:	408a6000 	mtc0	t2,c0_status
bd001a8c:	3c099d00 	lui	t1,0x9d00
bd001a90:	25290000 	addiu	t1,t1,0
bd001a94:	000000c0 	ehb
bd001a98:	40897801 	mtc0	t1,c0_ebase
bd001a9c:	3c090000 	lui	t1,0x0
bd001aa0:	25290001 	addiu	t1,t1,1
bd001aa4:	240a0000 	li	t2,0
bd001aa8:	7d2a4944 	ins	t2,t1,0x5,0x5
bd001aac:	408a6001 	mtc0	t2,c0_intctl
bd001ab0:	3c090080 	lui	t1,0x80
bd001ab4:	40896800 	mtc0	t1,c0_cause
bd001ab8:	40088000 	mfc0	t0,c0_config
bd001abc:	7d090580 	ext	t1,t0,0x16,0x1
bd001ac0:	00094c40 	sll	t1,t1,0x11
bd001ac4:	40086000 	mfc0	t0,c0_status
bd001ac8:	3c010058 	lui	at,0x58
bd001acc:	01014024 	and	t0,t0,at
bd001ad0:	01284025 	or	t0,t1,t0
bd001ad4:	40886000 	mtc0	t0,c0_status
bd001ad8:	000000c0 	ehb
bd001adc:	3c089d00 	lui	t0,0x9d00
bd001ae0:	25084e30 	addiu	t0,t0,20016
bd001ae4:	0100f809 	jalr	t0
bd001ae8:	00000000 	nop
bd001aec:	40086000 	mfc0	t0,c0_status
bd001af0:	3c01ffbf 	lui	at,0xffbf
bd001af4:	3421ffff 	ori	at,at,0xffff
bd001af8:	01014024 	and	t0,t0,at
bd001afc:	40886000 	mtc0	t0,c0_status
bd001b00:	30840000 	andi	a0,a0,0x0
bd001b04:	30a50000 	andi	a1,a1,0x0
bd001b08:	3c089d00 	lui	t0,0x9d00
bd001b0c:	25084b0c 	addiu	t0,t0,19212
bd001b10:	01000008 	jr	t0
bd001b14:	00000000 	nop

Disassembly of section .bev_excpt:

bd001cf0 <_bev_exception>:
bd001cf0:	3c1a9d00 	lui	k0,0x9d00
bd001cf4:	275a4bac 	addiu	k0,k0,19372
bd001cf8:	03400008 	jr	k0
bd001cfc:	00000000 	nop

Disassembly of section .app_excpt:

9d000180 <_gen_exception>:
9d000180:	3c1a9d00 	lui	k0,0x9d00
9d000184:	275a4500 	addiu	k0,k0,17664
9d000188:	03400008 	jr	k0
9d00018c:	00000000 	nop

Disassembly of section .vector_0:

9d000200 <__vector_dispatch_0>:
9d000200:	0b40130f 	j	9d004c3c <.LFE0>
9d000204:	00000000 	nop

Disassembly of section .vector_1:

9d000220 <__vector_dispatch_1>:
9d000220:	0b40130f 	j	9d004c3c <.LFE0>
9d000224:	00000000 	nop

Disassembly of section .vector_2:

9d000240 <__vector_dispatch_2>:
9d000240:	0b40130f 	j	9d004c3c <.LFE0>
9d000244:	00000000 	nop

Disassembly of section .vector_3:

9d000260 <__vector_dispatch_3>:
9d000260:	0b40130f 	j	9d004c3c <.LFE0>
9d000264:	00000000 	nop

Disassembly of section .vector_4:

9d000280 <__vector_dispatch_4>:
9d000280:	0b40130f 	j	9d004c3c <.LFE0>
9d000284:	00000000 	nop

Disassembly of section .vector_5:

9d0002a0 <__vector_dispatch_5>:
9d0002a0:	0b40130f 	j	9d004c3c <.LFE0>
9d0002a4:	00000000 	nop

Disassembly of section .vector_6:

9d0002c0 <__vector_dispatch_6>:
9d0002c0:	0b40130f 	j	9d004c3c <.LFE0>
9d0002c4:	00000000 	nop

Disassembly of section .vector_7:

9d0002e0 <__vector_dispatch_7>:
9d0002e0:	0b40130f 	j	9d004c3c <.LFE0>
9d0002e4:	00000000 	nop

Disassembly of section .vector_8:

9d000300 <__vector_dispatch_8>:
9d000300:	0b400ab8 	j	9d002ae0 <ExSyncSide>
9d000304:	00000000 	nop

Disassembly of section .vector_9:

9d000320 <__vector_dispatch_9>:
9d000320:	0b40130f 	j	9d004c3c <.LFE0>
9d000324:	00000000 	nop

Disassembly of section .vector_10:

9d000340 <__vector_dispatch_10>:
9d000340:	0b40130f 	j	9d004c3c <.LFE0>
9d000344:	00000000 	nop

Disassembly of section .vector_11:

9d000360 <__vector_dispatch_11>:
9d000360:	0b400b26 	j	9d002c98 <Ext2ISR>
9d000364:	00000000 	nop

Disassembly of section .vector_12:

9d000380 <__vector_dispatch_12>:
9d000380:	0b40130f 	j	9d004c3c <.LFE0>
9d000384:	00000000 	nop

Disassembly of section .vector_13:

9d0003a0 <__vector_dispatch_13>:
9d0003a0:	0b40130f 	j	9d004c3c <.LFE0>
9d0003a4:	00000000 	nop

Disassembly of section .vector_14:

9d0003c0 <__vector_dispatch_14>:
9d0003c0:	0b40130f 	j	9d004c3c <.LFE0>
9d0003c4:	00000000 	nop

Disassembly of section .vector_15:

9d0003e0 <__vector_dispatch_15>:
9d0003e0:	0b40130f 	j	9d004c3c <.LFE0>
9d0003e4:	00000000 	nop

Disassembly of section .vector_16:

9d000400 <__vector_dispatch_16>:
9d000400:	0b40130f 	j	9d004c3c <.LFE0>
9d000404:	00000000 	nop

Disassembly of section .vector_17:

9d000420 <__vector_dispatch_17>:
9d000420:	0b40130f 	j	9d004c3c <.LFE0>
9d000424:	00000000 	nop

Disassembly of section .vector_18:

9d000440 <__vector_dispatch_18>:
9d000440:	0b40130f 	j	9d004c3c <.LFE0>
9d000444:	00000000 	nop

Disassembly of section .vector_19:

9d000460 <__vector_dispatch_19>:
9d000460:	0b40130f 	j	9d004c3c <.LFE0>
9d000464:	00000000 	nop

Disassembly of section .vector_20:

9d000480 <__vector_dispatch_20>:
9d000480:	0b40130f 	j	9d004c3c <.LFE0>
9d000484:	00000000 	nop

Disassembly of section .vector_21:

9d0004a0 <__vector_dispatch_21>:
9d0004a0:	0b40130f 	j	9d004c3c <.LFE0>
9d0004a4:	00000000 	nop

Disassembly of section .vector_22:

9d0004c0 <__vector_dispatch_22>:
9d0004c0:	0b40130f 	j	9d004c3c <.LFE0>
9d0004c4:	00000000 	nop

Disassembly of section .vector_23:

9d0004e0 <__vector_dispatch_23>:
9d0004e0:	0b40130f 	j	9d004c3c <.LFE0>
9d0004e4:	00000000 	nop

Disassembly of section .vector_24:

9d000500 <__vector_dispatch_24>:
9d000500:	0b40130f 	j	9d004c3c <.LFE0>
9d000504:	00000000 	nop

Disassembly of section .vector_25:

9d000520 <__vector_dispatch_25>:
9d000520:	0b40130f 	j	9d004c3c <.LFE0>
9d000524:	00000000 	nop

Disassembly of section .vector_26:

9d000540 <__vector_dispatch_26>:
9d000540:	0b400a1c 	j	9d002870 <CNISR>
9d000544:	00000000 	nop

Disassembly of section .vector_27:

9d000560 <__vector_dispatch_27>:
9d000560:	0b40130f 	j	9d004c3c <.LFE0>
9d000564:	00000000 	nop

Disassembly of section .vector_28:

9d000580 <__vector_dispatch_28>:
9d000580:	0b40130f 	j	9d004c3c <.LFE0>
9d000584:	00000000 	nop

Disassembly of section .vector_29:

9d0005a0 <__vector_dispatch_29>:
9d0005a0:	0b40130f 	j	9d004c3c <.LFE0>
9d0005a4:	00000000 	nop

Disassembly of section .vector_30:

9d0005c0 <__vector_dispatch_30>:
9d0005c0:	0b40130f 	j	9d004c3c <.LFE0>
9d0005c4:	00000000 	nop

Disassembly of section .vector_31:

9d0005e0 <__vector_dispatch_31>:
9d0005e0:	0b40130f 	j	9d004c3c <.LFE0>
9d0005e4:	00000000 	nop

Disassembly of section .vector_32:

9d000600 <__vector_dispatch_32>:
9d000600:	0b40130f 	j	9d004c3c <.LFE0>
9d000604:	00000000 	nop

Disassembly of section .vector_33:

9d000620 <__vector_dispatch_33>:
9d000620:	0b40130f 	j	9d004c3c <.LFE0>
9d000624:	00000000 	nop

Disassembly of section .vector_34:

9d000640 <__vector_dispatch_34>:
9d000640:	0b40130f 	j	9d004c3c <.LFE0>
9d000644:	00000000 	nop

Disassembly of section .vector_35:

9d000660 <__vector_dispatch_35>:
9d000660:	0b40130f 	j	9d004c3c <.LFE0>
9d000664:	00000000 	nop

Disassembly of section .vector_36:

9d000680 <__vector_dispatch_36>:
9d000680:	0b40130f 	j	9d004c3c <.LFE0>
9d000684:	00000000 	nop

Disassembly of section .vector_37:

9d0006a0 <__vector_dispatch_37>:
9d0006a0:	0b40130f 	j	9d004c3c <.LFE0>
9d0006a4:	00000000 	nop

Disassembly of section .vector_38:

9d0006c0 <__vector_dispatch_38>:
9d0006c0:	0b40130f 	j	9d004c3c <.LFE0>
9d0006c4:	00000000 	nop

Disassembly of section .vector_39:

9d0006e0 <__vector_dispatch_39>:
9d0006e0:	0b40130f 	j	9d004c3c <.LFE0>
9d0006e4:	00000000 	nop

Disassembly of section .vector_40:

9d000700 <__vector_dispatch_40>:
9d000700:	0b40130f 	j	9d004c3c <.LFE0>
9d000704:	00000000 	nop

Disassembly of section .vector_41:

9d000720 <__vector_dispatch_41>:
9d000720:	0b40130f 	j	9d004c3c <.LFE0>
9d000724:	00000000 	nop

Disassembly of section .vector_42:

9d000740 <__vector_dispatch_42>:
9d000740:	0b40130f 	j	9d004c3c <.LFE0>
9d000744:	00000000 	nop

Disassembly of section .vector_43:

9d000760 <__vector_dispatch_43>:
9d000760:	0b40130f 	j	9d004c3c <.LFE0>
9d000764:	00000000 	nop

Disassembly of section .vector_44:

9d000780 <__vector_dispatch_44>:
9d000780:	0b40130f 	j	9d004c3c <.LFE0>
9d000784:	00000000 	nop

Disassembly of section .vector_45:

9d0007a0 <__vector_dispatch_45>:
9d0007a0:	0b40130f 	j	9d004c3c <.LFE0>
9d0007a4:	00000000 	nop

Disassembly of section .vector_46:

9d0007c0 <__vector_dispatch_46>:
9d0007c0:	0b40130f 	j	9d004c3c <.LFE0>
9d0007c4:	00000000 	nop

Disassembly of section .vector_47:

9d0007e0 <__vector_dispatch_47>:
9d0007e0:	0b40130f 	j	9d004c3c <.LFE0>
9d0007e4:	00000000 	nop

Disassembly of section .vector_48:

9d000800 <__vector_dispatch_48>:
9d000800:	0b40130f 	j	9d004c3c <.LFE0>
9d000804:	00000000 	nop

Disassembly of section .vector_49:

9d000820 <__vector_dispatch_49>:
9d000820:	0b40130f 	j	9d004c3c <.LFE0>
9d000824:	00000000 	nop

Disassembly of section .vector_50:

9d000840 <__vector_dispatch_50>:
9d000840:	0b40130f 	j	9d004c3c <.LFE0>
9d000844:	00000000 	nop

Disassembly of section .vector_51:

9d000860 <__vector_dispatch_51>:
9d000860:	0b40130f 	j	9d004c3c <.LFE0>
9d000864:	00000000 	nop

Disassembly of section ._debug_exception:

bfc00480 <__DbgExecReturn>:
bfc00480:	409bf800 	mtc0	k1,c0_desave
bfc00484:	000000c0 	ehb
bfc00488:	3c1b9d00 	lui	k1,0x9d00
bfc0048c:	277b4c84 	addiu	k1,k1,19588
bfc00490:	13600002 	beqz	k1,bfc0049c <__DbgExecReturn+0x1c>
bfc00494:	00000000 	nop
bfc00498:	409bc000 	mtc0	k1,c0_depc
bfc0049c:	401bf800 	mfc0	k1,c0_desave
bfc004a0:	000000c0 	ehb
bfc004a4:	4200001f 	deret
bfc004a8:	00000000 	nop

Disassembly of section .text._do_print_cdnopuxX:

9d001e00 <_do_print_cdnopuxX>:
9d001e00:	27bdff68 	addiu	sp,sp,-152
9d001e04:	afbf0094 	sw	ra,148(sp)
9d001e08:	afbe0090 	sw	s8,144(sp)
9d001e0c:	afb7008c 	sw	s7,140(sp)
9d001e10:	afb60088 	sw	s6,136(sp)
9d001e14:	afb50084 	sw	s5,132(sp)
9d001e18:	afb40080 	sw	s4,128(sp)
9d001e1c:	afb3007c 	sw	s3,124(sp)
9d001e20:	afb20078 	sw	s2,120(sp)
9d001e24:	afb10074 	sw	s1,116(sp)
9d001e28:	afb00070 	sw	s0,112(sp)
9d001e2c:	afa40098 	sw	a0,152(sp)
9d001e30:	8c820018 	lw	v0,24(a0)
9d001e34:	00a09021 	move	s2,a1
9d001e38:	24050001 	li	a1,1
9d001e3c:	8c420010 	lw	v0,16(v0)
9d001e40:	0040f809 	jalr	v0
9d001e44:	afa600a0 	sw	a2,160(sp)
9d001e48:	104001bd 	beqz	v0,9d002540 <_do_print_cdnopuxX+0x740>
9d001e4c:	27a20058 	addiu	v0,sp,88
9d001e50:	afa00060 	sw	zero,96(sp)
9d001e54:	afa20058 	sw	v0,88(sp)
9d001e58:	82440000 	lb	a0,0(s2)
9d001e5c:	1080000d 	beqz	a0,9d001e94 <_do_print_cdnopuxX+0x94>
9d001e60:	26500001 	addiu	s0,s2,1
9d001e64:	24020025 	li	v0,37
9d001e68:	5082001c 	beql	a0,v0,9d001edc <_do_print_cdnopuxX+0xdc>
9d001e6c:	82420001 	lb	v0,1(s2)
9d001e70:	0f4011d7 	jal	9d00475c <fputc>
9d001e74:	8fa50098 	lw	a1,152(sp)
9d001e78:	8fa30060 	lw	v1,96(sp)
9d001e7c:	24630001 	addiu	v1,v1,1
9d001e80:	afa30060 	sw	v1,96(sp)
9d001e84:	02009021 	move	s2,s0
9d001e88:	82440000 	lb	a0,0(s2)
9d001e8c:	1480fff5 	bnez	a0,9d001e64 <_do_print_cdnopuxX+0x64>
9d001e90:	26500001 	addiu	s0,s2,1
9d001e94:	8fa40098 	lw	a0,152(sp)
9d001e98:	94820010 	lhu	v0,16(a0)
9d001e9c:	30420040 	andi	v0,v0,0x40
9d001ea0:	144001a8 	bnez	v0,9d002544 <_do_print_cdnopuxX+0x744>
9d001ea4:	2402ffff 	li	v0,-1
9d001ea8:	8fa20060 	lw	v0,96(sp)
9d001eac:	8fbf0094 	lw	ra,148(sp)
9d001eb0:	8fbe0090 	lw	s8,144(sp)
9d001eb4:	8fb7008c 	lw	s7,140(sp)
9d001eb8:	8fb60088 	lw	s6,136(sp)
9d001ebc:	8fb50084 	lw	s5,132(sp)
9d001ec0:	8fb40080 	lw	s4,128(sp)
9d001ec4:	8fb3007c 	lw	s3,124(sp)
9d001ec8:	8fb20078 	lw	s2,120(sp)
9d001ecc:	8fb10074 	lw	s1,116(sp)
9d001ed0:	8fb00070 	lw	s0,112(sp)
9d001ed4:	03e00008 	jr	ra
9d001ed8:	27bd0098 	addiu	sp,sp,152
9d001edc:	10440177 	beq	v0,a0,9d0024bc <_do_print_cdnopuxX+0x6bc>
9d001ee0:	0000b821 	move	s7,zero
9d001ee4:	2403002d 	li	v1,45
9d001ee8:	2404002b 	li	a0,43
9d001eec:	24050020 	li	a1,32
9d001ef0:	24060023 	li	a2,35
9d001ef4:	1043000e 	beq	v0,v1,9d001f30 <_do_print_cdnopuxX+0x130>
9d001ef8:	24070030 	li	a3,48
9d001efc:	50440010 	beql	v0,a0,9d001f40 <_do_print_cdnopuxX+0x140>
9d001f00:	36f70002 	ori	s7,s7,0x2
9d001f04:	50450011 	beql	v0,a1,9d001f4c <_do_print_cdnopuxX+0x14c>
9d001f08:	36f70001 	ori	s7,s7,0x1
9d001f0c:	50460012 	beql	v0,a2,9d001f58 <_do_print_cdnopuxX+0x158>
9d001f10:	36f70800 	ori	s7,s7,0x800
9d001f14:	54470013 	bnel	v0,a3,9d001f64 <_do_print_cdnopuxX+0x164>
9d001f18:	2403002a 	li	v1,42
9d001f1c:	36f70004 	ori	s7,s7,0x4
9d001f20:	26100001 	addiu	s0,s0,1
9d001f24:	82020000 	lb	v0,0(s0)
9d001f28:	1443fff4 	bne	v0,v1,9d001efc <_do_print_cdnopuxX+0xfc>
9d001f2c:	00000000 	nop
9d001f30:	36f70008 	ori	s7,s7,0x8
9d001f34:	26100001 	addiu	s0,s0,1
9d001f38:	0b4007ca 	j	9d001f28 <_do_print_cdnopuxX+0x128>
9d001f3c:	82020000 	lb	v0,0(s0)
9d001f40:	26100001 	addiu	s0,s0,1
9d001f44:	0b4007ca 	j	9d001f28 <_do_print_cdnopuxX+0x128>
9d001f48:	82020000 	lb	v0,0(s0)
9d001f4c:	26100001 	addiu	s0,s0,1
9d001f50:	0b4007ca 	j	9d001f28 <_do_print_cdnopuxX+0x128>
9d001f54:	82020000 	lb	v0,0(s0)
9d001f58:	26100001 	addiu	s0,s0,1
9d001f5c:	0b4007ca 	j	9d001f28 <_do_print_cdnopuxX+0x128>
9d001f60:	82020000 	lb	v0,0(s0)
9d001f64:	104300fe 	beq	v0,v1,9d002360 <_do_print_cdnopuxX+0x560>
9d001f68:	02002021 	move	a0,s0
9d001f6c:	2443ffd0 	addiu	v1,v0,-48
9d001f70:	2c63000a 	sltiu	v1,v1,10
9d001f74:	1060000b 	beqz	v1,9d001fa4 <_do_print_cdnopuxX+0x1a4>
9d001f78:	0000b021 	move	s6,zero
9d001f7c:	00161840 	sll	v1,s6,0x1
9d001f80:	001650c0 	sll	t2,s6,0x3
9d001f84:	006a5021 	addu	t2,v1,t2
9d001f88:	26100001 	addiu	s0,s0,1
9d001f8c:	01425021 	addu	t2,t2,v0
9d001f90:	82020000 	lb	v0,0(s0)
9d001f94:	2443ffd0 	addiu	v1,v0,-48
9d001f98:	2c63000a 	sltiu	v1,v1,10
9d001f9c:	1460fff7 	bnez	v1,9d001f7c <_do_print_cdnopuxX+0x17c>
9d001fa0:	2556ffd0 	addiu	s6,t2,-48
9d001fa4:	2403002e 	li	v1,46
9d001fa8:	104300f9 	beq	v0,v1,9d002390 <_do_print_cdnopuxX+0x590>
9d001fac:	241effff 	li	s8,-1
9d001fb0:	24030068 	li	v1,104
9d001fb4:	5043010c 	beql	v0,v1,9d0023e8 <_do_print_cdnopuxX+0x5e8>
9d001fb8:	82030001 	lb	v1,1(s0)
9d001fbc:	2403006c 	li	v1,108
9d001fc0:	1043011a 	beq	v0,v1,9d00242c <_do_print_cdnopuxX+0x62c>
9d001fc4:	24030071 	li	v1,113
9d001fc8:	10430144 	beq	v0,v1,9d0024dc <_do_print_cdnopuxX+0x6dc>
9d001fcc:	32e40002 	andi	a0,s7,0x2
9d001fd0:	32e3fffe 	andi	v1,s7,0xfffe
9d001fd4:	0064b80b 	movn	s7,v1,a0
9d001fd8:	2442ffbc 	addiu	v0,v0,-68
9d001fdc:	32e50008 	andi	a1,s7,0x8
9d001fe0:	32e4fffb 	andi	a0,s7,0xfffb
9d001fe4:	2c430035 	sltiu	v1,v0,53
9d001fe8:	26120001 	addiu	s2,s0,1
9d001fec:	1060010d 	beqz	v1,9d002424 <_do_print_cdnopuxX+0x624>
9d001ff0:	0085b80b 	movn	s7,a0,a1
9d001ff4:	00021080 	sll	v0,v0,0x2
9d001ff8:	3c049d00 	lui	a0,0x9d00
9d001ffc:	24842010 	addiu	a0,a0,8208
9d002000:	00821021 	addu	v0,a0,v0
9d002004:	8c420000 	lw	v0,0(v0)
9d002008:	00400008 	jr	v0
9d00200c:	00000000 	nop
9d002010:	9d0022d8 	0x9d0022d8
9d002014:	9d002424 	0x9d002424
9d002018:	9d002424 	0x9d002424
9d00201c:	9d002424 	0x9d002424
9d002020:	9d002424 	0x9d002424
9d002024:	9d002424 	0x9d002424
9d002028:	9d002424 	0x9d002424
9d00202c:	9d002424 	0x9d002424
9d002030:	9d002424 	0x9d002424
9d002034:	9d002424 	0x9d002424
9d002038:	9d002424 	0x9d002424
9d00203c:	9d00269c 	0x9d00269c
9d002040:	9d00227c 	0x9d00227c
9d002044:	9d002424 	0x9d002424
9d002048:	9d002424 	0x9d002424
9d00204c:	9d002424 	0x9d002424
9d002050:	9d002424 	0x9d002424
9d002054:	9d0020e4 	0x9d0020e4
9d002058:	9d002424 	0x9d002424
9d00205c:	9d002424 	0x9d002424
9d002060:	9d0022ec 	0x9d0022ec
9d002064:	9d002424 	0x9d002424
9d002068:	9d002424 	0x9d002424
9d00206c:	9d002424 	0x9d002424
9d002070:	9d002424 	0x9d002424
9d002074:	9d002424 	0x9d002424
9d002078:	9d002424 	0x9d002424
9d00207c:	9d002424 	0x9d002424
9d002080:	9d002424 	0x9d002424
9d002084:	9d002424 	0x9d002424
9d002088:	9d002424 	0x9d002424
9d00208c:	9d002668 	0x9d002668
9d002090:	9d0022dc 	0x9d0022dc
9d002094:	9d002424 	0x9d002424
9d002098:	9d002424 	0x9d002424
9d00209c:	9d002424 	0x9d002424
9d0020a0:	9d002424 	0x9d002424
9d0020a4:	9d0022dc 	0x9d0022dc
9d0020a8:	9d002424 	0x9d002424
9d0020ac:	9d002424 	0x9d002424
9d0020b0:	9d002424 	0x9d002424
9d0020b4:	9d002424 	0x9d002424
9d0020b8:	9d0025ac 	0x9d0025ac
9d0020bc:	9d0025a4 	0x9d0025a4
9d0020c0:	9d002280 	0x9d002280
9d0020c4:	9d002424 	0x9d002424
9d0020c8:	9d002424 	0x9d002424
9d0020cc:	9d0025f4 	0x9d0025f4
9d0020d0:	9d002424 	0x9d002424
9d0020d4:	9d0020e8 	0x9d0020e8
9d0020d8:	9d002424 	0x9d002424
9d0020dc:	9d002424 	0x9d002424
9d0020e0:	9d0022f0 	0x9d0022f0
9d0020e4:	36f70010 	ori	s7,s7,0x10
9d0020e8:	32f7f7ff 	andi	s7,s7,0xf7ff
9d0020ec:	2410000a 	li	s0,10
9d0020f0:	2402ffff 	li	v0,-1
9d0020f4:	13c20067 	beq	s8,v0,9d002294 <_do_print_cdnopuxX+0x494>
9d0020f8:	00002821 	move	a1,zero
9d0020fc:	32f7fffb 	andi	s7,s7,0xfffb
9d002100:	27c5ffff 	addiu	a1,s8,-1
9d002104:	32e200c0 	andi	v0,s7,0xc0
9d002108:	10400066 	beqz	v0,9d0022a4 <_do_print_cdnopuxX+0x4a4>
9d00210c:	afa20064 	sw	v0,100(sp)
9d002110:	7c171620 	seh	v0,s7
9d002114:	04400182 	bltz	v0,9d002720 <_do_print_cdnopuxX+0x920>
9d002118:	32e20010 	andi	v0,s7,0x10
9d00211c:	104000f3 	beqz	v0,9d0024ec <_do_print_cdnopuxX+0x6ec>
9d002120:	32e20041 	andi	v0,s7,0x41
9d002124:	8fa400a0 	lw	a0,160(sp)
9d002128:	8c950000 	lw	s5,0(a0)
9d00212c:	24840004 	addiu	a0,a0,4
9d002130:	afa400a0 	sw	a0,160(sp)
9d002134:	0015a7c3 	sra	s4,s5,0x1f
9d002138:	02801021 	move	v0,s4
9d00213c:	0440010d 	bltz	v0,9d002574 <_do_print_cdnopuxX+0x774>
9d002140:	02a01821 	move	v1,s5
9d002144:	afa0006c 	sw	zero,108(sp)
9d002148:	128000bf 	beqz	s4,9d002448 <_do_print_cdnopuxX+0x648>
9d00214c:	02b41025 	or	v0,s5,s4
9d002150:	10400195 	beqz	v0,9d0027a8 <_do_print_cdnopuxX+0x9a8>
9d002154:	27a20057 	addiu	v0,sp,87
9d002158:	afa20068 	sw	v0,104(sp)
9d00215c:	32e30020 	andi	v1,s7,0x20
9d002160:	24040037 	li	a0,55
9d002164:	00108fc3 	sra	s1,s0,0x1f
9d002168:	00409821 	move	s3,v0
9d00216c:	24020057 	li	v0,87
9d002170:	0043200a 	movz	a0,v0,v1
9d002174:	afa4005c 	sw	a0,92(sp)
9d002178:	02a02021 	move	a0,s5
9d00217c:	02802821 	move	a1,s4
9d002180:	02003021 	move	a2,s0
9d002184:	0f400c05 	jal	9d003014 <__umoddi3>
9d002188:	02203821 	move	a3,s1
9d00218c:	2843000a 	slti	v1,v0,10
9d002190:	24460030 	addiu	a2,v0,48
9d002194:	8fa4005c 	lw	a0,92(sp)
9d002198:	00441021 	addu	v0,v0,a0
9d00219c:	0043300a 	movz	a2,v0,v1
9d0021a0:	2673ffff 	addiu	s3,s3,-1
9d0021a4:	02a02021 	move	a0,s5
9d0021a8:	02802821 	move	a1,s4
9d0021ac:	a2660001 	sb	a2,1(s3)
9d0021b0:	02003021 	move	a2,s0
9d0021b4:	0f400d1e 	jal	9d003478 <.LFE1>
9d0021b8:	02203821 	move	a3,s1
9d0021bc:	00622025 	or	a0,v1,v0
9d0021c0:	0040a821 	move	s5,v0
9d0021c4:	0060a021 	move	s4,v1
9d0021c8:	1480ffeb 	bnez	a0,9d002178 <_do_print_cdnopuxX+0x378>
9d0021cc:	27deffff 	addiu	s8,s8,-1
9d0021d0:	27c5ffff 	addiu	a1,s8,-1
9d0021d4:	04a0000a 	bltz	a1,9d002200 <_do_print_cdnopuxX+0x400>
9d0021d8:	02601021 	move	v0,s3
9d0021dc:	2664ffff 	addiu	a0,s3,-1
9d0021e0:	00852023 	subu	a0,a0,a1
9d0021e4:	24030030 	li	v1,48
9d0021e8:	a0430000 	sb	v1,0(v0)
9d0021ec:	2442ffff 	addiu	v0,v0,-1
9d0021f0:	5444fffe 	bnel	v0,a0,9d0021ec <_do_print_cdnopuxX+0x3ec>
9d0021f4:	a0430000 	sb	v1,0(v0)
9d0021f8:	00052827 	nor	a1,zero,a1
9d0021fc:	02659821 	addu	s3,s3,a1
9d002200:	32e20004 	andi	v0,s7,0x4
9d002204:	1440003c 	bnez	v0,9d0022f8 <_do_print_cdnopuxX+0x4f8>
9d002208:	32e40800 	andi	a0,s7,0x800
9d00220c:	3084ffff 	andi	a0,a0,0xffff
9d002210:	50800007 	beqzl	a0,9d002230 <_do_print_cdnopuxX+0x430>
9d002214:	8fa30064 	lw	v1,100(sp)
9d002218:	24020008 	li	v0,8
9d00221c:	12020131 	beq	s0,v0,9d0026e4 <_do_print_cdnopuxX+0x8e4>
9d002220:	24020010 	li	v0,16
9d002224:	12020158 	beq	s0,v0,9d002788 <_do_print_cdnopuxX+0x988>
9d002228:	32e40020 	andi	a0,s7,0x20
9d00222c:	8fa30064 	lw	v1,100(sp)
9d002230:	10600007 	beqz	v1,9d002250 <_do_print_cdnopuxX+0x450>
9d002234:	8fa4006c 	lw	a0,108(sp)
9d002238:	1480009c 	bnez	a0,9d0024ac <_do_print_cdnopuxX+0x6ac>
9d00223c:	32e20002 	andi	v0,s7,0x2
9d002240:	10400003 	beqz	v0,9d002250 <_do_print_cdnopuxX+0x450>
9d002244:	2402002b 	li	v0,43
9d002248:	a2620000 	sb	v0,0(s3)
9d00224c:	2673ffff 	addiu	s3,s3,-1
9d002250:	26650001 	addiu	a1,s3,1
9d002254:	afb70010 	sw	s7,16(sp)
9d002258:	8fa40098 	lw	a0,152(sp)
9d00225c:	8fa20058 	lw	v0,88(sp)
9d002260:	00453023 	subu	a2,v0,a1
9d002264:	0f401079 	jal	9d0041e4 <_outcnvrt>
9d002268:	02c03821 	move	a3,s6
9d00226c:	8fa30060 	lw	v1,96(sp)
9d002270:	00621821 	addu	v1,v1,v0
9d002274:	0b400796 	j	9d001e58 <_do_print_cdnopuxX+0x58>
9d002278:	afa30060 	sw	v1,96(sp)
9d00227c:	36f70020 	ori	s7,s7,0x20
9d002280:	36f70810 	ori	s7,s7,0x810
9d002284:	2402ffff 	li	v0,-1
9d002288:	17c2ff9c 	bne	s8,v0,9d0020fc <_do_print_cdnopuxX+0x2fc>
9d00228c:	24100010 	li	s0,16
9d002290:	00002821 	move	a1,zero
9d002294:	241e0001 	li	s8,1
9d002298:	32e200c0 	andi	v0,s7,0xc0
9d00229c:	1440ff9c 	bnez	v0,9d002110 <_do_print_cdnopuxX+0x310>
9d0022a0:	afa20064 	sw	v0,100(sp)
9d0022a4:	7c171620 	seh	v0,s7
9d0022a8:	04400115 	bltz	v0,9d002700 <_do_print_cdnopuxX+0x900>
9d0022ac:	8fa400a0 	lw	a0,160(sp)
9d0022b0:	32e20010 	andi	v0,s7,0x10
9d0022b4:	50400099 	beqzl	v0,9d00251c <_do_print_cdnopuxX+0x71c>
9d0022b8:	32e20041 	andi	v0,s7,0x41
9d0022bc:	8fa400a0 	lw	a0,160(sp)
9d0022c0:	8c950000 	lw	s5,0(a0)
9d0022c4:	0000a021 	move	s4,zero
9d0022c8:	24840004 	addiu	a0,a0,4
9d0022cc:	afa400a0 	sw	a0,160(sp)
9d0022d0:	0b400852 	j	9d002148 <_do_print_cdnopuxX+0x348>
9d0022d4:	afa0006c 	sw	zero,108(sp)
9d0022d8:	36f70010 	ori	s7,s7,0x10
9d0022dc:	32e8f7ff 	andi	t0,s7,0xf7ff
9d0022e0:	351700c0 	ori	s7,t0,0xc0
9d0022e4:	0b40083c 	j	9d0020f0 <_do_print_cdnopuxX+0x2f0>
9d0022e8:	2410000a 	li	s0,10
9d0022ec:	36f70020 	ori	s7,s7,0x20
9d0022f0:	0b40083c 	j	9d0020f0 <_do_print_cdnopuxX+0x2f0>
9d0022f4:	24100010 	li	s0,16
9d0022f8:	8fa20068 	lw	v0,104(sp)
9d0022fc:	02621823 	subu	v1,s3,v0
9d002300:	3084ffff 	andi	a0,a0,0xffff
9d002304:	10800006 	beqz	a0,9d002320 <_do_print_cdnopuxX+0x520>
9d002308:	02c31821 	addu	v1,s6,v1
9d00230c:	24020008 	li	v0,8
9d002310:	1202012d 	beq	s0,v0,9d0027c8 <_do_print_cdnopuxX+0x9c8>
9d002314:	2462fffe 	addiu	v0,v1,-2
9d002318:	3a050010 	xori	a1,s0,0x10
9d00231c:	0045180a 	movz	v1,v0,a1
9d002320:	8fa20064 	lw	v0,100(sp)
9d002324:	10400004 	beqz	v0,9d002338 <_do_print_cdnopuxX+0x538>
9d002328:	8fa2006c 	lw	v0,108(sp)
9d00232c:	10400099 	beqz	v0,9d002594 <_do_print_cdnopuxX+0x794>
9d002330:	32e20003 	andi	v0,s7,0x3
9d002334:	2463ffff 	addiu	v1,v1,-1
9d002338:	1860ffb5 	blez	v1,9d002210 <_do_print_cdnopuxX+0x410>
9d00233c:	02601021 	move	v0,s3
9d002340:	02634823 	subu	t1,s3,v1
9d002344:	24030030 	li	v1,48
9d002348:	a0430000 	sb	v1,0(v0)
9d00234c:	2442ffff 	addiu	v0,v0,-1
9d002350:	5522fffe 	bnel	t1,v0,9d00234c <_do_print_cdnopuxX+0x54c>
9d002354:	a0430000 	sb	v1,0(v0)
9d002358:	0b400884 	j	9d002210 <_do_print_cdnopuxX+0x410>
9d00235c:	01209821 	move	s3,t1
9d002360:	8fa200a0 	lw	v0,160(sp)
9d002364:	8c560000 	lw	s6,0(v0)
9d002368:	24550004 	addiu	s5,v0,4
9d00236c:	26100001 	addiu	s0,s0,1
9d002370:	06c10003 	bgez	s6,9d002380 <_do_print_cdnopuxX+0x580>
9d002374:	80820001 	lb	v0,1(a0)
9d002378:	36f70008 	ori	s7,s7,0x8
9d00237c:	0016b023 	negu	s6,s6
9d002380:	afb500a0 	sw	s5,160(sp)
9d002384:	2403002e 	li	v1,46
9d002388:	1443ff09 	bne	v0,v1,9d001fb0 <_do_print_cdnopuxX+0x1b0>
9d00238c:	241effff 	li	s8,-1
9d002390:	82020001 	lb	v0,1(s0)
9d002394:	2403002a 	li	v1,42
9d002398:	104300ed 	beq	v0,v1,9d002750 <_do_print_cdnopuxX+0x950>
9d00239c:	2443ffd0 	addiu	v1,v0,-48
9d0023a0:	2c63000a 	sltiu	v1,v1,10
9d0023a4:	26100001 	addiu	s0,s0,1
9d0023a8:	1060ff01 	beqz	v1,9d001fb0 <_do_print_cdnopuxX+0x1b0>
9d0023ac:	0000f021 	move	s8,zero
9d0023b0:	001e1840 	sll	v1,s8,0x1
9d0023b4:	001e58c0 	sll	t3,s8,0x3
9d0023b8:	006b5821 	addu	t3,v1,t3
9d0023bc:	26100001 	addiu	s0,s0,1
9d0023c0:	01625821 	addu	t3,t3,v0
9d0023c4:	82020000 	lb	v0,0(s0)
9d0023c8:	2443ffd0 	addiu	v1,v0,-48
9d0023cc:	2c63000a 	sltiu	v1,v1,10
9d0023d0:	1460fff7 	bnez	v1,9d0023b0 <_do_print_cdnopuxX+0x5b0>
9d0023d4:	257effd0 	addiu	s8,t3,-48
9d0023d8:	24030068 	li	v1,104
9d0023dc:	1443fef8 	bne	v0,v1,9d001fc0 <_do_print_cdnopuxX+0x1c0>
9d0023e0:	2403006c 	li	v1,108
9d0023e4:	82030001 	lb	v1,1(s0)
9d0023e8:	506200e3 	beql	v1,v0,9d002778 <_do_print_cdnopuxX+0x978>
9d0023ec:	82020002 	lb	v0,2(s0)
9d0023f0:	36f70040 	ori	s7,s7,0x40
9d0023f4:	00601021 	move	v0,v1
9d0023f8:	26100001 	addiu	s0,s0,1
9d0023fc:	32e40002 	andi	a0,s7,0x2
9d002400:	32e3fffe 	andi	v1,s7,0xfffe
9d002404:	0064b80b 	movn	s7,v1,a0
9d002408:	2442ffbc 	addiu	v0,v0,-68
9d00240c:	32e50008 	andi	a1,s7,0x8
9d002410:	32e4fffb 	andi	a0,s7,0xfffb
9d002414:	2c430035 	sltiu	v1,v0,53
9d002418:	26120001 	addiu	s2,s0,1
9d00241c:	1460fef5 	bnez	v1,9d001ff4 <_do_print_cdnopuxX+0x1f4>
9d002420:	0085b80b 	movn	s7,a0,a1
9d002424:	0b40089b 	j	9d00226c <_do_print_cdnopuxX+0x46c>
9d002428:	00001021 	move	v0,zero
9d00242c:	82030001 	lb	v1,1(s0)
9d002430:	506200e1 	beql	v1,v0,9d0027b8 <_do_print_cdnopuxX+0x9b8>
9d002434:	82020002 	lb	v0,2(s0)
9d002438:	36f70010 	ori	s7,s7,0x10
9d00243c:	00601021 	move	v0,v1
9d002440:	0b4008ff 	j	9d0023fc <_do_print_cdnopuxX+0x5fc>
9d002444:	26100001 	addiu	s0,s0,1
9d002448:	12a000d7 	beqz	s5,9d0027a8 <_do_print_cdnopuxX+0x9a8>
9d00244c:	02a06821 	move	t5,s5
9d002450:	27a30057 	addiu	v1,sp,87
9d002454:	afa30068 	sw	v1,104(sp)
9d002458:	32e30020 	andi	v1,s7,0x20
9d00245c:	24050037 	li	a1,55
9d002460:	8fb30068 	lw	s3,104(sp)
9d002464:	24020057 	li	v0,87
9d002468:	0043280a 	movz	a1,v0,v1
9d00246c:	01b0001b 	divu	zero,t5,s0
9d002470:	020001f4 	teq	s0,zero,0x7
9d002474:	00001810 	mfhi	v1
9d002478:	2673ffff 	addiu	s3,s3,-1
9d00247c:	27deffff 	addiu	s8,s8,-1
9d002480:	01b0001b 	divu	zero,t5,s0
9d002484:	020001f4 	teq	s0,zero,0x7
9d002488:	00006812 	mflo	t5
9d00248c:	2864000a 	slti	a0,v1,10
9d002490:	24620030 	addiu	v0,v1,48
9d002494:	00651821 	addu	v1,v1,a1
9d002498:	0064100a 	movz	v0,v1,a0
9d00249c:	15a0fff3 	bnez	t5,9d00246c <_do_print_cdnopuxX+0x66c>
9d0024a0:	a2620001 	sb	v0,1(s3)
9d0024a4:	0b400875 	j	9d0021d4 <_do_print_cdnopuxX+0x3d4>
9d0024a8:	27c5ffff 	addiu	a1,s8,-1
9d0024ac:	2402002d 	li	v0,45
9d0024b0:	a2620000 	sb	v0,0(s3)
9d0024b4:	0b400894 	j	9d002250 <_do_print_cdnopuxX+0x450>
9d0024b8:	2673ffff 	addiu	s3,s3,-1
9d0024bc:	24040025 	li	a0,37
9d0024c0:	0f4011d7 	jal	9d00475c <fputc>
9d0024c4:	8fa50098 	lw	a1,152(sp)
9d0024c8:	26520002 	addiu	s2,s2,2
9d0024cc:	8fa40060 	lw	a0,96(sp)
9d0024d0:	24840001 	addiu	a0,a0,1
9d0024d4:	0b400796 	j	9d001e58 <_do_print_cdnopuxX+0x58>
9d0024d8:	afa40060 	sw	a0,96(sp)
9d0024dc:	82020001 	lb	v0,1(s0)
9d0024e0:	36f78000 	ori	s7,s7,0x8000
9d0024e4:	0b4008ff 	j	9d0023fc <_do_print_cdnopuxX+0x5fc>
9d0024e8:	26100001 	addiu	s0,s0,1
9d0024ec:	50400074 	beqzl	v0,9d0026c0 <_do_print_cdnopuxX+0x8c0>
9d0024f0:	8fa300a0 	lw	v1,160(sp)
9d0024f4:	8fa200a0 	lw	v0,160(sp)
9d0024f8:	8c550000 	lw	s5,0(v0)
9d0024fc:	24420004 	addiu	v0,v0,4
9d002500:	afa200a0 	sw	v0,160(sp)
9d002504:	0015a7c3 	sra	s4,s5,0x1f
9d002508:	02801021 	move	v0,s4
9d00250c:	0441ff0d 	bgez	v0,9d002144 <_do_print_cdnopuxX+0x344>
9d002510:	02a01821 	move	v1,s5
9d002514:	0b40095e 	j	9d002578 <_do_print_cdnopuxX+0x778>
9d002518:	00036823 	negu	t5,v1
9d00251c:	50400062 	beqzl	v0,9d0026a8 <_do_print_cdnopuxX+0x8a8>
9d002520:	8fa300a0 	lw	v1,160(sp)
9d002524:	8fa200a0 	lw	v0,160(sp)
9d002528:	8c550000 	lw	s5,0(v0)
9d00252c:	0000a021 	move	s4,zero
9d002530:	24420004 	addiu	v0,v0,4
9d002534:	afa200a0 	sw	v0,160(sp)
9d002538:	0b400852 	j	9d002148 <_do_print_cdnopuxX+0x348>
9d00253c:	afa0006c 	sw	zero,108(sp)
9d002540:	2402ffff 	li	v0,-1
9d002544:	8fbf0094 	lw	ra,148(sp)
9d002548:	8fbe0090 	lw	s8,144(sp)
9d00254c:	8fb7008c 	lw	s7,140(sp)
9d002550:	8fb60088 	lw	s6,136(sp)
9d002554:	8fb50084 	lw	s5,132(sp)
9d002558:	8fb40080 	lw	s4,128(sp)
9d00255c:	8fb3007c 	lw	s3,124(sp)
9d002560:	8fb20078 	lw	s2,120(sp)
9d002564:	8fb10074 	lw	s1,116(sp)
9d002568:	8fb00070 	lw	s0,112(sp)
9d00256c:	03e00008 	jr	ra
9d002570:	27bd0098 	addiu	sp,sp,152
9d002574:	00036823 	negu	t5,v1
9d002578:	000d182b 	sltu	v1,zero,t5
9d00257c:	00021023 	negu	v0,v0
9d002580:	01a0a821 	move	s5,t5
9d002584:	0043a023 	subu	s4,v0,v1
9d002588:	24040001 	li	a0,1
9d00258c:	0b400852 	j	9d002148 <_do_print_cdnopuxX+0x348>
9d002590:	afa4006c 	sw	a0,108(sp)
9d002594:	5440ff68 	bnezl	v0,9d002338 <_do_print_cdnopuxX+0x538>
9d002598:	2463ffff 	addiu	v1,v1,-1
9d00259c:	0b4008ce 	j	9d002338 <_do_print_cdnopuxX+0x538>
9d0025a0:	00000000 	nop
9d0025a4:	0b40083c 	j	9d0020f0 <_do_print_cdnopuxX+0x2f0>
9d0025a8:	24100008 	li	s0,8
9d0025ac:	7c171620 	seh	v0,s7
9d0025b0:	04400096 	bltz	v0,9d00280c <_do_print_cdnopuxX+0xa0c>
9d0025b4:	8fa400a0 	lw	a0,160(sp)
9d0025b8:	32e20010 	andi	v0,s7,0x10
9d0025bc:	14400087 	bnez	v0,9d0027dc <_do_print_cdnopuxX+0x9dc>
9d0025c0:	8fa200a0 	lw	v0,160(sp)
9d0025c4:	32e20040 	andi	v0,s7,0x40
9d0025c8:	1040009b 	beqz	v0,9d002838 <_do_print_cdnopuxX+0xa38>
9d0025cc:	32e80001 	andi	t0,s7,0x1
9d0025d0:	8fa200a0 	lw	v0,160(sp)
9d0025d4:	8c430000 	lw	v1,0(v0)
9d0025d8:	00001021 	move	v0,zero
9d0025dc:	8fa400a0 	lw	a0,160(sp)
9d0025e0:	24840004 	addiu	a0,a0,4
9d0025e4:	afa400a0 	sw	a0,160(sp)
9d0025e8:	8fa40060 	lw	a0,96(sp)
9d0025ec:	0b40089b 	j	9d00226c <_do_print_cdnopuxX+0x46c>
9d0025f0:	a4640000 	sh	a0,0(v1)
9d0025f4:	8fa400a0 	lw	a0,160(sp)
9d0025f8:	8c900000 	lw	s0,0(a0)
9d0025fc:	3c039d00 	lui	v1,0x9d00
9d002600:	24624d2c 	addiu	v0,v1,19756
9d002604:	0050800a 	movz	s0,v0,s0
9d002608:	2402ffff 	li	v0,-1
9d00260c:	13c2007b 	beq	s8,v0,9d0027fc <_do_print_cdnopuxX+0x9fc>
9d002610:	24950004 	addiu	s5,a0,4
9d002614:	1bc00094 	blez	s8,9d002868 <_do_print_cdnopuxX+0xa68>
9d002618:	021e5821 	addu	t3,s0,s8
9d00261c:	82030000 	lb	v1,0(s0)
9d002620:	14600005 	bnez	v1,9d002638 <_do_print_cdnopuxX+0x838>
9d002624:	02001021 	move	v0,s0
9d002628:	0b400992 	j	9d002648 <_do_print_cdnopuxX+0x848>
9d00262c:	00001021 	move	v0,zero
9d002630:	50600005 	beqzl	v1,9d002648 <_do_print_cdnopuxX+0x848>
9d002634:	00501023 	subu	v0,v0,s0
9d002638:	24420001 	addiu	v0,v0,1
9d00263c:	544bfffc 	bnel	v0,t3,9d002630 <_do_print_cdnopuxX+0x830>
9d002640:	80430000 	lb	v1,0(v0)
9d002644:	00501023 	subu	v0,v0,s0
9d002648:	afb70010 	sw	s7,16(sp)
9d00264c:	8fa40098 	lw	a0,152(sp)
9d002650:	02002821 	move	a1,s0
9d002654:	00403021 	move	a2,v0
9d002658:	0f401079 	jal	9d0041e4 <_outcnvrt>
9d00265c:	02c03821 	move	a3,s6
9d002660:	0b40089b 	j	9d00226c <_do_print_cdnopuxX+0x46c>
9d002664:	afb500a0 	sw	s5,160(sp)
9d002668:	8fa300a0 	lw	v1,160(sp)
9d00266c:	8c620000 	lw	v0,0(v1)
9d002670:	24750004 	addiu	s5,v1,4
9d002674:	afb70010 	sw	s7,16(sp)
9d002678:	8fa40098 	lw	a0,152(sp)
9d00267c:	27a50018 	addiu	a1,sp,24
9d002680:	24060001 	li	a2,1
9d002684:	02c03821 	move	a3,s6
9d002688:	a3a20018 	sb	v0,24(sp)
9d00268c:	0f401079 	jal	9d0041e4 <_outcnvrt>
9d002690:	afb500a0 	sw	s5,160(sp)
9d002694:	0b40089c 	j	9d002270 <_do_print_cdnopuxX+0x470>
9d002698:	8fa30060 	lw	v1,96(sp)
9d00269c:	36f70010 	ori	s7,s7,0x10
9d0026a0:	0b40083c 	j	9d0020f0 <_do_print_cdnopuxX+0x2f0>
9d0026a4:	24100008 	li	s0,8
9d0026a8:	8c750000 	lw	s5,0(v1)
9d0026ac:	0000a021 	move	s4,zero
9d0026b0:	24630004 	addiu	v1,v1,4
9d0026b4:	afa300a0 	sw	v1,160(sp)
9d0026b8:	0b400852 	j	9d002148 <_do_print_cdnopuxX+0x348>
9d0026bc:	afa0006c 	sw	zero,108(sp)
9d0026c0:	8c750000 	lw	s5,0(v1)
9d0026c4:	24630004 	addiu	v1,v1,4
9d0026c8:	afa300a0 	sw	v1,160(sp)
9d0026cc:	0015a7c3 	sra	s4,s5,0x1f
9d0026d0:	02801021 	move	v0,s4
9d0026d4:	0441fe9b 	bgez	v0,9d002144 <_do_print_cdnopuxX+0x344>
9d0026d8:	02a01821 	move	v1,s5
9d0026dc:	0b40095e 	j	9d002578 <_do_print_cdnopuxX+0x778>
9d0026e0:	00036823 	negu	t5,v1
9d0026e4:	82630001 	lb	v1,1(s3)
9d0026e8:	24020030 	li	v0,48
9d0026ec:	1062fed0 	beq	v1,v0,9d002230 <_do_print_cdnopuxX+0x430>
9d0026f0:	8fa30064 	lw	v1,100(sp)
9d0026f4:	a2620000 	sb	v0,0(s3)
9d0026f8:	0b40088b 	j	9d00222c <_do_print_cdnopuxX+0x42c>
9d0026fc:	2673ffff 	addiu	s3,s3,-1
9d002700:	24820007 	addiu	v0,a0,7
9d002704:	7c021004 	ins	v0,zero,0x0,0x3
9d002708:	24430008 	addiu	v1,v0,8
9d00270c:	afa300a0 	sw	v1,160(sp)
9d002710:	8c550000 	lw	s5,0(v0)
9d002714:	8c540004 	lw	s4,4(v0)
9d002718:	0b400852 	j	9d002148 <_do_print_cdnopuxX+0x348>
9d00271c:	afa0006c 	sw	zero,108(sp)
9d002720:	8fa300a0 	lw	v1,160(sp)
9d002724:	24750007 	addiu	s5,v1,7
9d002728:	7c151004 	ins	s5,zero,0x0,0x3
9d00272c:	8ea30000 	lw	v1,0(s5)
9d002730:	8ea20004 	lw	v0,4(s5)
9d002734:	26b50008 	addiu	s5,s5,8
9d002738:	afb500a0 	sw	s5,160(sp)
9d00273c:	0060a821 	move	s5,v1
9d002740:	0441fe80 	bgez	v0,9d002144 <_do_print_cdnopuxX+0x344>
9d002744:	0040a021 	move	s4,v0
9d002748:	0b40095e 	j	9d002578 <_do_print_cdnopuxX+0x778>
9d00274c:	00036823 	negu	t5,v1
9d002750:	8fa300a0 	lw	v1,160(sp)
9d002754:	8c7e0000 	lw	s8,0(v1)
9d002758:	24750004 	addiu	s5,v1,4
9d00275c:	26030002 	addiu	v1,s0,2
9d002760:	82020002 	lb	v0,2(s0)
9d002764:	afb500a0 	sw	s5,160(sp)
9d002768:	07c1fe11 	bgez	s8,9d001fb0 <_do_print_cdnopuxX+0x1b0>
9d00276c:	00608021 	move	s0,v1
9d002770:	0b4007ec 	j	9d001fb0 <_do_print_cdnopuxX+0x1b0>
9d002774:	241effff 	li	s8,-1
9d002778:	36f70001 	ori	s7,s7,0x1
9d00277c:	26100001 	addiu	s0,s0,1
9d002780:	0b4008ff 	j	9d0023fc <_do_print_cdnopuxX+0x5fc>
9d002784:	26100001 	addiu	s0,s0,1
9d002788:	24020058 	li	v0,88
9d00278c:	24030078 	li	v1,120
9d002790:	0064100a 	movz	v0,v1,a0
9d002794:	a2620000 	sb	v0,0(s3)
9d002798:	24020030 	li	v0,48
9d00279c:	a262ffff 	sb	v0,-1(s3)
9d0027a0:	0b40088b 	j	9d00222c <_do_print_cdnopuxX+0x42c>
9d0027a4:	2673fffe 	addiu	s3,s3,-2
9d0027a8:	27a20057 	addiu	v0,sp,87
9d0027ac:	afa20068 	sw	v0,104(sp)
9d0027b0:	0b400875 	j	9d0021d4 <_do_print_cdnopuxX+0x3d4>
9d0027b4:	00409821 	move	s3,v0
9d0027b8:	36f78000 	ori	s7,s7,0x8000
9d0027bc:	26100001 	addiu	s0,s0,1
9d0027c0:	0b4008ff 	j	9d0023fc <_do_print_cdnopuxX+0x5fc>
9d0027c4:	26100001 	addiu	s0,s0,1
9d0027c8:	82620001 	lb	v0,1(s3)
9d0027cc:	38420030 	xori	v0,v0,0x30
9d0027d0:	0002102b 	sltu	v0,zero,v0
9d0027d4:	0b4008c8 	j	9d002320 <_do_print_cdnopuxX+0x520>
9d0027d8:	00621823 	subu	v1,v1,v0
9d0027dc:	8c430000 	lw	v1,0(v0)
9d0027e0:	00001021 	move	v0,zero
9d0027e4:	8fa400a0 	lw	a0,160(sp)
9d0027e8:	24840004 	addiu	a0,a0,4
9d0027ec:	afa400a0 	sw	a0,160(sp)
9d0027f0:	8fa40060 	lw	a0,96(sp)
9d0027f4:	0b40089b 	j	9d00226c <_do_print_cdnopuxX+0x46c>
9d0027f8:	ac640000 	sw	a0,0(v1)
9d0027fc:	0f401202 	jal	9d004808 <strlen>
9d002800:	02002021 	move	a0,s0
9d002804:	0b400993 	j	9d00264c <_do_print_cdnopuxX+0x84c>
9d002808:	afb70010 	sw	s7,16(sp)
9d00280c:	8c820000 	lw	v0,0(a0)
9d002810:	8fa40060 	lw	a0,96(sp)
9d002814:	00041fc3 	sra	v1,a0,0x1f
9d002818:	8fa400a0 	lw	a0,160(sp)
9d00281c:	24840004 	addiu	a0,a0,4
9d002820:	afa400a0 	sw	a0,160(sp)
9d002824:	8fa40060 	lw	a0,96(sp)
9d002828:	ac440000 	sw	a0,0(v0)
9d00282c:	ac430004 	sw	v1,4(v0)
9d002830:	0b40089b 	j	9d00226c <_do_print_cdnopuxX+0x46c>
9d002834:	00001021 	move	v0,zero
9d002838:	8fa200a0 	lw	v0,160(sp)
9d00283c:	8c430000 	lw	v1,0(v0)
9d002840:	00001021 	move	v0,zero
9d002844:	8fa400a0 	lw	a0,160(sp)
9d002848:	24840004 	addiu	a0,a0,4
9d00284c:	afa400a0 	sw	a0,160(sp)
9d002850:	11000003 	beqz	t0,9d002860 <_do_print_cdnopuxX+0xa60>
9d002854:	8fa40060 	lw	a0,96(sp)
9d002858:	0b40089b 	j	9d00226c <_do_print_cdnopuxX+0x46c>
9d00285c:	a0640000 	sb	a0,0(v1)
9d002860:	0b40089b 	j	9d00226c <_do_print_cdnopuxX+0x46c>
9d002864:	ac640000 	sw	a0,0(v1)
9d002868:	0b400992 	j	9d002648 <_do_print_cdnopuxX+0x848>
9d00286c:	00001021 	move	v0,zero

Disassembly of section .text:

9d002870 <CNISR>:


// ***********************************************************************************************
// ISR using Change Notification for synchronization with PPOD controller
// ***********************************************************************************************
void __ISR(_CHANGE_NOTICE_VECTOR, IPL3SOFT) CNISR(void) { // INT step 1
9d002870:	415de800 	rdpgpr	sp,sp
9d002874:	401a7000 	mfc0	k0,c0_epc
9d002878:	401b6000 	mfc0	k1,c0_status
9d00287c:	27bdff58 	addiu	sp,sp,-168
9d002880:	afba00a4 	sw	k0,164(sp)
9d002884:	401a6002 	mfc0	k0,c0_srsctl
9d002888:	afbb00a0 	sw	k1,160(sp)
9d00288c:	afba009c 	sw	k0,156(sp)
9d002890:	7c1b7844 	ins	k1,zero,0x1,0xf
9d002894:	377b0c00 	ori	k1,k1,0xc00
9d002898:	409b6000 	mtc0	k1,c0_status
9d00289c:	afbf008c 	sw	ra,140(sp)
9d0028a0:	afb90088 	sw	t9,136(sp)
9d0028a4:	afb80084 	sw	t8,132(sp)
9d0028a8:	afaf0080 	sw	t7,128(sp)
9d0028ac:	afae007c 	sw	t6,124(sp)
9d0028b0:	afad0078 	sw	t5,120(sp)
9d0028b4:	afac0074 	sw	t4,116(sp)
9d0028b8:	afab0070 	sw	t3,112(sp)
9d0028bc:	afaa006c 	sw	t2,108(sp)
9d0028c0:	afa90068 	sw	t1,104(sp)
9d0028c4:	afa80064 	sw	t0,100(sp)
9d0028c8:	afa70060 	sw	a3,96(sp)
9d0028cc:	afa6005c 	sw	a2,92(sp)
9d0028d0:	afa50058 	sw	a1,88(sp)
9d0028d4:	afa40054 	sw	a0,84(sp)
9d0028d8:	afa30050 	sw	v1,80(sp)
9d0028dc:	afa2004c 	sw	v0,76(sp)
9d0028e0:	afa10048 	sw	at,72(sp)
9d0028e4:	00001012 	mflo	v0
9d0028e8:	afa20094 	sw	v0,148(sp)
9d0028ec:	00001810 	mfhi	v1
9d0028f0:	afa30090 	sw	v1,144(sp)
  
	// Since pins on port F are being monitored by CN, must read it to allow continued functioning
  newF = PORTF;
9d0028f4:	3c02bf88 	lui	v0,0xbf88
9d0028f8:	8c426150 	lw	v0,24912(v0)
9d0028fc:	af828028 	sw	v0,-32728(gp)

	// Save the current values for future use
  oldF = newF;
9d002900:	af82802c 	sw	v0,-32724(gp)


	// =============================================================================================
	// If RecordFlag is on, start the procedure of recording droplet bouncing
	// =============================================================================================
	if (RecordFlag == 1) {
9d002904:	93838025 	lbu	v1,-32731(gp)
9d002908:	306300ff 	andi	v1,v1,0xff
9d00290c:	24020001 	li	v0,1
9d002910:	5462004f 	bnel	v1,v0,9d002a50 <.LBE2+0x4>
9d002914:	3c02bf88 	lui	v0,0xbf88

9d002918 <.LBB2>:

  	// Turn TriggerFlag ON to let ISRs know to create ExSync signals
	  TriggerFlag_Side = 1;
9d002918:	a3828024 	sb	v0,-32732(gp)

		// -------------------------------------------------------------------------------------------
		// Delay DELAYTIME seconds for phase relationship of droplet contacting bath
		// -------------------------------------------------------------------------------------------
		int counter1=0;
		int delay = DELAYTIME*40000000;
9d00291c:	8f848038 	lw	a0,-32712(gp)
9d002920:	3c029d00 	lui	v0,0x9d00
9d002924:	0f400fba 	jal	9d003ee8 <.LFE9>
9d002928:	8c454e24 	lw	a1,20004(v0)
9d00292c:	0f401288 	jal	9d004a20 <__fixsfsi>
9d002930:	00402021 	move	a0,v0
		while( counter1 < delay ) {
9d002934:	18400004 	blez	v0,9d002948 <.LBB2+0x30>
9d002938:	00001821 	move	v1,zero
			counter1++;
9d00293c:	24630001 	addiu	v1,v1,1
		// -------------------------------------------------------------------------------------------
		// Delay DELAYTIME seconds for phase relationship of droplet contacting bath
		// -------------------------------------------------------------------------------------------
		int counter1=0;
		int delay = DELAYTIME*40000000;
		while( counter1 < delay ) {
9d002940:	1462ffff 	bne	v1,v0,9d002940 <.LBB2+0x28>
9d002944:	24630001 	addiu	v1,v1,1
		// -------------------------------------------------------------------------------------------
		// Create droplet
		// -------------------------------------------------------------------------------------------

		//+Vcc: set L1 to LOW, L2 to HIGH, PWMA to >0
		OC1RS = 4000;
9d002948:	24030fa0 	li	v1,4000
9d00294c:	3c02bf80 	lui	v0,0xbf80
9d002950:	ac433020 	sw	v1,12320(v0)
		LATDbits.LATD2 = 0;
9d002954:	3c02bf88 	lui	v0,0xbf88
9d002958:	944360e0 	lhu	v1,24800(v0)
9d00295c:	7c031084 	ins	v1,zero,0x2,0x1
9d002960:	a44360e0 	sh	v1,24800(v0)
		LATDbits.LATD1 = 1;
9d002964:	944360e0 	lhu	v1,24800(v0)
9d002968:	24040001 	li	a0,1
9d00296c:	7c830844 	ins	v1,a0,0x1,0x1
9d002970:	a44360e0 	sh	v1,24800(v0)

		//Remain +Vcc for PULSETIME microseconds
		int counter2=0;
		while( counter2 < (PULSETIME*40) ) {
9d002974:	8f828010 	lw	v0,-32752(gp)
9d002978:	000218c0 	sll	v1,v0,0x3
9d00297c:	00021140 	sll	v0,v0,0x5
9d002980:	00621821 	addu	v1,v1,v0
9d002984:	58600006 	blezl	v1,9d0029a0 <.LBB2+0x88>
9d002988:	24030fa0 	li	v1,4000
		OC1RS = 4000;
		LATDbits.LATD2 = 0;
		LATDbits.LATD1 = 1;

		//Remain +Vcc for PULSETIME microseconds
		int counter2=0;
9d00298c:	00001021 	move	v0,zero
		while( counter2 < (PULSETIME*40) ) {
			counter2++;
9d002990:	24420001 	addiu	v0,v0,1
		LATDbits.LATD2 = 0;
		LATDbits.LATD1 = 1;

		//Remain +Vcc for PULSETIME microseconds
		int counter2=0;
		while( counter2 < (PULSETIME*40) ) {
9d002994:	5443ffff 	bnel	v0,v1,9d002994 <.LBB2+0x7c>
9d002998:	24420001 	addiu	v0,v0,1
			counter2++;
		}

		//-Vcc: set L1 to HIGH, L2 to LOW, PWMA to >0
		OC1RS = 4000;
9d00299c:	24030fa0 	li	v1,4000
9d0029a0:	3c02bf80 	lui	v0,0xbf80
9d0029a4:	ac433020 	sw	v1,12320(v0)
		LATDbits.LATD2 = 1;
9d0029a8:	3c02bf88 	lui	v0,0xbf88
9d0029ac:	944360e0 	lhu	v1,24800(v0)
9d0029b0:	24040001 	li	a0,1
9d0029b4:	7c831084 	ins	v1,a0,0x2,0x1
9d0029b8:	a44360e0 	sh	v1,24800(v0)
		LATDbits.LATD1 = 0;
9d0029bc:	944360e0 	lhu	v1,24800(v0)
9d0029c0:	7c030844 	ins	v1,zero,0x1,0x1
9d0029c4:	a44360e0 	sh	v1,24800(v0)


		// -------------------------------------------------------------------------------------------
		// Wait until both ExSync signals have been sent
		// -------------------------------------------------------------------------------------------
		while( CurrentExSync_Side < (NUMIMAGES_Side-1) ) {
9d0029c8:	8f82803c 	lw	v0,-32708(gp)
9d0029cc:	0b400a78 	j	9d0029e0 <.LBB2+0xc8>
9d0029d0:	2442ffff 	addiu	v0,v0,-1

			// Turn TriggerFlag_Side OFF when CurrentExSync_Side is the same as NUMIMAGES_Side
			if( CurrentExSync_Side == (NUMIMAGES_Side-1) ) {
9d0029d4:	8f838020 	lw	v1,-32736(gp)
9d0029d8:	50430001 	beql	v0,v1,9d0029e0 <.LBB2+0xc8>
9d0029dc:	a3808024 	sb	zero,-32732(gp)


		// -------------------------------------------------------------------------------------------
		// Wait until both ExSync signals have been sent
		// -------------------------------------------------------------------------------------------
		while( CurrentExSync_Side < (NUMIMAGES_Side-1) ) {
9d0029e0:	8f838020 	lw	v1,-32736(gp)
9d0029e4:	0062182a 	slt	v1,v1,v0
9d0029e8:	1460fffa 	bnez	v1,9d0029d4 <.LBB2+0xbc>
9d0029ec:	00000000 	nop
		}



		// Increment drop counter
		drop_counter++;
9d0029f0:	8f82801c 	lw	v0,-32740(gp)
9d0029f4:	24420001 	addiu	v0,v0,1
9d0029f8:	af82801c 	sw	v0,-32740(gp)

		// Create message for LCD
		char message[50];

		// Display properties on LCD
		LCD_Clear();
9d0029fc:	0f400e7f 	jal	9d0039fc <LCD_Clear>
9d002a00:	00000000 	nop

9d002a04 <.LVL11>:
		LCD_Move(0,0);
9d002a04:	00002021 	move	a0,zero
9d002a08:	0f400ebf 	jal	9d003afc <LCD_Move>
9d002a0c:	00002821 	move	a1,zero

9d002a10 <.LVL12>:
		sprintf(message, "Drops: %d", drop_counter);
9d002a10:	8f86801c 	lw	a2,-32740(gp)
9d002a14:	27a40010 	addiu	a0,sp,16
9d002a18:	3c059d00 	lui	a1,0x9d00
9d002a1c:	0f4012a8 	jal	9d004aa0 <_sprintf_cdnopuxX>
9d002a20:	24a54e18 	addiu	a1,a1,19992

9d002a24 <.LVL13>:
		LCD_WriteString(message);
9d002a24:	0f400edb 	jal	9d003b6c <LCD_WriteString>
9d002a28:	27a40010 	addiu	a0,sp,16

9d002a2c <.LVL14>:

		
		// -------------------------------------------------------------------------------------------
		// Turn TriggerFlag and RecordFlag OFF, as well as resetting current ExSync signals
		// -------------------------------------------------------------------------------------------
		TriggerFlag_Side = 0;			// needs to be done again or after the first avi, trackcam only records 1 frame
9d002a2c:	a3808024 	sb	zero,-32732(gp)

		RecordFlag = 0;
9d002a30:	a3808025 	sb	zero,-32731(gp)

		CurrentExSync_Side = 0;
9d002a34:	af808020 	sw	zero,-32736(gp)
9d002a38:	3c0204c4 	lui	v0,0x4c4
9d002a3c:	3442b400 	ori	v0,v0,0xb400
9d002a40:	2442ffff 	addiu	v0,v0,-1



		// Sleep for 2 seconds - helps solves double drop production problem
		int counter3=0;
		while(counter3<(2*40000000)) {
9d002a44:	1440ffff 	bnez	v0,9d002a44 <.LVL14+0x18>
9d002a48:	2442ffff 	addiu	v0,v0,-1

9d002a4c <.LBE2>:

	}


	// Clear the interrupt flag
	IFS1bits.CNIF = 0;
9d002a4c:	3c02bf88 	lui	v0,0xbf88
9d002a50:	8c431040 	lw	v1,4160(v0)
9d002a54:	7c030004 	ins	v1,zero,0x0,0x1
9d002a58:	ac431040 	sw	v1,4160(v0)
}
9d002a5c:	8fa20094 	lw	v0,148(sp)
9d002a60:	00400013 	mtlo	v0
9d002a64:	8fa30090 	lw	v1,144(sp)
9d002a68:	00600011 	mthi	v1
9d002a6c:	8fbf008c 	lw	ra,140(sp)
9d002a70:	8fb90088 	lw	t9,136(sp)
9d002a74:	8fb80084 	lw	t8,132(sp)
9d002a78:	8faf0080 	lw	t7,128(sp)
9d002a7c:	8fae007c 	lw	t6,124(sp)
9d002a80:	8fad0078 	lw	t5,120(sp)
9d002a84:	8fac0074 	lw	t4,116(sp)
9d002a88:	8fab0070 	lw	t3,112(sp)
9d002a8c:	8faa006c 	lw	t2,108(sp)
9d002a90:	8fa90068 	lw	t1,104(sp)
9d002a94:	8fa80064 	lw	t0,100(sp)
9d002a98:	8fa70060 	lw	a3,96(sp)
9d002a9c:	8fa6005c 	lw	a2,92(sp)
9d002aa0:	8fa50058 	lw	a1,88(sp)
9d002aa4:	8fa40054 	lw	a0,84(sp)
9d002aa8:	8fa30050 	lw	v1,80(sp)
9d002aac:	8fa2004c 	lw	v0,76(sp)
9d002ab0:	8fa10048 	lw	at,72(sp)
9d002ab4:	41606000 	di
9d002ab8:	000000c0 	ehb
9d002abc:	8fba00a4 	lw	k0,164(sp)
9d002ac0:	8fbb00a0 	lw	k1,160(sp)
9d002ac4:	409a7000 	mtc0	k0,c0_epc
9d002ac8:	8fba009c 	lw	k0,156(sp)
9d002acc:	27bd00a8 	addiu	sp,sp,168
9d002ad0:	409a6002 	mtc0	k0,c0_srsctl
9d002ad4:	41dde800 	wrpgpr	sp,sp
9d002ad8:	409b6000 	mtc0	k1,c0_status
9d002adc:	42000018 	eret

9d002ae0 <ExSyncSide>:


// ***********************************************************************************************
// ISR using Timer2 to generate ExSync signal for Mikrotron and TrackCam cameras
// ***********************************************************************************************
void __ISR(_TIMER_2_VECTOR, IPL5SOFT) ExSyncSide(void) {
9d002ae0:	415de800 	rdpgpr	sp,sp
9d002ae4:	401a7000 	mfc0	k0,c0_epc
9d002ae8:	401b6000 	mfc0	k1,c0_status
9d002aec:	27bdffd8 	addiu	sp,sp,-40
9d002af0:	afba0024 	sw	k0,36(sp)
9d002af4:	401a6002 	mfc0	k0,c0_srsctl
9d002af8:	afbb0020 	sw	k1,32(sp)
9d002afc:	afba001c 	sw	k0,28(sp)
9d002b00:	7c1b7844 	ins	k1,zero,0x1,0xf
9d002b04:	377b1400 	ori	k1,k1,0x1400
9d002b08:	409b6000 	mtc0	k1,c0_status
9d002b0c:	afa4000c 	sw	a0,12(sp)
9d002b10:	afa30008 	sw	v1,8(sp)
9d002b14:	afa20004 	sw	v0,4(sp)
9d002b18:	00001012 	mflo	v0
9d002b1c:	afa20014 	sw	v0,20(sp)
9d002b20:	00001810 	mfhi	v1
9d002b24:	afa30010 	sw	v1,16(sp)

	// =============================================================================================
	// If TriggerFlag_Side is on, generate ExSync signals
	// =============================================================================================
	if( TriggerFlag_Side == 1 ) {
9d002b28:	93838024 	lbu	v1,-32732(gp)
9d002b2c:	306300ff 	andi	v1,v1,0xff
9d002b30:	24020001 	li	v0,1
9d002b34:	14620043 	bne	v1,v0,9d002c44 <.LBE5+0x10>
9d002b38:	3c02bf88 	lui	v0,0xbf88

		// Send ExSync signals to both cameras for the first frame
		if( CurrentExSync_Side == 0 ) {
9d002b3c:	8f828020 	lw	v0,-32736(gp)
9d002b40:	14400015 	bnez	v0,9d002b98 <.LBE3+0x8>
9d002b44:	3c02bf88 	lui	v0,0xbf88

9d002b48 <.LBB3>:
			// Set A3/A4 to LOW
			LATBbits.LATB3 = 0;
9d002b48:	94436060 	lhu	v1,24672(v0)
9d002b4c:	7c0318c4 	ins	v1,zero,0x3,0x1
9d002b50:	a4436060 	sh	v1,24672(v0)
			LATBbits.LATB4 = 0;
9d002b54:	94436060 	lhu	v1,24672(v0)
9d002b58:	7c032104 	ins	v1,zero,0x4,0x1
9d002b5c:	a4436060 	sh	v1,24672(v0)
9d002b60:	24020064 	li	v0,100
9d002b64:	2442ffff 	addiu	v0,v0,-1

			// Remain LOW for 100 clock cycles
			int counter1 = 0;
			while( counter1 < 100 ) {
9d002b68:	1440ffff 	bnez	v0,9d002b68 <.LBB3+0x20>
9d002b6c:	2442ffff 	addiu	v0,v0,-1
				counter1++;
			}

			// Set A3/A4 to HIGH
			LATBbits.LATB3 = 1;
9d002b70:	3c02bf88 	lui	v0,0xbf88
9d002b74:	94436060 	lhu	v1,24672(v0)
9d002b78:	24040001 	li	a0,1
9d002b7c:	7c8318c4 	ins	v1,a0,0x3,0x1
9d002b80:	a4436060 	sh	v1,24672(v0)
			LATBbits.LATB4 = 1;
9d002b84:	94436060 	lhu	v1,24672(v0)
9d002b88:	7c832104 	ins	v1,a0,0x4,0x1
9d002b8c:	a4436060 	sh	v1,24672(v0)

9d002b90 <.LBE3>:
9d002b90:	0b400b0d 	j	9d002c34 <.LBE5>
9d002b94:	00000000 	nop
		}
		// If integer multiple of side-view camera, send ExSync signals to both camera
		else if( (CurrentExSync_Side % INTEGER_MULTIPLE) == 0 ) {
9d002b98:	8f838020 	lw	v1,-32736(gp)
9d002b9c:	8f828040 	lw	v0,-32704(gp)
9d002ba0:	0062001a 	div	zero,v1,v0
9d002ba4:	004001f4 	teq	v0,zero,0x7
9d002ba8:	00002010 	mfhi	a0
9d002bac:	14800015 	bnez	a0,9d002c04 <.LBB5>
9d002bb0:	3c02bf88 	lui	v0,0xbf88

9d002bb4 <.LBB4>:
			// Set A3/A4 to LOW
			LATBbits.LATB3 = 0;
9d002bb4:	94436060 	lhu	v1,24672(v0)
9d002bb8:	7c0318c4 	ins	v1,zero,0x3,0x1
9d002bbc:	a4436060 	sh	v1,24672(v0)
			LATBbits.LATB4 = 0;
9d002bc0:	94436060 	lhu	v1,24672(v0)
9d002bc4:	7c032104 	ins	v1,zero,0x4,0x1
9d002bc8:	a4436060 	sh	v1,24672(v0)
9d002bcc:	24020064 	li	v0,100
9d002bd0:	2442ffff 	addiu	v0,v0,-1

			// Remain LOW for 100 clock cycles
			int counter1 = 0;
			while( counter1 < 100 ) {
9d002bd4:	1440ffff 	bnez	v0,9d002bd4 <.LBB4+0x20>
9d002bd8:	2442ffff 	addiu	v0,v0,-1
				counter1++;
			}

			// Set A3/A4 to HIGH
			LATBbits.LATB3 = 1;
9d002bdc:	3c02bf88 	lui	v0,0xbf88
9d002be0:	94436060 	lhu	v1,24672(v0)
9d002be4:	24040001 	li	a0,1
9d002be8:	7c8318c4 	ins	v1,a0,0x3,0x1
9d002bec:	a4436060 	sh	v1,24672(v0)
			LATBbits.LATB4 = 1;
9d002bf0:	94436060 	lhu	v1,24672(v0)
9d002bf4:	7c832104 	ins	v1,a0,0x4,0x1
9d002bf8:	a4436060 	sh	v1,24672(v0)

9d002bfc <.LBE4>:
9d002bfc:	0b400b0d 	j	9d002c34 <.LBE5>
9d002c00:	00000000 	nop

9d002c04 <.LBB5>:
		}
		// If not integer multiple of side-view camera, send ExSync signals to side-view camera only
		else {
			// Set A3 to LOW
			LATBbits.LATB3 = 0;
9d002c04:	94436060 	lhu	v1,24672(v0)
9d002c08:	7c0318c4 	ins	v1,zero,0x3,0x1
9d002c0c:	a4436060 	sh	v1,24672(v0)
9d002c10:	24020064 	li	v0,100
9d002c14:	2442ffff 	addiu	v0,v0,-1

			// Remain LOW for 100 clock cycles
			int counter1 = 0;
			while( counter1 < 100 ) {
9d002c18:	1440ffff 	bnez	v0,9d002c18 <.LBB5+0x14>
9d002c1c:	2442ffff 	addiu	v0,v0,-1
				counter1++;
			}

			// Set A3 to HIGH
			LATBbits.LATB3 = 1;
9d002c20:	3c02bf88 	lui	v0,0xbf88
9d002c24:	94436060 	lhu	v1,24672(v0)
9d002c28:	24040001 	li	a0,1
9d002c2c:	7c8318c4 	ins	v1,a0,0x3,0x1
9d002c30:	a4436060 	sh	v1,24672(v0)

9d002c34 <.LBE5>:
		}


		// Increment current ExSync signal
		CurrentExSync_Side++;
9d002c34:	8f828020 	lw	v0,-32736(gp)
9d002c38:	24420001 	addiu	v0,v0,1
9d002c3c:	af828020 	sw	v0,-32736(gp)
	}

	// Clear interrupt flag
	IFS0bits.T2IF = 0;
9d002c40:	3c02bf88 	lui	v0,0xbf88
9d002c44:	8c431030 	lw	v1,4144(v0)
9d002c48:	7c034204 	ins	v1,zero,0x8,0x1
9d002c4c:	ac431030 	sw	v1,4144(v0)
}
9d002c50:	8fa20014 	lw	v0,20(sp)
9d002c54:	00400013 	mtlo	v0
9d002c58:	8fa30010 	lw	v1,16(sp)
9d002c5c:	00600011 	mthi	v1
9d002c60:	8fa4000c 	lw	a0,12(sp)
9d002c64:	8fa30008 	lw	v1,8(sp)
9d002c68:	8fa20004 	lw	v0,4(sp)
9d002c6c:	41606000 	di
9d002c70:	000000c0 	ehb
9d002c74:	8fba0024 	lw	k0,36(sp)
9d002c78:	8fbb0020 	lw	k1,32(sp)
9d002c7c:	409a7000 	mtc0	k0,c0_epc
9d002c80:	8fba001c 	lw	k0,28(sp)
9d002c84:	27bd0028 	addiu	sp,sp,40
9d002c88:	409a6002 	mtc0	k0,c0_srsctl
9d002c8c:	41dde800 	wrpgpr	sp,sp
9d002c90:	409b6000 	mtc0	k1,c0_status
9d002c94:	42000018 	eret

9d002c98 <Ext2ISR>:


// ***********************************************************************************************
// If USER button has been pressed, create a droplet (not for video recording)
// ***********************************************************************************************
void __ISR(_EXTERNAL_2_VECTOR, IPL2SOFT) Ext2ISR(void) { // step 1: the ISR
9d002c98:	415de800 	rdpgpr	sp,sp
9d002c9c:	401a7000 	mfc0	k0,c0_epc
9d002ca0:	401b6000 	mfc0	k1,c0_status
9d002ca4:	27bdff78 	addiu	sp,sp,-136
9d002ca8:	afba0084 	sw	k0,132(sp)
9d002cac:	401a6002 	mfc0	k0,c0_srsctl
9d002cb0:	afbb0080 	sw	k1,128(sp)
9d002cb4:	afba007c 	sw	k0,124(sp)
9d002cb8:	7c1b7844 	ins	k1,zero,0x1,0xf
9d002cbc:	377b0800 	ori	k1,k1,0x800
9d002cc0:	409b6000 	mtc0	k1,c0_status
9d002cc4:	afbf006c 	sw	ra,108(sp)
9d002cc8:	afb90068 	sw	t9,104(sp)
9d002ccc:	afb80064 	sw	t8,100(sp)
9d002cd0:	afaf0060 	sw	t7,96(sp)
9d002cd4:	afae005c 	sw	t6,92(sp)
9d002cd8:	afad0058 	sw	t5,88(sp)
9d002cdc:	afac0054 	sw	t4,84(sp)
9d002ce0:	afab0050 	sw	t3,80(sp)
9d002ce4:	afaa004c 	sw	t2,76(sp)
9d002ce8:	afa90048 	sw	t1,72(sp)
9d002cec:	afa80044 	sw	t0,68(sp)
9d002cf0:	afa70040 	sw	a3,64(sp)
9d002cf4:	afa6003c 	sw	a2,60(sp)
9d002cf8:	afa50038 	sw	a1,56(sp)
9d002cfc:	afa40034 	sw	a0,52(sp)
9d002d00:	afa30030 	sw	v1,48(sp)
9d002d04:	afa2002c 	sw	v0,44(sp)
9d002d08:	afa10028 	sw	at,40(sp)
9d002d0c:	00001012 	mflo	v0
9d002d10:	afa20074 	sw	v0,116(sp)
9d002d14:	00001810 	mfhi	v1
9d002d18:	afa30070 	sw	v1,112(sp)

	// Wait until USER button is released, then wait 5M core ticks before clearing interrupt flag
	while(!PORTDbits.RD7) {		// Pin D7 is the USER switch, low if pressed.
9d002d1c:	3c03bf88 	lui	v1,0xbf88
9d002d20:	8c6260d0 	lw	v0,24784(v1)
9d002d24:	30420080 	andi	v0,v0,0x80
9d002d28:	1040fffd 	beqz	v0,9d002d20 <Ext2ISR+0x88>
9d002d2c:	3c02004c 	lui	v0,0x4c
9d002d30:	24424b40 	addiu	v0,v0,19264
9d002d34:	2442ffff 	addiu	v0,v0,-1
		;
	}

	int counter=0;
	while(counter<5000000) {
9d002d38:	1440ffff 	bnez	v0,9d002d38 <Ext2ISR+0xa0>
9d002d3c:	2442ffff 	addiu	v0,v0,-1
		counter++;
	}
	
	//+Vcc: set L1 to LOW, L2 to HIGH, PWMA to >0
	OC1RS = 4000;
9d002d40:	24030fa0 	li	v1,4000
9d002d44:	3c02bf80 	lui	v0,0xbf80
9d002d48:	ac433020 	sw	v1,12320(v0)
	LATDbits.LATD2 = 0;
9d002d4c:	3c02bf88 	lui	v0,0xbf88
9d002d50:	944360e0 	lhu	v1,24800(v0)
9d002d54:	7c031084 	ins	v1,zero,0x2,0x1
9d002d58:	a44360e0 	sh	v1,24800(v0)
	LATDbits.LATD1 = 1;
9d002d5c:	944360e0 	lhu	v1,24800(v0)
9d002d60:	24040001 	li	a0,1
9d002d64:	7c830844 	ins	v1,a0,0x1,0x1
9d002d68:	a44360e0 	sh	v1,24800(v0)

	//Remain +Vcc for PULSETIME microseconds
	int counter3=0;
	while(counter3<(PULSETIME*40)) {
9d002d6c:	8f828010 	lw	v0,-32752(gp)
9d002d70:	000218c0 	sll	v1,v0,0x3
9d002d74:	00021140 	sll	v0,v0,0x5
9d002d78:	00621821 	addu	v1,v1,v0
9d002d7c:	18600004 	blez	v1,9d002d90 <Ext2ISR+0xf8>
9d002d80:	00001021 	move	v0,zero
		counter3++;
9d002d84:	24420001 	addiu	v0,v0,1
	LATDbits.LATD2 = 0;
	LATDbits.LATD1 = 1;

	//Remain +Vcc for PULSETIME microseconds
	int counter3=0;
	while(counter3<(PULSETIME*40)) {
9d002d88:	1443ffff 	bne	v0,v1,9d002d88 <Ext2ISR+0xf0>
9d002d8c:	24420001 	addiu	v0,v0,1
		counter3++;
	}

	//-Vcc: set L1 to HIGH, L2 to LOW, PWMA to >0
	OC1RS = 4000;
9d002d90:	24030fa0 	li	v1,4000
9d002d94:	3c02bf80 	lui	v0,0xbf80
9d002d98:	ac433020 	sw	v1,12320(v0)
	LATDbits.LATD2 = 1;
9d002d9c:	3c02bf88 	lui	v0,0xbf88
9d002da0:	944360e0 	lhu	v1,24800(v0)
9d002da4:	24040001 	li	a0,1
9d002da8:	7c831084 	ins	v1,a0,0x2,0x1
9d002dac:	a44360e0 	sh	v1,24800(v0)
	LATDbits.LATD1 = 0;
9d002db0:	944360e0 	lhu	v1,24800(v0)
9d002db4:	7c030844 	ins	v1,zero,0x1,0x1
9d002db8:	a44360e0 	sh	v1,24800(v0)

	// Increment drop counter
	drop_counter++;
9d002dbc:	8f82801c 	lw	v0,-32740(gp)
9d002dc0:	24420001 	addiu	v0,v0,1
9d002dc4:	af82801c 	sw	v0,-32740(gp)

	// Create message for LCD
	char message[MAX_MESSAGE_LENGTH];

	// Display properties on LCD
	LCD_Clear();
9d002dc8:	0f400e7f 	jal	9d0039fc <LCD_Clear>
9d002dcc:	00000000 	nop

9d002dd0 <.LVL38>:
	LCD_Move(0,0);
9d002dd0:	00002021 	move	a0,zero
9d002dd4:	0f400ebf 	jal	9d003afc <LCD_Move>
9d002dd8:	00002821 	move	a1,zero

9d002ddc <.LVL39>:
	sprintf(message, "Drops: %d", drop_counter);
9d002ddc:	8f86801c 	lw	a2,-32740(gp)
9d002de0:	27a40010 	addiu	a0,sp,16
9d002de4:	3c059d00 	lui	a1,0x9d00
9d002de8:	0f4012a8 	jal	9d004aa0 <_sprintf_cdnopuxX>
9d002dec:	24a54e18 	addiu	a1,a1,19992

9d002df0 <.LVL40>:
	LCD_WriteString(message);  
9d002df0:	0f400edb 	jal	9d003b6c <LCD_WriteString>
9d002df4:	27a40010 	addiu	a0,sp,16

9d002df8 <.LVL41>:
9d002df8:	3c02004c 	lui	v0,0x4c
9d002dfc:	24424b40 	addiu	v0,v0,19264
9d002e00:	2442ffff 	addiu	v0,v0,-1
	
	counter = 0;
	while (counter<5000000) {
9d002e04:	1440ffff 	bnez	v0,9d002e04 <.LVL41+0xc>
9d002e08:	2442ffff 	addiu	v0,v0,-1
		counter++;
	}

	// Clear interrupt flag
	IFS0bits.INT2IF = 0;
9d002e0c:	3c02bf88 	lui	v0,0xbf88
9d002e10:	8c431030 	lw	v1,4144(v0)
9d002e14:	7c035ac4 	ins	v1,zero,0xb,0x1
9d002e18:	ac431030 	sw	v1,4144(v0)
}
9d002e1c:	8fa20074 	lw	v0,116(sp)
9d002e20:	00400013 	mtlo	v0
9d002e24:	8fa30070 	lw	v1,112(sp)
9d002e28:	00600011 	mthi	v1
9d002e2c:	8fbf006c 	lw	ra,108(sp)
9d002e30:	8fb90068 	lw	t9,104(sp)
9d002e34:	8fb80064 	lw	t8,100(sp)
9d002e38:	8faf0060 	lw	t7,96(sp)
9d002e3c:	8fae005c 	lw	t6,92(sp)
9d002e40:	8fad0058 	lw	t5,88(sp)
9d002e44:	8fac0054 	lw	t4,84(sp)
9d002e48:	8fab0050 	lw	t3,80(sp)
9d002e4c:	8faa004c 	lw	t2,76(sp)
9d002e50:	8fa90048 	lw	t1,72(sp)
9d002e54:	8fa80044 	lw	t0,68(sp)
9d002e58:	8fa70040 	lw	a3,64(sp)
9d002e5c:	8fa6003c 	lw	a2,60(sp)
9d002e60:	8fa50038 	lw	a1,56(sp)
9d002e64:	8fa40034 	lw	a0,52(sp)
9d002e68:	8fa30030 	lw	v1,48(sp)
9d002e6c:	8fa2002c 	lw	v0,44(sp)
9d002e70:	8fa10028 	lw	at,40(sp)
9d002e74:	41606000 	di
9d002e78:	000000c0 	ehb
9d002e7c:	8fba0084 	lw	k0,132(sp)
9d002e80:	8fbb0080 	lw	k1,128(sp)
9d002e84:	409a7000 	mtc0	k0,c0_epc
9d002e88:	8fba007c 	lw	k0,124(sp)
9d002e8c:	27bd0088 	addiu	sp,sp,136
9d002e90:	409a6002 	mtc0	k0,c0_srsctl
9d002e94:	41dde800 	wrpgpr	sp,sp
9d002e98:	409b6000 	mtc0	k1,c0_status
9d002e9c:	42000018 	eret

9d002ea0 <main>:





int main(void) {
9d002ea0:	27bdffe8 	addiu	sp,sp,-24
9d002ea4:	afbf0014 	sw	ra,20(sp)

	// Cache on, min flash wait, interrupts on, LED/button init, UART init
	NU32_Startup();
9d002ea8:	0f400f49 	jal	9d003d24 <.LFE9>
9d002eac:	00000000 	nop

9d002eb0 <.LVL45>:

	// Setup LCD and create message to be sent
	LCD_Setup();
9d002eb0:	0f400f06 	jal	9d003c18 <LCD_Setup>
9d002eb4:	00000000 	nop

9d002eb8 <.LVL46>:


	// =============================================================================================
	// USER Button Interrupt
	// =============================================================================================
	__builtin_disable_interrupts(); 	// step 2: disable interrupts
9d002eb8:	41626000 	di	v0
9d002ebc:	000000c0 	ehb
	INTCONbits.INT2EP = 0;              // step 3: INT2 triggers on falling edge
9d002ec0:	3c02bf88 	lui	v0,0xbf88
9d002ec4:	8c431000 	lw	v1,4096(v0)
9d002ec8:	7c031084 	ins	v1,zero,0x2,0x1
9d002ecc:	ac431000 	sw	v1,4096(v0)
	IPC2bits.INT2IP = 2;           		// step 4: interrupt priority to 2
9d002ed0:	3c02bf88 	lui	v0,0xbf88
9d002ed4:	8c4310b0 	lw	v1,4272(v0)
9d002ed8:	24040002 	li	a0,2
9d002edc:	7c83e684 	ins	v1,a0,0x1a,0x3
9d002ee0:	ac4310b0 	sw	v1,4272(v0)
	IPC2bits.INT2IS = 1;               	// step 4: interrupt subpriority to 1
9d002ee4:	8c4310b0 	lw	v1,4272(v0)
9d002ee8:	24040001 	li	a0,1
9d002eec:	7c83ce04 	ins	v1,a0,0x18,0x2
9d002ef0:	ac4310b0 	sw	v1,4272(v0)
	IFS0bits.INT2IF = 0;           	 	// step 5: clear the int flag
9d002ef4:	3c02bf88 	lui	v0,0xbf88
9d002ef8:	8c431030 	lw	v1,4144(v0)
9d002efc:	7c035ac4 	ins	v1,zero,0xb,0x1
9d002f00:	ac431030 	sw	v1,4144(v0)
	IEC0bits.INT2IE = 1;              	// step 6: enable INT2 by setting IEC0<11>
9d002f04:	3c02bf88 	lui	v0,0xbf88
9d002f08:	8c431060 	lw	v1,4192(v0)
9d002f0c:	7c835ac4 	ins	v1,a0,0xb,0x1
9d002f10:	ac431060 	sw	v1,4192(v0)
	__builtin_enable_interrupts();  	// step 7: enable interrupts
9d002f14:	41626020 	ei	v0

	
	// =============================================================================================
	// PWM and digital output for piezoelectric droplet generator
	// =============================================================================================
	OC1CONbits.OCTSEL = 1;  			 			// Select Timer3 for comparison
9d002f18:	3c02bf80 	lui	v0,0xbf80
9d002f1c:	94443000 	lhu	a0,12288(v0)
9d002f20:	24030001 	li	v1,1
9d002f24:	7c6418c4 	ins	a0,v1,0x3,0x1
9d002f28:	a4443000 	sh	a0,12288(v0)

	T3CONbits.TCKPS = 0;     						// Timer3 prescaler N=1 (1:1)
9d002f2c:	3c04bf80 	lui	a0,0xbf80
9d002f30:	94850a00 	lhu	a1,2560(a0)
9d002f34:	7c053104 	ins	a1,zero,0x4,0x3
9d002f38:	a4850a00 	sh	a1,2560(a0)
	PR3 = 3999;              						// period = (PR3+1) * N * 12.5 ns = 20 kHz
9d002f3c:	24060f9f 	li	a2,3999
9d002f40:	3c05bf80 	lui	a1,0xbf80
9d002f44:	aca60a20 	sw	a2,2592(a1)
	TMR3 = 0;                						// initial TMR3 count is 0
9d002f48:	3c05bf80 	lui	a1,0xbf80
9d002f4c:	aca00a10 	sw	zero,2576(a1)

	OC1CONbits.OCM = 0b110; 						// PWM mode with no fault pin; other OC1CON bits are defaults
9d002f50:	94453000 	lhu	a1,12288(v0)
9d002f54:	24060006 	li	a2,6
9d002f58:	7cc51004 	ins	a1,a2,0x0,0x3
9d002f5c:	a4453000 	sh	a1,12288(v0)
	OC1RS = 0;           								// duty cycle = OC1RS/(PR3+1) = 75%
9d002f60:	3c05bf80 	lui	a1,0xbf80
9d002f64:	aca03020 	sw	zero,12320(a1)
	OC1R = 0;             							// initialize before turning OC1 on; afterward it is read-only
9d002f68:	3c06bf80 	lui	a2,0xbf80
9d002f6c:	acc03010 	sw	zero,12304(a2)

	T3CONbits.ON = 1;        						// turn on Timer3
9d002f70:	94860a00 	lhu	a2,2560(a0)
9d002f74:	7c667bc4 	ins	a2,v1,0xf,0x1
9d002f78:	a4860a00 	sh	a2,2560(a0)
	OC1CONbits.ON = 1;       						// turn on OC1
9d002f7c:	94443000 	lhu	a0,12288(v0)
9d002f80:	7c647bc4 	ins	a0,v1,0xf,0x1
9d002f84:	a4443000 	sh	a0,12288(v0)

	// Set D2/A2 to digital output pins
	TRISDbits.TRISD2 = 0;							// RA10 is an output pin
9d002f88:	3c02bf88 	lui	v0,0xbf88
9d002f8c:	944460c0 	lhu	a0,24768(v0)
9d002f90:	7c041084 	ins	a0,zero,0x2,0x1
9d002f94:	a44460c0 	sh	a0,24768(v0)
	TRISDbits.TRISD1 = 0;								// RA2 is an output pin
9d002f98:	944460c0 	lhu	a0,24768(v0)
9d002f9c:	7c040844 	ins	a0,zero,0x1,0x1
9d002fa0:	a44460c0 	sh	a0,24768(v0)
													
	//-Vcc: set L1 to HIGH, L2 to LOW, PWMA to >0
	OC1RS = 4000;
9d002fa4:	24020fa0 	li	v0,4000
9d002fa8:	aca23020 	sw	v0,12320(a1)
	LATDbits.LATD2 = 1;
9d002fac:	3c02bf88 	lui	v0,0xbf88
9d002fb0:	944460e0 	lhu	a0,24800(v0)
9d002fb4:	7c641084 	ins	a0,v1,0x2,0x1
9d002fb8:	a44460e0 	sh	a0,24800(v0)
	LATDbits.LATD1 = 0;
9d002fbc:	944360e0 	lhu	v1,24800(v0)
9d002fc0:	7c030844 	ins	v1,zero,0x1,0x1
9d002fc4:	a44360e0 	sh	v1,24800(v0)

9d002fc8 <.LBB6>:

	// =============================================================================================
	// Keep program running to look for command from master to start record procedure
	// =============================================================================================
	while(1) {
		NU32_LED2 = !NU32_LED2; // toggle LED1
9d002fc8:	3c05bf88 	lui	a1,0xbf88
9d002fcc:	3c06000f 	lui	a2,0xf
		int j;
		for (j = 0; j < 1000000; j++) { // number is 1 million
			while (!PORTDbits.RD7) {
9d002fd0:	3c03bf88 	lui	v1,0xbf88

	// =============================================================================================
	// Keep program running to look for command from master to start record procedure
	// =============================================================================================
	while(1) {
		NU32_LED2 = !NU32_LED2; // toggle LED1
9d002fd4:	8ca46160 	lw	a0,24928(a1)
9d002fd8:	38840002 	xori	a0,a0,0x2
9d002fdc:	7c840040 	ext	a0,a0,0x1,0x1
9d002fe0:	90a26160 	lbu	v0,24928(a1)
9d002fe4:	7c820844 	ins	v0,a0,0x1,0x1
9d002fe8:	a0a26160 	sb	v0,24928(a1)
9d002fec:	24c44240 	addiu	a0,a2,16960
		int j;
		for (j = 0; j < 1000000; j++) { // number is 1 million
			while (!PORTDbits.RD7) {
9d002ff0:	8c6260d0 	lw	v0,24784(v1)
9d002ff4:	30420080 	andi	v0,v0,0x80
9d002ff8:	1040fffd 	beqz	v0,9d002ff0 <.LBB6+0x28>
9d002ffc:	00000000 	nop
9d003000:	2484ffff 	addiu	a0,a0,-1
	// Keep program running to look for command from master to start record procedure
	// =============================================================================================
	while(1) {
		NU32_LED2 = !NU32_LED2; // toggle LED1
		int j;
		for (j = 0; j < 1000000; j++) { // number is 1 million
9d003004:	1480fffa 	bnez	a0,9d002ff0 <.LBB6+0x28>
9d003008:	00000000 	nop
9d00300c:	0b400bf5 	j	9d002fd4 <.LBB6+0xc>
9d003010:	00000000 	nop

9d003014 <__umoddi3>:
9d003014:	00c04021 	move	t0,a2
9d003018:	00804821 	move	t1,a0
9d00301c:	14e0003b 	bnez	a3,9d00310c <.LBE15+0xc>
9d003020:	00a01821 	move	v1,a1
9d003024:	00a6102b 	sltu	v0,a1,a2
9d003028:	10400048 	beqz	v0,9d00314c <.LBE16+0x8>
9d00302c:	70c21020 	clz	v0,a2
9d003030:	50400008 	beqzl	v0,9d003054 <.LBB15+0x4>
9d003034:	00083402 	srl	a2,t0,0x10
9d003038:	00021823 	negu	v1,v0
9d00303c:	00452804 	sllv	a1,a1,v0
9d003040:	00641806 	srlv	v1,a0,v1
9d003044:	00464004 	sllv	t0,a2,v0
9d003048:	00651825 	or	v1,v1,a1
9d00304c:	00444804 	sllv	t1,a0,v0

9d003050 <.LBB15>:
9d003050:	00083402 	srl	a2,t0,0x10
9d003054:	0066001b 	divu	zero,v1,a2
9d003058:	00c001f4 	teq	a2,zero,0x7
9d00305c:	00002010 	mfhi	a0
9d003060:	00005812 	mflo	t3
9d003064:	310cffff 	andi	t4,t0,0xffff
9d003068:	00095402 	srl	t2,t1,0x10
9d00306c:	716c5802 	mul	t3,t3,t4
9d003070:	00042400 	sll	a0,a0,0x10
9d003074:	008a5025 	or	t2,a0,t2
9d003078:	014b682b 	sltu	t5,t2,t3
9d00307c:	0066001b 	divu	zero,v1,a2
9d003080:	00c001f4 	teq	a2,zero,0x7
9d003084:	51a00009 	beqzl	t5,9d0030ac <.LBB15+0x5c>
9d003088:	014b5023 	subu	t2,t2,t3
9d00308c:	01485021 	addu	t2,t2,t0
9d003090:	0148182b 	sltu	v1,t2,t0
9d003094:	54600005 	bnezl	v1,9d0030ac <.LBB15+0x5c>
9d003098:	014b5023 	subu	t2,t2,t3
9d00309c:	014b202b 	sltu	a0,t2,t3
9d0030a0:	01481821 	addu	v1,t2,t0
9d0030a4:	0064500b 	movn	t2,v1,a0
9d0030a8:	014b5023 	subu	t2,t2,t3
9d0030ac:	3123ffff 	andi	v1,t1,0xffff
9d0030b0:	0146001b 	divu	zero,t2,a2
9d0030b4:	00c001f4 	teq	a2,zero,0x7
9d0030b8:	00004810 	mfhi	t1
9d0030bc:	00002012 	mflo	a0
9d0030c0:	708c2002 	mul	a0,a0,t4
9d0030c4:	00094c00 	sll	t1,t1,0x10
9d0030c8:	01234825 	or	t1,t1,v1
9d0030cc:	0124182b 	sltu	v1,t1,a0
9d0030d0:	0146001b 	divu	zero,t2,a2
9d0030d4:	00c001f4 	teq	a2,zero,0x7
9d0030d8:	50600009 	beqzl	v1,9d003100 <.LBE15>
9d0030dc:	01244823 	subu	t1,t1,a0
9d0030e0:	01284821 	addu	t1,t1,t0
9d0030e4:	0128182b 	sltu	v1,t1,t0
9d0030e8:	54600005 	bnezl	v1,9d003100 <.LBE15>
9d0030ec:	01244823 	subu	t1,t1,a0
9d0030f0:	0124182b 	sltu	v1,t1,a0
9d0030f4:	01284021 	addu	t0,t1,t0
9d0030f8:	0103480b 	movn	t1,t0,v1
9d0030fc:	01244823 	subu	t1,t1,a0

9d003100 <.LBE15>:
9d003100:	00491006 	srlv	v0,t1,v0
9d003104:	03e00008 	jr	ra
9d003108:	00001821 	move	v1,zero
9d00310c:	00a7102b 	sltu	v0,a1,a3
9d003110:	14400047 	bnez	v0,9d003230 <.LBE17+0xc>
9d003114:	70ea5020 	clz	t2,a3
9d003118:	15400048 	bnez	t2,9d00323c <.LBE17+0x18>
9d00311c:	240b0020 	li	t3,32
9d003120:	00e5102b 	sltu	v0,a3,a1
9d003124:	14400005 	bnez	v0,9d00313c <.LBB16+0x4>
9d003128:	00861023 	subu	v0,a0,a2
9d00312c:	0086402b 	sltu	t0,a0,a2
9d003130:	15000089 	bnez	t0,9d003358 <.LBE24+0x10>
9d003134:	00801021 	move	v0,a0

9d003138 <.LBB16>:
9d003138:	00861023 	subu	v0,a0,a2
9d00313c:	00a72823 	subu	a1,a1,a3
9d003140:	0082202b 	sltu	a0,a0,v0

9d003144 <.LBE16>:
9d003144:	03e00008 	jr	ra
9d003148:	00a41823 	subu	v1,a1,a0
9d00314c:	14c00006 	bnez	a2,9d003168 <.LBE16+0x24>
9d003150:	71021020 	clz	v0,t0
9d003154:	24020001 	li	v0,1
9d003158:	0046001b 	divu	zero,v0,a2
9d00315c:	00c001f4 	teq	a2,zero,0x7
9d003160:	00004012 	mflo	t0
9d003164:	71021020 	clz	v0,t0
9d003168:	5440007d 	bnezl	v0,9d003360 <.LBE24+0x18>
9d00316c:	00484004 	sllv	t0,t0,v0
9d003170:	00a82823 	subu	a1,a1,t0
9d003174:	00081c02 	srl	v1,t0,0x10
9d003178:	3107ffff 	andi	a3,t0,0xffff

9d00317c <.LBB17>:
9d00317c:	00092402 	srl	a0,t1,0x10
9d003180:	00a3001b 	divu	zero,a1,v1
9d003184:	006001f4 	teq	v1,zero,0x7
9d003188:	00005010 	mfhi	t2
9d00318c:	00003012 	mflo	a2
9d003190:	70c73002 	mul	a2,a2,a3
9d003194:	000a5400 	sll	t2,t2,0x10
9d003198:	01442025 	or	a0,t2,a0
9d00319c:	0086502b 	sltu	t2,a0,a2
9d0031a0:	00a3001b 	divu	zero,a1,v1
9d0031a4:	006001f4 	teq	v1,zero,0x7
9d0031a8:	51400009 	beqzl	t2,9d0031d0 <.LBB17+0x54>
9d0031ac:	00862023 	subu	a0,a0,a2
9d0031b0:	00882021 	addu	a0,a0,t0
9d0031b4:	0088282b 	sltu	a1,a0,t0
9d0031b8:	54a00005 	bnezl	a1,9d0031d0 <.LBB17+0x54>
9d0031bc:	00862023 	subu	a0,a0,a2
9d0031c0:	0086502b 	sltu	t2,a0,a2
9d0031c4:	00882821 	addu	a1,a0,t0
9d0031c8:	00aa200b 	movn	a0,a1,t2
9d0031cc:	00862023 	subu	a0,a0,a2
9d0031d0:	3126ffff 	andi	a2,t1,0xffff
9d0031d4:	0083001b 	divu	zero,a0,v1
9d0031d8:	006001f4 	teq	v1,zero,0x7
9d0031dc:	00004810 	mfhi	t1
9d0031e0:	00002812 	mflo	a1
9d0031e4:	70a72802 	mul	a1,a1,a3
9d0031e8:	00094c00 	sll	t1,t1,0x10
9d0031ec:	01264825 	or	t1,t1,a2
9d0031f0:	0125302b 	sltu	a2,t1,a1
9d0031f4:	0083001b 	divu	zero,a0,v1
9d0031f8:	006001f4 	teq	v1,zero,0x7
9d0031fc:	50c00009 	beqzl	a2,9d003224 <.LBE17>
9d003200:	01254823 	subu	t1,t1,a1
9d003204:	01284821 	addu	t1,t1,t0
9d003208:	0128182b 	sltu	v1,t1,t0
9d00320c:	54600005 	bnezl	v1,9d003224 <.LBE17>
9d003210:	01254823 	subu	t1,t1,a1
9d003214:	0125182b 	sltu	v1,t1,a1
9d003218:	01284021 	addu	t0,t1,t0
9d00321c:	0103480b 	movn	t1,t0,v1
9d003220:	01254823 	subu	t1,t1,a1

9d003224 <.LBE17>:
9d003224:	00491006 	srlv	v0,t1,v0
9d003228:	03e00008 	jr	ra
9d00322c:	00001821 	move	v1,zero
9d003230:	00801021 	move	v0,a0
9d003234:	03e00008 	jr	ra
9d003238:	00a01821 	move	v1,a1
9d00323c:	016a5823 	subu	t3,t3,t2
9d003240:	01473804 	sllv	a3,a3,t2
9d003244:	01661006 	srlv	v0,a2,t3
9d003248:	00473825 	or	a3,v0,a3
9d00324c:	01656806 	srlv	t5,a1,t3
9d003250:	00074c02 	srl	t1,a3,0x10
9d003254:	01a9001b 	divu	zero,t5,t1
9d003258:	012001f4 	teq	t1,zero,0x7
9d00325c:	00006010 	mfhi	t4
9d003260:	00001812 	mflo	v1
9d003264:	30eeffff 	andi	t6,a3,0xffff
9d003268:	01452804 	sllv	a1,a1,t2
9d00326c:	01641006 	srlv	v0,a0,t3
9d003270:	00451025 	or	v0,v0,a1
9d003274:	00022c02 	srl	a1,v0,0x10
9d003278:	01463004 	sllv	a2,a2,t2
9d00327c:	00004012 	mflo	t0
9d003280:	706e7802 	mul	t7,v1,t6
9d003284:	000c6400 	sll	t4,t4,0x10
9d003288:	01856025 	or	t4,t4,a1
9d00328c:	018f282b 	sltu	a1,t4,t7
9d003290:	01a9001b 	divu	zero,t5,t1
9d003294:	012001f4 	teq	t1,zero,0x7
9d003298:	10a0000a 	beqz	a1,9d0032c4 <.LBE17+0xa0>
9d00329c:	01442004 	sllv	a0,a0,t2
9d0032a0:	01876021 	addu	t4,t4,a3
9d0032a4:	0187282b 	sltu	a1,t4,a3
9d0032a8:	14a00006 	bnez	a1,9d0032c4 <.LBE17+0xa0>
9d0032ac:	2468ffff 	addiu	t0,v1,-1
9d0032b0:	018f282b 	sltu	a1,t4,t7
9d0032b4:	50a00004 	beqzl	a1,9d0032c8 <.LBE17+0xa4>
9d0032b8:	018f6023 	subu	t4,t4,t7
9d0032bc:	2468fffe 	addiu	t0,v1,-2
9d0032c0:	01876021 	addu	t4,t4,a3
9d0032c4:	018f6023 	subu	t4,t4,t7
9d0032c8:	3042ffff 	andi	v0,v0,0xffff
9d0032cc:	0189001b 	divu	zero,t4,t1
9d0032d0:	012001f4 	teq	t1,zero,0x7
9d0032d4:	00002810 	mfhi	a1
9d0032d8:	00001812 	mflo	v1
9d0032dc:	00006812 	mflo	t5
9d0032e0:	706e7002 	mul	t6,v1,t6
9d0032e4:	00052c00 	sll	a1,a1,0x10
9d0032e8:	00a21025 	or	v0,a1,v0
9d0032ec:	004e282b 	sltu	a1,v0,t6
9d0032f0:	0189001b 	divu	zero,t4,t1
9d0032f4:	012001f4 	teq	t1,zero,0x7
9d0032f8:	50a00006 	beqzl	a1,9d003314 <.LBE17+0xf0>
9d0032fc:	00084400 	sll	t0,t0,0x10
9d003300:	00471021 	addu	v0,v0,a3
9d003304:	0047282b 	sltu	a1,v0,a3
9d003308:	10a0004c 	beqz	a1,9d00343c <.LBE25>
9d00330c:	246dffff 	addiu	t5,v1,-1
9d003310:	00084400 	sll	t0,t0,0x10
9d003314:	01a84025 	or	t0,t5,t0
9d003318:	004e1023 	subu	v0,v0,t6
9d00331c:	01060019 	multu	t0,a2
9d003320:	00004810 	mfhi	t1
9d003324:	0049182b 	sltu	v1,v0,t1
9d003328:	1460003e 	bnez	v1,9d003424 <.LBB25>
9d00332c:	00004012 	mflo	t0
9d003330:	1049004b 	beq	v0,t1,9d003460 <.LBE25+0x24>
9d003334:	00491823 	subu	v1,v0,t1
9d003338:	00003012 	mflo	a2

9d00333c <.LBB24>:
9d00333c:	00863023 	subu	a2,a0,a2
9d003340:	0086202b 	sltu	a0,a0,a2
9d003344:	00641823 	subu	v1,v1,a0

9d003348 <.LBE24>:
9d003348:	01631004 	sllv	v0,v1,t3
9d00334c:	01463006 	srlv	a2,a2,t2
9d003350:	00461025 	or	v0,v0,a2
9d003354:	01431806 	srlv	v1,v1,t2
9d003358:	03e00008 	jr	ra
9d00335c:	00000000 	nop
9d003360:	24090020 	li	t1,32
9d003364:	01224823 	subu	t1,t1,v0
9d003368:	01255006 	srlv	t2,a1,t1
9d00336c:	00081c02 	srl	v1,t0,0x10
9d003370:	0143001b 	divu	zero,t2,v1
9d003374:	006001f4 	teq	v1,zero,0x7
9d003378:	00003010 	mfhi	a2
9d00337c:	00005812 	mflo	t3
9d003380:	3107ffff 	andi	a3,t0,0xffff
9d003384:	00452804 	sllv	a1,a1,v0
9d003388:	01244806 	srlv	t1,a0,t1
9d00338c:	01252825 	or	a1,t1,a1
9d003390:	00056402 	srl	t4,a1,0x10
9d003394:	00444804 	sllv	t1,a0,v0
9d003398:	71675802 	mul	t3,t3,a3
9d00339c:	00063400 	sll	a2,a2,0x10
9d0033a0:	01863025 	or	a2,t4,a2
9d0033a4:	00cb202b 	sltu	a0,a2,t3
9d0033a8:	0143001b 	divu	zero,t2,v1
9d0033ac:	006001f4 	teq	v1,zero,0x7
9d0033b0:	50800006 	beqzl	a0,9d0033cc <.LBE24+0x84>
9d0033b4:	00cb3023 	subu	a2,a2,t3
9d0033b8:	00c83021 	addu	a2,a2,t0
9d0033bc:	00c8202b 	sltu	a0,a2,t0
9d0033c0:	10800024 	beqz	a0,9d003454 <.LBE25+0x18>
9d0033c4:	00cb502b 	sltu	t2,a2,t3
9d0033c8:	00cb3023 	subu	a2,a2,t3
9d0033cc:	30aaffff 	andi	t2,a1,0xffff
9d0033d0:	00c3001b 	divu	zero,a2,v1
9d0033d4:	006001f4 	teq	v1,zero,0x7
9d0033d8:	00002010 	mfhi	a0
9d0033dc:	00002812 	mflo	a1
9d0033e0:	70a72802 	mul	a1,a1,a3
9d0033e4:	00042400 	sll	a0,a0,0x10
9d0033e8:	008a2025 	or	a0,a0,t2
9d0033ec:	0085502b 	sltu	t2,a0,a1
9d0033f0:	00c3001b 	divu	zero,a2,v1
9d0033f4:	006001f4 	teq	v1,zero,0x7
9d0033f8:	5140ff60 	beqzl	t2,9d00317c <.LBB17>
9d0033fc:	00852823 	subu	a1,a0,a1
9d003400:	00882021 	addu	a0,a0,t0
9d003404:	0088302b 	sltu	a2,a0,t0
9d003408:	54c0ff5c 	bnezl	a2,9d00317c <.LBB17>
9d00340c:	00852823 	subu	a1,a0,a1
9d003410:	0085502b 	sltu	t2,a0,a1
9d003414:	00883021 	addu	a2,a0,t0
9d003418:	00ca200b 	movn	a0,a2,t2
9d00341c:	0b400c5f 	j	9d00317c <.LBB17>
9d003420:	00852823 	subu	a1,a0,a1

9d003424 <.LBB25>:
9d003424:	01063023 	subu	a2,t0,a2
9d003428:	01271823 	subu	v1,t1,a3
9d00342c:	0106402b 	sltu	t0,t0,a2
9d003430:	00681823 	subu	v1,v1,t0
9d003434:	0b400ccf 	j	9d00333c <.LBB24>
9d003438:	00431823 	subu	v1,v0,v1

9d00343c <.LBE25>:
9d00343c:	004e282b 	sltu	a1,v0,t6
9d003440:	50a0ffb4 	beqzl	a1,9d003314 <.LBE17+0xf0>
9d003444:	00084400 	sll	t0,t0,0x10
9d003448:	246dfffe 	addiu	t5,v1,-2
9d00344c:	0b400cc4 	j	9d003310 <.LBE17+0xec>
9d003450:	00471021 	addu	v0,v0,a3
9d003454:	00c82021 	addu	a0,a2,t0
9d003458:	0b400cf2 	j	9d0033c8 <.LBE24+0x80>
9d00345c:	008a300b 	movn	a2,a0,t2
9d003460:	0088182b 	sltu	v1,a0,t0
9d003464:	5460fff0 	bnezl	v1,9d003428 <.LBB25+0x4>
9d003468:	01063023 	subu	a2,t0,a2
9d00346c:	00003012 	mflo	a2
9d003470:	0b400ccf 	j	9d00333c <.LBB24>
9d003474:	00001821 	move	v1,zero

Disassembly of section .text:

9d003478 <__udivdi3>:
9d003478:	00c04021 	move	t0,a2
9d00347c:	00801021 	move	v0,a0
9d003480:	14e0003f 	bnez	a3,9d003580 <.LBE15+0x8>
9d003484:	00a04821 	move	t1,a1
9d003488:	00a6182b 	sltu	v1,a1,a2
9d00348c:	10600047 	beqz	v1,9d0035ac <.LBE15+0x34>
9d003490:	70c31820 	clz	v1,a2
9d003494:	50600008 	beqzl	v1,9d0034b8 <.LBB15+0x4>
9d003498:	00081c02 	srl	v1,t0,0x10
9d00349c:	00034823 	negu	t1,v1
9d0034a0:	00652804 	sllv	a1,a1,v1
9d0034a4:	01244806 	srlv	t1,a0,t1
9d0034a8:	00664004 	sllv	t0,a2,v1
9d0034ac:	01254825 	or	t1,t1,a1
9d0034b0:	00641004 	sllv	v0,a0,v1

9d0034b4 <.LBB15>:
9d0034b4:	00081c02 	srl	v1,t0,0x10
9d0034b8:	0123001b 	divu	zero,t1,v1
9d0034bc:	006001f4 	teq	v1,zero,0x7
9d0034c0:	00006010 	mfhi	t4
9d0034c4:	00005812 	mflo	t3
9d0034c8:	310affff 	andi	t2,t0,0xffff
9d0034cc:	00022402 	srl	a0,v0,0x10
9d0034d0:	00003012 	mflo	a2
9d0034d4:	716a3802 	mul	a3,t3,t2
9d0034d8:	000c6400 	sll	t4,t4,0x10
9d0034dc:	01842025 	or	a0,t4,a0
9d0034e0:	0087602b 	sltu	t4,a0,a3
9d0034e4:	0123001b 	divu	zero,t1,v1
9d0034e8:	006001f4 	teq	v1,zero,0x7
9d0034ec:	1180000b 	beqz	t4,9d00351c <.LBB15+0x68>
9d0034f0:	00872823 	subu	a1,a0,a3
9d0034f4:	00882021 	addu	a0,a0,t0
9d0034f8:	0088282b 	sltu	a1,a0,t0
9d0034fc:	14a00006 	bnez	a1,9d003518 <.LBB15+0x64>
9d003500:	2566ffff 	addiu	a2,t3,-1
9d003504:	0087282b 	sltu	a1,a0,a3
9d003508:	10a00004 	beqz	a1,9d00351c <.LBB15+0x68>
9d00350c:	00872823 	subu	a1,a0,a3
9d003510:	2566fffe 	addiu	a2,t3,-2
9d003514:	00882021 	addu	a0,a0,t0
9d003518:	00872823 	subu	a1,a0,a3
9d00351c:	3042ffff 	andi	v0,v0,0xffff
9d003520:	00a3001b 	divu	zero,a1,v1
9d003524:	006001f4 	teq	v1,zero,0x7
9d003528:	00004810 	mfhi	t1
9d00352c:	00003812 	mflo	a3
9d003530:	00002012 	mflo	a0
9d003534:	70ea5002 	mul	t2,a3,t2
9d003538:	00094c00 	sll	t1,t1,0x10
9d00353c:	01221025 	or	v0,t1,v0
9d003540:	004a482b 	sltu	t1,v0,t2
9d003544:	00a3001b 	divu	zero,a1,v1
9d003548:	006001f4 	teq	v1,zero,0x7
9d00354c:	51200009 	beqzl	t1,9d003574 <.LBB15+0xc0>
9d003550:	00061400 	sll	v0,a2,0x10
9d003554:	00481021 	addu	v0,v0,t0
9d003558:	0048402b 	sltu	t0,v0,t0
9d00355c:	15000004 	bnez	t0,9d003570 <.LBB15+0xbc>
9d003560:	24e4ffff 	addiu	a0,a3,-1
9d003564:	004a502b 	sltu	t2,v0,t2
9d003568:	24e7fffe 	addiu	a3,a3,-2
9d00356c:	00ea200b 	movn	a0,a3,t2
9d003570:	00061400 	sll	v0,a2,0x10
9d003574:	00821025 	or	v0,a0,v0

9d003578 <.LBE15>:
9d003578:	03e00008 	jr	ra
9d00357c:	00001821 	move	v1,zero
9d003580:	00a7102b 	sltu	v0,a1,a3
9d003584:	14400044 	bnez	v0,9d003698 <.LBE16+0x8>
9d003588:	70e84020 	clz	t0,a3
9d00358c:	55000045 	bnezl	t0,9d0036a4 <.LBE16+0x14>
9d003590:	24020020 	li	v0,32
9d003594:	00e5282b 	sltu	a1,a3,a1
9d003598:	14a000c8 	bnez	a1,9d0038bc <.LBE20+0x120>
9d00359c:	0086302b 	sltu	a2,a0,a2
9d0035a0:	38c20001 	xori	v0,a2,0x1
9d0035a4:	03e00008 	jr	ra
9d0035a8:	00001821 	move	v1,zero
9d0035ac:	14c00006 	bnez	a2,9d0035c8 <.LBE15+0x50>
9d0035b0:	71031820 	clz	v1,t0
9d0035b4:	24030001 	li	v1,1
9d0035b8:	0066001b 	divu	zero,v1,a2
9d0035bc:	00c001f4 	teq	a2,zero,0x7
9d0035c0:	00004012 	mflo	t0
9d0035c4:	71031820 	clz	v1,t0
9d0035c8:	5460007b 	bnezl	v1,9d0037b8 <.LBE20+0x1c>
9d0035cc:	00684004 	sllv	t0,t0,v1
9d0035d0:	00a82023 	subu	a0,a1,t0
9d0035d4:	00083c02 	srl	a3,t0,0x10
9d0035d8:	310bffff 	andi	t3,t0,0xffff
9d0035dc:	24030001 	li	v1,1

9d0035e0 <.LBB16>:
9d0035e0:	00023402 	srl	a2,v0,0x10
9d0035e4:	0087001b 	divu	zero,a0,a3
9d0035e8:	00e001f4 	teq	a3,zero,0x7
9d0035ec:	00006810 	mfhi	t5
9d0035f0:	00006012 	mflo	t4
9d0035f4:	00004812 	mflo	t1
9d0035f8:	718b5002 	mul	t2,t4,t3
9d0035fc:	000d6c00 	sll	t5,t5,0x10
9d003600:	01a63025 	or	a2,t5,a2
9d003604:	00ca682b 	sltu	t5,a2,t2
9d003608:	0087001b 	divu	zero,a0,a3
9d00360c:	00e001f4 	teq	a3,zero,0x7
9d003610:	11a00009 	beqz	t5,9d003638 <.LBB16+0x58>
9d003614:	00ca2823 	subu	a1,a2,t2
9d003618:	00c83021 	addu	a2,a2,t0
9d00361c:	00c8202b 	sltu	a0,a2,t0
9d003620:	14800004 	bnez	a0,9d003634 <.LBB16+0x54>
9d003624:	2589ffff 	addiu	t1,t4,-1
9d003628:	00ca202b 	sltu	a0,a2,t2
9d00362c:	548000a6 	bnezl	a0,9d0038c8 <.LBE20+0x12c>
9d003630:	2589fffe 	addiu	t1,t4,-2
9d003634:	00ca2823 	subu	a1,a2,t2
9d003638:	3042ffff 	andi	v0,v0,0xffff
9d00363c:	00a7001b 	divu	zero,a1,a3
9d003640:	00e001f4 	teq	a3,zero,0x7
9d003644:	00005010 	mfhi	t2
9d003648:	00003012 	mflo	a2
9d00364c:	00002012 	mflo	a0
9d003650:	70cb5802 	mul	t3,a2,t3
9d003654:	000a5400 	sll	t2,t2,0x10
9d003658:	01421025 	or	v0,t2,v0
9d00365c:	004b502b 	sltu	t2,v0,t3
9d003660:	00a7001b 	divu	zero,a1,a3
9d003664:	00e001f4 	teq	a3,zero,0x7
9d003668:	51400009 	beqzl	t2,9d003690 <.LBE16>
9d00366c:	00091400 	sll	v0,t1,0x10
9d003670:	00481021 	addu	v0,v0,t0
9d003674:	0048402b 	sltu	t0,v0,t0
9d003678:	15000004 	bnez	t0,9d00368c <.LBB16+0xac>
9d00367c:	24c4ffff 	addiu	a0,a2,-1
9d003680:	004b582b 	sltu	t3,v0,t3
9d003684:	24c6fffe 	addiu	a2,a2,-2
9d003688:	00cb200b 	movn	a0,a2,t3
9d00368c:	00091400 	sll	v0,t1,0x10

9d003690 <.LBE16>:
9d003690:	03e00008 	jr	ra
9d003694:	00821025 	or	v0,a0,v0
9d003698:	00001821 	move	v1,zero
9d00369c:	03e00008 	jr	ra
9d0036a0:	00001021 	move	v0,zero
9d0036a4:	00481023 	subu	v0,v0,t0
9d0036a8:	01073804 	sllv	a3,a3,t0
9d0036ac:	00461806 	srlv	v1,a2,v0
9d0036b0:	00673825 	or	a3,v1,a3
9d0036b4:	00455006 	srlv	t2,a1,v0
9d0036b8:	00071c02 	srl	v1,a3,0x10
9d0036bc:	0143001b 	divu	zero,t2,v1
9d0036c0:	006001f4 	teq	v1,zero,0x7
9d0036c4:	00004810 	mfhi	t1
9d0036c8:	00006812 	mflo	t5
9d0036cc:	30ebffff 	andi	t3,a3,0xffff
9d0036d0:	01052804 	sllv	a1,a1,t0
9d0036d4:	00441006 	srlv	v0,a0,v0
9d0036d8:	00452825 	or	a1,v0,a1
9d0036dc:	00057402 	srl	t6,a1,0x10
9d0036e0:	00001012 	mflo	v0
9d0036e4:	71ab6002 	mul	t4,t5,t3
9d0036e8:	00094c00 	sll	t1,t1,0x10
9d0036ec:	012e4825 	or	t1,t1,t6
9d0036f0:	012c702b 	sltu	t6,t1,t4
9d0036f4:	0143001b 	divu	zero,t2,v1
9d0036f8:	006001f4 	teq	v1,zero,0x7
9d0036fc:	11c0000a 	beqz	t6,9d003728 <.LBE16+0x98>
9d003700:	01063004 	sllv	a2,a2,t0
9d003704:	01274821 	addu	t1,t1,a3
9d003708:	0127502b 	sltu	t2,t1,a3
9d00370c:	15400006 	bnez	t2,9d003728 <.LBE16+0x98>
9d003710:	25a2ffff 	addiu	v0,t5,-1
9d003714:	012c502b 	sltu	t2,t1,t4
9d003718:	51400004 	beqzl	t2,9d00372c <.LBE16+0x9c>
9d00371c:	012c4823 	subu	t1,t1,t4
9d003720:	25a2fffe 	addiu	v0,t5,-2
9d003724:	01274821 	addu	t1,t1,a3
9d003728:	012c4823 	subu	t1,t1,t4
9d00372c:	30a5ffff 	andi	a1,a1,0xffff
9d003730:	0123001b 	divu	zero,t1,v1
9d003734:	006001f4 	teq	v1,zero,0x7
9d003738:	00006810 	mfhi	t5
9d00373c:	00006012 	mflo	t4
9d003740:	00005012 	mflo	t2
9d003744:	718b5802 	mul	t3,t4,t3
9d003748:	000d6c00 	sll	t5,t5,0x10
9d00374c:	01a52825 	or	a1,t5,a1
9d003750:	00ab682b 	sltu	t5,a1,t3
9d003754:	0123001b 	divu	zero,t1,v1
9d003758:	006001f4 	teq	v1,zero,0x7
9d00375c:	51a0000b 	beqzl	t5,9d00378c <.LBE16+0xfc>
9d003760:	00021400 	sll	v0,v0,0x10
9d003764:	00a72821 	addu	a1,a1,a3
9d003768:	00a7182b 	sltu	v1,a1,a3
9d00376c:	14600006 	bnez	v1,9d003788 <.LBE16+0xf8>
9d003770:	258affff 	addiu	t2,t4,-1
9d003774:	00ab182b 	sltu	v1,a1,t3
9d003778:	50600004 	beqzl	v1,9d00378c <.LBE16+0xfc>
9d00377c:	00021400 	sll	v0,v0,0x10
9d003780:	258afffe 	addiu	t2,t4,-2
9d003784:	00a72821 	addu	a1,a1,a3
9d003788:	00021400 	sll	v0,v0,0x10
9d00378c:	01421025 	or	v0,t2,v0
9d003790:	00ab2823 	subu	a1,a1,t3

9d003794 <.LBB20>:
9d003794:	00460019 	multu	v0,a2
9d003798:	00003810 	mfhi	a3

9d00379c <.LBE20>:
9d00379c:	00a7182b 	sltu	v1,a1,a3
9d0037a0:	14600044 	bnez	v1,9d0038b4 <.LBE20+0x118>
9d0037a4:	00003012 	mflo	a2
9d0037a8:	10a7003f 	beq	a1,a3,9d0038a8 <.LBE20+0x10c>
9d0037ac:	01042004 	sllv	a0,a0,t0
9d0037b0:	03e00008 	jr	ra
9d0037b4:	00001821 	move	v1,zero
9d0037b8:	24020020 	li	v0,32
9d0037bc:	00431023 	subu	v0,v0,v1
9d0037c0:	00454806 	srlv	t1,a1,v0
9d0037c4:	00083c02 	srl	a3,t0,0x10
9d0037c8:	0127001b 	divu	zero,t1,a3
9d0037cc:	00e001f4 	teq	a3,zero,0x7
9d0037d0:	00003010 	mfhi	a2
9d0037d4:	00006012 	mflo	t4
9d0037d8:	310bffff 	andi	t3,t0,0xffff
9d0037dc:	00652804 	sllv	a1,a1,v1
9d0037e0:	00441006 	srlv	v0,a0,v0
9d0037e4:	00452825 	or	a1,v0,a1
9d0037e8:	00056c02 	srl	t5,a1,0x10
9d0037ec:	00641004 	sllv	v0,a0,v1
9d0037f0:	00001812 	mflo	v1
9d0037f4:	718b5002 	mul	t2,t4,t3
9d0037f8:	00063400 	sll	a2,a2,0x10
9d0037fc:	01a63025 	or	a2,t5,a2
9d003800:	00ca202b 	sltu	a0,a2,t2
9d003804:	0127001b 	divu	zero,t1,a3
9d003808:	00e001f4 	teq	a3,zero,0x7
9d00380c:	5080000b 	beqzl	a0,9d00383c <.LBE20+0xa0>
9d003810:	00ca3023 	subu	a2,a2,t2
9d003814:	00c83021 	addu	a2,a2,t0
9d003818:	00c8202b 	sltu	a0,a2,t0
9d00381c:	14800006 	bnez	a0,9d003838 <.LBE20+0x9c>
9d003820:	2583ffff 	addiu	v1,t4,-1
9d003824:	00ca202b 	sltu	a0,a2,t2
9d003828:	50800004 	beqzl	a0,9d00383c <.LBE20+0xa0>
9d00382c:	00ca3023 	subu	a2,a2,t2
9d003830:	2583fffe 	addiu	v1,t4,-2
9d003834:	00c83021 	addu	a2,a2,t0
9d003838:	00ca3023 	subu	a2,a2,t2
9d00383c:	30acffff 	andi	t4,a1,0xffff
9d003840:	00c7001b 	divu	zero,a2,a3
9d003844:	00e001f4 	teq	a3,zero,0x7
9d003848:	00002010 	mfhi	a0
9d00384c:	00005012 	mflo	t2
9d003850:	00004812 	mflo	t1
9d003854:	714b2802 	mul	a1,t2,t3
9d003858:	00042400 	sll	a0,a0,0x10
9d00385c:	008c2025 	or	a0,a0,t4
9d003860:	0085602b 	sltu	t4,a0,a1
9d003864:	00c7001b 	divu	zero,a2,a3
9d003868:	00e001f4 	teq	a3,zero,0x7
9d00386c:	5180000b 	beqzl	t4,9d00389c <.LBE20+0x100>
9d003870:	00031c00 	sll	v1,v1,0x10
9d003874:	00882021 	addu	a0,a0,t0
9d003878:	0088302b 	sltu	a2,a0,t0
9d00387c:	14c00006 	bnez	a2,9d003898 <.LBE20+0xfc>
9d003880:	2549ffff 	addiu	t1,t2,-1
9d003884:	0085302b 	sltu	a2,a0,a1
9d003888:	50c00004 	beqzl	a2,9d00389c <.LBE20+0x100>
9d00388c:	00031c00 	sll	v1,v1,0x10
9d003890:	2549fffe 	addiu	t1,t2,-2
9d003894:	00882021 	addu	a0,a0,t0
9d003898:	00031c00 	sll	v1,v1,0x10
9d00389c:	00852023 	subu	a0,a0,a1
9d0038a0:	0b400d78 	j	9d0035e0 <.LBB16>
9d0038a4:	01231825 	or	v1,t1,v1
9d0038a8:	0086302b 	sltu	a2,a0,a2
9d0038ac:	10c0ffc0 	beqz	a2,9d0037b0 <.LBE20+0x14>
9d0038b0:	00000000 	nop
9d0038b4:	0b400dec 	j	9d0037b0 <.LBE20+0x14>
9d0038b8:	2442ffff 	addiu	v0,v0,-1
9d0038bc:	00001821 	move	v1,zero
9d0038c0:	03e00008 	jr	ra
9d0038c4:	24020001 	li	v0,1
9d0038c8:	0b400d8d 	j	9d003634 <.LBB16+0x54>
9d0038cc:	00c83021 	addu	a2,a2,t0

9d0038d0 <waitPMP>:

// wait for the peripheral master port (PMP) to be ready
// should be called before every read and write operation
static void waitPMP(void)
{
  while(PMMODEbits.BUSY) { ; }
9d0038d0:	3c03bf80 	lui	v1,0xbf80
9d0038d4:	8c627010 	lw	v0,28688(v1)
9d0038d8:	30428000 	andi	v0,v0,0x8000
9d0038dc:	1440fffd 	bnez	v0,9d0038d4 <waitPMP+0x4>
9d0038e0:	00000000 	nop
}
9d0038e4:	03e00008 	jr	ra
9d0038e8:	00000000 	nop

9d0038ec <LCD_Read>:
  PMDIN = data;        // send the data
}

// read data from the LCD.  
// rs : the value of the RS signal 0 for instructions status, 1 for data
unsigned char LCD_Read(int rs) {
9d0038ec:	27bdffe0 	addiu	sp,sp,-32
9d0038f0:	afbf001c 	sw	ra,28(sp)
9d0038f4:	afb00018 	sw	s0,24(sp)
  volatile unsigned char val = 0; // volatile so 1st read doesn't get optimized away
9d0038f8:	a3a00010 	sb	zero,16(sp)
  if(rs) { // 1 to read data
9d0038fc:	10800005 	beqz	a0,9d003914 <LCD_Read+0x28>
9d003900:	24030400 	li	v1,1024
    PMADDRSET = 1 << PMABIT;
9d003904:	3c02bf80 	lui	v0,0xbf80
9d003908:	ac437028 	sw	v1,28712(v0)
9d00390c:	0b400e47 	j	9d00391c <LCD_Read+0x30>
9d003910:	00000000 	nop
  } else { // 0 to read command status
    PMADDRCLR = 1 << PMABIT;
9d003914:	3c02bf80 	lui	v0,0xbf80
9d003918:	ac437024 	sw	v1,28708(v0)
  }
  // from the PIC32 reference manual, you must read twice to actually get the data
  waitPMP();                  // wait for the PMP to be ready
9d00391c:	0f400e34 	jal	9d0038d0 <waitPMP>
9d003920:	3c10bf80 	lui	s0,0xbf80

9d003924 <.LVL1>:
  val = PMDIN;
9d003924:	8e027040 	lw	v0,28736(s0)
9d003928:	304200ff 	andi	v0,v0,0xff
9d00392c:	a3a20010 	sb	v0,16(sp)
  waitPMP();
9d003930:	0f400e34 	jal	9d0038d0 <waitPMP>
9d003934:	00000000 	nop

9d003938 <.LVL2>:
  val = PMDIN;
9d003938:	8e027040 	lw	v0,28736(s0)
9d00393c:	304200ff 	andi	v0,v0,0xff
9d003940:	a3a20010 	sb	v0,16(sp)
  return val;
9d003944:	93a20010 	lbu	v0,16(sp)
}
9d003948:	304200ff 	andi	v0,v0,0xff
9d00394c:	8fbf001c 	lw	ra,28(sp)
9d003950:	8fb00018 	lw	s0,24(sp)
9d003954:	03e00008 	jr	ra
9d003958:	27bd0020 	addiu	sp,sp,32

9d00395c <LCD_Write>:
}

// Write data to the LCD and wait for it to finish by checking the busy flag. 
// rs : the value of the RS signal, 0 for an instruction 1 for data
// data : the byte to send
void LCD_Write(int rs, unsigned char data) {
9d00395c:	27bdffd8 	addiu	sp,sp,-40
9d003960:	afbf0024 	sw	ra,36(sp)
9d003964:	afb10020 	sw	s1,32(sp)
9d003968:	afb0001c 	sw	s0,28(sp)
9d00396c:	00808021 	move	s0,a0
9d003970:	00a08821 	move	s1,a1

9d003974 <.LBB4>:
}

// wait for the LCD to finish its command.
// We check this by reading from the LCD
static void waitLCD() {
  volatile unsigned char val = 0x80;
9d003974:	2402ff80 	li	v0,-128
9d003978:	a3a20010 	sb	v0,16(sp)
  
  // Read from the LCD until the Busy flag (BF, 7th bit) is 0
  while (val & 0x80) {
9d00397c:	93a20010 	lbu	v0,16(sp)
9d003980:	7c021420 	seb	v0,v0
9d003984:	04410008 	bgez	v0,9d0039a8 <.LVL5+0x14>
9d003988:	24020032 	li	v0,50
    val = LCD_Read(0);
9d00398c:	0f400e3b 	jal	9d0038ec <LCD_Read>
9d003990:	00002021 	move	a0,zero

9d003994 <.LVL5>:
9d003994:	a3a20010 	sb	v0,16(sp)
// We check this by reading from the LCD
static void waitLCD() {
  volatile unsigned char val = 0x80;
  
  // Read from the LCD until the Busy flag (BF, 7th bit) is 0
  while (val & 0x80) {
9d003998:	93a20010 	lbu	v0,16(sp)
9d00399c:	7c021420 	seb	v0,v0
9d0039a0:	0440fffa 	bltz	v0,9d00398c <.LBB4+0x18>
9d0039a4:	24020032 	li	v0,50
    val = LCD_Read(0);
  }
  int i = 0;
  for(i = 0; i < 50; ++i) { // slight delay
    _nop();
9d0039a8:	00000040 	ssnop
9d0039ac:	2442ffff 	addiu	v0,v0,-1
  // Read from the LCD until the Busy flag (BF, 7th bit) is 0
  while (val & 0x80) {
    val = LCD_Read(0);
  }
  int i = 0;
  for(i = 0; i < 50; ++i) { // slight delay
9d0039b0:	1440fffd 	bnez	v0,9d0039a8 <.LVL5+0x14>
9d0039b4:	00000000 	nop

9d0039b8 <.LBE4>:
// Write data to the LCD and wait for it to finish by checking the busy flag. 
// rs : the value of the RS signal, 0 for an instruction 1 for data
// data : the byte to send
void LCD_Write(int rs, unsigned char data) {
  waitLCD();           // wait for the LCD to be ready
  if(rs) { // 1 for data
9d0039b8:	12000004 	beqz	s0,9d0039cc <.LBE4+0x14>
9d0039bc:	24030400 	li	v1,1024
    PMADDRSET = 1 << PMABIT;
9d0039c0:	3c02bf80 	lui	v0,0xbf80
9d0039c4:	0b400e75 	j	9d0039d4 <.LBE4+0x1c>
9d0039c8:	ac437028 	sw	v1,28712(v0)
  } else { // 0 for command
    PMADDRCLR = 1 << PMABIT; 
9d0039cc:	3c02bf80 	lui	v0,0xbf80
9d0039d0:	ac437024 	sw	v1,28708(v0)
  }
  waitPMP();           // Wait for the PMP to be ready
9d0039d4:	0f400e34 	jal	9d0038d0 <waitPMP>
9d0039d8:	00000000 	nop

9d0039dc <.LVL12>:
  PMDIN = data;        // send the data
9d0039dc:	3c02bf80 	lui	v0,0xbf80
9d0039e0:	ac517040 	sw	s1,28736(v0)
}
9d0039e4:	0b400e7b 	j	9d0039ec <.LVL12+0x10>
9d0039e8:	8fbf0024 	lw	ra,36(sp)
9d0039ec:	8fb10020 	lw	s1,32(sp)
9d0039f0:	8fb0001c 	lw	s0,28(sp)
9d0039f4:	03e00008 	jr	ra
9d0039f8:	27bd0028 	addiu	sp,sp,40

9d0039fc <LCD_Clear>:
    __builtin_enable_interrupts();
  }
}

// Clears the display and returns to the home position (0,0)
void LCD_Clear(void) {
9d0039fc:	27bdffe8 	addiu	sp,sp,-24
9d003a00:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0,0x01); //clear the whole screen
9d003a04:	00002021 	move	a0,zero
9d003a08:	0f400e57 	jal	9d00395c <LCD_Write>
9d003a0c:	24050001 	li	a1,1

9d003a10 <.LVL15>:
}
9d003a10:	8fbf0014 	lw	ra,20(sp)
9d003a14:	03e00008 	jr	ra
9d003a18:	27bd0018 	addiu	sp,sp,24

9d003a1c <LCD_Home>:

// Return the cursor and display to the home position (0,0)
void LCD_Home(void) {
9d003a1c:	27bdffe8 	addiu	sp,sp,-24
9d003a20:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0,0x02);
9d003a24:	00002021 	move	a0,zero
9d003a28:	0f400e57 	jal	9d00395c <LCD_Write>
9d003a2c:	24050002 	li	a1,2

9d003a30 <.LVL16>:
}
9d003a30:	8fbf0014 	lw	ra,20(sp)
9d003a34:	03e00008 	jr	ra
9d003a38:	27bd0018 	addiu	sp,sp,24

9d003a3c <LCD_Entry>:

// Issue the LCD entry mode set command
// This tells the LCD what to do after writing a character
// id : 1 increment cursor, 0 decrement cursor
// s : 1 shift display right, 0 don't shift display
void LCD_Entry(int id, int s) {
9d003a3c:	27bdffe8 	addiu	sp,sp,-24
9d003a40:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x04 | (id << 1) | s);
9d003a44:	34a50004 	ori	a1,a1,0x4
9d003a48:	00042040 	sll	a0,a0,0x1
9d003a4c:	00a42825 	or	a1,a1,a0
9d003a50:	00002021 	move	a0,zero
9d003a54:	0f400e57 	jal	9d00395c <LCD_Write>
9d003a58:	30a500ff 	andi	a1,a1,0xff

9d003a5c <.LVL20>:
}
9d003a5c:	8fbf0014 	lw	ra,20(sp)
9d003a60:	03e00008 	jr	ra
9d003a64:	27bd0018 	addiu	sp,sp,24

9d003a68 <LCD_Display>:
// Issue the LCD Display command
// Changes display settings
// d : 1 display on, 0 display off
// c : 1 cursor on, 0 cursor off
// b : 1 cursor blinks, 0 cursor doesn't blink
void LCD_Display(int d, int c, int b) {
9d003a68:	27bdffe8 	addiu	sp,sp,-24
9d003a6c:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x08 | (d << 2) | (c << 1) | b);
9d003a70:	34c60008 	ori	a2,a2,0x8
9d003a74:	00052840 	sll	a1,a1,0x1
9d003a78:	00c53025 	or	a2,a2,a1
9d003a7c:	00042080 	sll	a0,a0,0x2
9d003a80:	00c42825 	or	a1,a2,a0
9d003a84:	00002021 	move	a0,zero
9d003a88:	0f400e57 	jal	9d00395c <LCD_Write>
9d003a8c:	30a500ff 	andi	a1,a1,0xff

9d003a90 <.LVL25>:
}
9d003a90:	8fbf0014 	lw	ra,20(sp)
9d003a94:	03e00008 	jr	ra
9d003a98:	27bd0018 	addiu	sp,sp,24

9d003a9c <LCD_Shift>:

// Issue the LCD display shift command
// Move the cursor or the display right or left
// sc : 0 shift cursor, 1 shift display
// rl : 0 to the left, 1 to the right
void LCD_Shift(int sc, int rl) {
9d003a9c:	27bdffe8 	addiu	sp,sp,-24
9d003aa0:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0,0x1 | (sc << 3) | (rl << 2));
9d003aa4:	00052880 	sll	a1,a1,0x2
9d003aa8:	34a50001 	ori	a1,a1,0x1
9d003aac:	000420c0 	sll	a0,a0,0x3
9d003ab0:	00a42825 	or	a1,a1,a0
9d003ab4:	00002021 	move	a0,zero
9d003ab8:	0f400e57 	jal	9d00395c <LCD_Write>
9d003abc:	30a500fd 	andi	a1,a1,0xfd

9d003ac0 <.LVL29>:
}
9d003ac0:	8fbf0014 	lw	ra,20(sp)
9d003ac4:	03e00008 	jr	ra
9d003ac8:	27bd0018 	addiu	sp,sp,24

9d003acc <LCD_Function>:
// Issue the LCD Functions set command
// This controls some LCD settings
// You may want to clear the screen after calling this
// n : 0 one line, 1 two lines
// f : 0 small font, 1 large font (only if n == 0)
void LCD_Function(int n, int f) {
9d003acc:	27bdffe8 	addiu	sp,sp,-24
9d003ad0:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x30 | (n << 3) | (f << 2));
9d003ad4:	00052880 	sll	a1,a1,0x2
9d003ad8:	34a50030 	ori	a1,a1,0x30
9d003adc:	000420c0 	sll	a0,a0,0x3
9d003ae0:	00a42825 	or	a1,a1,a0
9d003ae4:	00002021 	move	a0,zero
9d003ae8:	0f400e57 	jal	9d00395c <LCD_Write>
9d003aec:	30a500fc 	andi	a1,a1,0xfc

9d003af0 <.LVL33>:
}
9d003af0:	8fbf0014 	lw	ra,20(sp)
9d003af4:	03e00008 	jr	ra
9d003af8:	27bd0018 	addiu	sp,sp,24

9d003afc <LCD_Move>:

// Move the cursor to the desired line and column
// Does this by issuing a DDRAM Move instruction
// line : line 0 or line 1
// col  : the desired column
void LCD_Move(int line, int col) {
9d003afc:	27bdffe8 	addiu	sp,sp,-24
9d003b00:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x80 | (line << 6) | col);
9d003b04:	2402ff80 	li	v0,-128
9d003b08:	00a22825 	or	a1,a1,v0
9d003b0c:	00042180 	sll	a0,a0,0x6
9d003b10:	00a42825 	or	a1,a1,a0
9d003b14:	00002021 	move	a0,zero
9d003b18:	0f400e57 	jal	9d00395c <LCD_Write>
9d003b1c:	30a500ff 	andi	a1,a1,0xff

9d003b20 <.LVL37>:
}
9d003b20:	8fbf0014 	lw	ra,20(sp)
9d003b24:	03e00008 	jr	ra
9d003b28:	27bd0018 	addiu	sp,sp,24

9d003b2c <LCD_CMove>:

// Sets the CGRAM address, used for creating custom
// characters
// addr address in the CGRAM to make current
void LCD_CMove(unsigned char addr) {
9d003b2c:	27bdffe8 	addiu	sp,sp,-24
9d003b30:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x40 | addr);
9d003b34:	34850040 	ori	a1,a0,0x40
9d003b38:	0f400e57 	jal	9d00395c <LCD_Write>
9d003b3c:	00002021 	move	a0,zero

9d003b40 <.LVL40>:
}
9d003b40:	8fbf0014 	lw	ra,20(sp)
9d003b44:	03e00008 	jr	ra
9d003b48:	27bd0018 	addiu	sp,sp,24

9d003b4c <LCD_WriteChar>:

// Writes the character to the LCD at the current position
void LCD_WriteChar(char c) {         
9d003b4c:	27bdffe8 	addiu	sp,sp,-24
9d003b50:	afbf0014 	sw	ra,20(sp)
  LCD_Write(1, c); 
9d003b54:	308500ff 	andi	a1,a0,0xff
9d003b58:	0f400e57 	jal	9d00395c <LCD_Write>
9d003b5c:	24040001 	li	a0,1

9d003b60 <.LVL43>:
}
9d003b60:	8fbf0014 	lw	ra,20(sp)
9d003b64:	03e00008 	jr	ra
9d003b68:	27bd0018 	addiu	sp,sp,24

9d003b6c <LCD_WriteString>:

// Write a string to the LCD starting at the current cursor
void LCD_WriteString(const char *str) {
9d003b6c:	27bdffe8 	addiu	sp,sp,-24
9d003b70:	afbf0014 	sw	ra,20(sp)
9d003b74:	afb00010 	sw	s0,16(sp)
9d003b78:	00808021 	move	s0,a0
  while(*str) {
9d003b7c:	80840000 	lb	a0,0(a0)
9d003b80:	10800006 	beqz	a0,9d003b9c <.LVL46+0xc>
9d003b84:	8fbf0014 	lw	ra,20(sp)
    LCD_WriteChar(*str); // increment string pointer after char sent
9d003b88:	0f400ed3 	jal	9d003b4c <LCD_WriteChar>
9d003b8c:	26100001 	addiu	s0,s0,1

9d003b90 <.LVL46>:
  LCD_Write(1, c); 
}

// Write a string to the LCD starting at the current cursor
void LCD_WriteString(const char *str) {
  while(*str) {
9d003b90:	82040000 	lb	a0,0(s0)
9d003b94:	1480fffc 	bnez	a0,9d003b88 <LCD_WriteString+0x1c>
9d003b98:	8fbf0014 	lw	ra,20(sp)
    LCD_WriteChar(*str); // increment string pointer after char sent
    ++str;
  }
}
9d003b9c:	8fb00010 	lw	s0,16(sp)
9d003ba0:	03e00008 	jr	ra
9d003ba4:	27bd0018 	addiu	sp,sp,24

9d003ba8 <LCD_CustomChar>:
// Make val a custom character.  This only implements 
// The small font version
// val : between 0 and 7
// data : 7 character array.  The first 5 bits of each character
//        determine whether that pixel is on or off
void LCD_CustomChar(unsigned char val, const char * data) {
9d003ba8:	27bdffd8 	addiu	sp,sp,-40
9d003bac:	afbf0024 	sw	ra,36(sp)
9d003bb0:	afb30020 	sw	s3,32(sp)
9d003bb4:	afb2001c 	sw	s2,28(sp)
9d003bb8:	afb10018 	sw	s1,24(sp)
9d003bbc:	afb00014 	sw	s0,20(sp)
9d003bc0:	00a09821 	move	s3,a1
  int i = 0;
  for(i = 0; i < 7; ++i) {
    LCD_CMove(((val & 7) << 2) | i);
9d003bc4:	30840007 	andi	a0,a0,0x7
9d003bc8:	00049080 	sll	s2,a0,0x2
// val : between 0 and 7
// data : 7 character array.  The first 5 bits of each character
//        determine whether that pixel is on or off
void LCD_CustomChar(unsigned char val, const char * data) {
  int i = 0;
  for(i = 0; i < 7; ++i) {
9d003bcc:	00008021 	move	s0,zero
9d003bd0:	24110007 	li	s1,7
    LCD_CMove(((val & 7) << 2) | i);
9d003bd4:	02502025 	or	a0,s2,s0
9d003bd8:	0f400ecb 	jal	9d003b2c <LCD_CMove>
9d003bdc:	308400ff 	andi	a0,a0,0xff

9d003be0 <.LVL52>:
9d003be0:	02701021 	addu	v0,s3,s0
    LCD_Write(1, data[i]);
9d003be4:	24040001 	li	a0,1
9d003be8:	0f400e57 	jal	9d00395c <LCD_Write>
9d003bec:	90450000 	lbu	a1,0(v0)

9d003bf0 <.LVL53>:
// val : between 0 and 7
// data : 7 character array.  The first 5 bits of each character
//        determine whether that pixel is on or off
void LCD_CustomChar(unsigned char val, const char * data) {
  int i = 0;
  for(i = 0; i < 7; ++i) {
9d003bf0:	26100001 	addiu	s0,s0,1
9d003bf4:	1611fff8 	bne	s0,s1,9d003bd8 <LCD_CustomChar+0x30>
9d003bf8:	02502025 	or	a0,s2,s0
    LCD_CMove(((val & 7) << 2) | i);
    LCD_Write(1, data[i]);
  }
}
9d003bfc:	8fbf0024 	lw	ra,36(sp)
9d003c00:	8fb30020 	lw	s3,32(sp)
9d003c04:	8fb2001c 	lw	s2,28(sp)
9d003c08:	8fb10018 	lw	s1,24(sp)
9d003c0c:	8fb00014 	lw	s0,20(sp)
9d003c10:	03e00008 	jr	ra
9d003c14:	27bd0028 	addiu	sp,sp,40

9d003c18 <LCD_Setup>:
// pins RE0 - RE7 (PMD0 - PMD7) connect to LCD pins D0 - D7
// pin RD4 (PMENB) connects to LCD pin E
// pin RD5 (PMRD/PMWR) Connects to LCD pin R/W
// pin RB13 (PMA10) Connects to RS.
// interrupts will be disabled while this function executes
void LCD_Setup() {
9d003c18:	27bdffe8 	addiu	sp,sp,-24
9d003c1c:	afbf0014 	sw	ra,20(sp)
9d003c20:	afb00010 	sw	s0,16(sp)
  int en = __builtin_disable_interrupts();  // disable interrupts, remember initial state
9d003c24:	41706000 	di	s0
9d003c28:	000000c0 	ehb
  
  IEC1bits.PMPIE = 0;    // disable PMP interrupts
9d003c2c:	3c02bf88 	lui	v0,0xbf88
9d003c30:	8c431070 	lw	v1,4208(v0)
9d003c34:	7c031084 	ins	v1,zero,0x2,0x1
9d003c38:	ac431070 	sw	v1,4208(v0)
  PMCON = 0;             // clear PMCON, like it is on reset
9d003c3c:	3c02bf80 	lui	v0,0xbf80
9d003c40:	ac407000 	sw	zero,28672(v0)
  PMCONbits.PTWREN = 1;  // PMENB strobe enabled
9d003c44:	3c02bf80 	lui	v0,0xbf80
9d003c48:	94437000 	lhu	v1,28672(v0)
9d003c4c:	24040001 	li	a0,1
9d003c50:	7c834a44 	ins	v1,a0,0x9,0x1
9d003c54:	a4437000 	sh	v1,28672(v0)
  PMCONbits.PTRDEN = 1;  // PMRD/PMWR enabled
9d003c58:	94437000 	lhu	v1,28672(v0)
9d003c5c:	7c834204 	ins	v1,a0,0x8,0x1
9d003c60:	a4437000 	sh	v1,28672(v0)
  PMCONbits.WRSP = 1;    // Read/write strobe is active high
9d003c64:	94437000 	lhu	v1,28672(v0)
9d003c68:	7c830844 	ins	v1,a0,0x1,0x1
9d003c6c:	a4437000 	sh	v1,28672(v0)
  PMCONbits.RDSP = 1;    // Read/write strobe is active high
9d003c70:	94437000 	lhu	v1,28672(v0)
9d003c74:	7c830004 	ins	v1,a0,0x0,0x1
9d003c78:	a4437000 	sh	v1,28672(v0)

  PMMODE = 0;            // clear PMMODE like it is on reset
9d003c7c:	3c03bf80 	lui	v1,0xbf80
9d003c80:	ac607010 	sw	zero,28688(v1)
  PMMODEbits.MODE = 0x3; // set master mode 1, which uses a single strobe
9d003c84:	3c03bf80 	lui	v1,0xbf80
9d003c88:	94657010 	lhu	a1,28688(v1)
9d003c8c:	24060003 	li	a2,3
9d003c90:	7cc54a04 	ins	a1,a2,0x8,0x2
9d003c94:	a4657010 	sh	a1,28688(v1)
  // The cycle is started when reading from or writing to the PMDIN SFR.
  // Note that the wait states for writes start with minimum of 1 (except WAITE)
  // We add some extra wait states to make sure we meet the time and
  // account for variations in timing amongst different HD44780 compatible parts.
  // The timing we use here is for the KS066U which is faster than the HD44780.
  PMMODEbits.WAITB = 0x3;  // Tas in the LCD datasheet is 60 ns 
9d003c98:	94657010 	lhu	a1,28688(v1)
9d003c9c:	7cc53984 	ins	a1,a2,0x6,0x2
9d003ca0:	a4657010 	sh	a1,28688(v1)
  PMMODEbits.WAITM = 0xF;  // PWeh in the data sheet is 230 ns (we don't quite meet this)
9d003ca4:	94657010 	lhu	a1,28688(v1)
9d003ca8:	2406000f 	li	a2,15
9d003cac:	7cc52884 	ins	a1,a2,0x2,0x4
9d003cb0:	a4657010 	sh	a1,28688(v1)
                           // If not working for your LCD you may need to reduce PBCLK
  PMMODEbits.WAITE = 0x1;  // after E is low wait Tah (10ns)
9d003cb4:	94657010 	lhu	a1,28688(v1)
9d003cb8:	7c850804 	ins	a1,a0,0x0,0x2
9d003cbc:	a4657010 	sh	a1,28688(v1)

  PMAEN |= 1 << PMABIT;   // PMA is an address line
9d003cc0:	3c03bf80 	lui	v1,0xbf80
9d003cc4:	8c657050 	lw	a1,28752(v1)
9d003cc8:	34a50400 	ori	a1,a1,0x400
9d003ccc:	ac657050 	sw	a1,28752(v1)
  
  PMCONbits.ON = 1;        // enable the PMP peripheral
9d003cd0:	94437000 	lhu	v1,28672(v0)
9d003cd4:	7c837bc4 	ins	v1,a0,0xf,0x1
9d003cd8:	a4437000 	sh	v1,28672(v0)

9d003cdc <.LBB12>:
// This controls some LCD settings
// You may want to clear the screen after calling this
// n : 0 one line, 1 two lines
// f : 0 small font, 1 large font (only if n == 0)
void LCD_Function(int n, int f) {
  LCD_Write(0, 0x30 | (n << 3) | (f << 2));
9d003cdc:	00002021 	move	a0,zero
9d003ce0:	0f400e57 	jal	9d00395c <LCD_Write>
9d003ce4:	24050038 	li	a1,56

9d003ce8 <.LBB14>:
// Changes display settings
// d : 1 display on, 0 display off
// c : 1 cursor on, 0 cursor off
// b : 1 cursor blinks, 0 cursor doesn't blink
void LCD_Display(int d, int c, int b) {
  LCD_Write(0, 0x08 | (d << 2) | (c << 1) | b);
9d003ce8:	00002021 	move	a0,zero
9d003cec:	0f400e57 	jal	9d00395c <LCD_Write>
9d003cf0:	2405000c 	li	a1,12

9d003cf4 <.LBE14>:
  
  PMCONbits.ON = 1;        // enable the PMP peripheral
  // perform the initialization sequence
  LCD_Function(1,0);       // 2 line mode, small font
  LCD_Display(1, 0, 0);    // Display control: display on, cursor off, blinking cursor off
  LCD_Clear();             // clear the LCD 
9d003cf4:	0f400e7f 	jal	9d0039fc <LCD_Clear>
9d003cf8:	32100001 	andi	s0,s0,0x1

9d003cfc <.LBB16>:
// Issue the LCD entry mode set command
// This tells the LCD what to do after writing a character
// id : 1 increment cursor, 0 decrement cursor
// s : 1 shift display right, 0 don't shift display
void LCD_Entry(int id, int s) {
  LCD_Write(0, 0x04 | (id << 1) | s);
9d003cfc:	00002021 	move	a0,zero
9d003d00:	0f400e57 	jal	9d00395c <LCD_Write>
9d003d04:	24050006 	li	a1,6

9d003d08 <.LBE16>:
  LCD_Function(1,0);       // 2 line mode, small font
  LCD_Display(1, 0, 0);    // Display control: display on, cursor off, blinking cursor off
  LCD_Clear();             // clear the LCD 
  LCD_Entry(1, 0);         // Cursor moves left to right. do not shift the display
  
  if(en & 0x1)             // if interrupts were enabled before, re-enable them
9d003d08:	12000003 	beqz	s0,9d003d18 <.LBE16+0x10>
9d003d0c:	8fbf0014 	lw	ra,20(sp)
  {
    __builtin_enable_interrupts();
9d003d10:	41626020 	ei	v0
  }
}
9d003d14:	8fbf0014 	lw	ra,20(sp)
9d003d18:	8fb00010 	lw	s0,16(sp)
9d003d1c:	03e00008 	jr	ra
9d003d20:	27bd0018 	addiu	sp,sp,24

Disassembly of section .text:

9d003d24 <NU32_Startup>:

// Perform startup routines:
//  Make NU32_LED1 and NU32_LED2 pins outputs (NU32_USER is by default an input)
//  Initialize the serial port - UART3 (no interrupt) 
//  Enable interrupts
void NU32_Startup() {
9d003d24:	27bdfff8 	addiu	sp,sp,-8
9d003d28:	afbf0004 	sw	ra,4(sp)
  // disable interrupts
  __builtin_disable_interrupts();
9d003d2c:	41626000 	di	v0
9d003d30:	000000c0 	ehb
  // see Chapter 2 "CPU for Devices with M4K Core" of the PIC32 reference manual
  // most of the other bits have prescribed values
  // microchip does not provide a _CP0_SET_CONFIG macro, so we directly use
  // the compiler built-in command _mtc0
  // to disable cache, use 0xa4210582 
  __builtin_mtc0(_CP0_CONFIG, _CP0_CONFIG_SELECT, 0xa4210583); 
9d003d34:	3c02a421 	lui	v0,0xa421
9d003d38:	24420583 	addiu	v0,v0,1411
9d003d3c:	40828000 	mtc0	v0,c0_config
9d003d40:	000000c0 	ehb
  
  // set the prefectch cache wait state to 2, as per the
  // electrical characteristics data sheet
  CHECONbits.PFMWS = 0x2;   
9d003d44:	3c02bf88 	lui	v0,0xbf88
9d003d48:	8c434000 	lw	v1,16384(v0)
9d003d4c:	24050002 	li	a1,2
9d003d50:	7ca31004 	ins	v1,a1,0x0,0x3
9d003d54:	ac434000 	sw	v1,16384(v0)

  //enable prefetch for cacheable and noncacheable memory
  CHECONbits.PREFEN = 0x3; 
9d003d58:	8c434000 	lw	v1,16384(v0)
9d003d5c:	24040003 	li	a0,3
9d003d60:	7c832904 	ins	v1,a0,0x4,0x2
9d003d64:	ac434000 	sw	v1,16384(v0)

  // 0 data RAM access wait states
  BMXCONbits.BMXWSDRM = 0x0;
9d003d68:	3c02bf88 	lui	v0,0xbf88
9d003d6c:	8c432000 	lw	v1,8192(v0)
9d003d70:	7c033184 	ins	v1,zero,0x6,0x1
9d003d74:	ac432000 	sw	v1,8192(v0)
  
  // enable multi vector interrupts
  INTCONbits.MVEC = 0x1;
9d003d78:	3c02bf88 	lui	v0,0xbf88
9d003d7c:	8c461000 	lw	a2,4096(v0)
9d003d80:	24030001 	li	v1,1
9d003d84:	7c666304 	ins	a2,v1,0xc,0x1
9d003d88:	ac461000 	sw	a2,4096(v0)

  // disable JTAG to get B10, B11, B12 and B13 back
  DDPCONbits.JTAGEN = 0;
9d003d8c:	3c02bf81 	lui	v0,0xbf81
9d003d90:	9046f200 	lbu	a2,-3584(v0)
9d003d94:	7c0618c4 	ins	a2,zero,0x3,0x1
9d003d98:	a046f200 	sb	a2,-3584(v0)

  TRISFCLR = 0x0003;  // Make F0 and F1 outputs (LED1 and LED2)
9d003d9c:	3c02bf88 	lui	v0,0xbf88
9d003da0:	ac446144 	sw	a0,24900(v0)
  NU32_LED1 = 1;      // LED1 is off
9d003da4:	3c02bf88 	lui	v0,0xbf88
9d003da8:	90446160 	lbu	a0,24928(v0)
9d003dac:	7c640004 	ins	a0,v1,0x0,0x1
9d003db0:	a0446160 	sb	a0,24928(v0)
  NU32_LED2 = 0;      // LED2 is on
9d003db4:	90446160 	lbu	a0,24928(v0)
9d003db8:	7c040844 	ins	a0,zero,0x1,0x1
9d003dbc:	a0446160 	sb	a0,24928(v0)

  // turn on UART3 without an interrupt
  U3MODEbits.BRGH = 0; // set baud to NU32_DESIRED_BAUD
9d003dc0:	3c02bf80 	lui	v0,0xbf80
9d003dc4:	94446400 	lhu	a0,25600(v0)
9d003dc8:	7c0418c4 	ins	a0,zero,0x3,0x1
9d003dcc:	a4446400 	sh	a0,25600(v0)
  U3BRG = ((NU32_SYS_FREQ / NU32_DESIRED_BAUD) / 16) - 1;
9d003dd0:	24060014 	li	a2,20
9d003dd4:	3c04bf80 	lui	a0,0xbf80
9d003dd8:	ac866440 	sw	a2,25664(a0)

  // 8 bit, no parity bit, and 1 stop bit (8N1 setup)
  U3MODEbits.PDSEL = 0;
9d003ddc:	94446400 	lhu	a0,25600(v0)
9d003de0:	7c041044 	ins	a0,zero,0x1,0x2
9d003de4:	a4446400 	sh	a0,25600(v0)
  U3MODEbits.STSEL = 0;
9d003de8:	94446400 	lhu	a0,25600(v0)
9d003dec:	7c040004 	ins	a0,zero,0x0,0x1
9d003df0:	a4446400 	sh	a0,25600(v0)

  // configure TX & RX pins as output & input pins
  U3STAbits.UTXEN = 1;
9d003df4:	3c04bf80 	lui	a0,0xbf80
9d003df8:	8c866410 	lw	a2,25616(a0)
9d003dfc:	7c665284 	ins	a2,v1,0xa,0x1
9d003e00:	ac866410 	sw	a2,25616(a0)
  U3STAbits.URXEN = 1;
9d003e04:	8c866410 	lw	a2,25616(a0)
9d003e08:	7c666304 	ins	a2,v1,0xc,0x1
9d003e0c:	ac866410 	sw	a2,25616(a0)
  // configure hardware flow control using RTS and CTS
  U3MODEbits.UEN = 2;
9d003e10:	94446400 	lhu	a0,25600(v0)
9d003e14:	7ca44a04 	ins	a0,a1,0x8,0x2
9d003e18:	a4446400 	sh	a0,25600(v0)

  // enable the uart
  U3MODEbits.ON = 1;
9d003e1c:	94446400 	lhu	a0,25600(v0)
9d003e20:	7c647bc4 	ins	a0,v1,0xf,0x1
9d003e24:	a4446400 	sh	a0,25600(v0)

  __builtin_enable_interrupts();
9d003e28:	41626020 	ei	v0
}
9d003e2c:	8fbf0004 	lw	ra,4(sp)
9d003e30:	03e00008 	jr	ra
9d003e34:	27bd0008 	addiu	sp,sp,8

9d003e38 <NU32_ReadUART3>:
// Read from UART3
// block other functions until you get a '\r' or '\n'
// send the pointer to your char array and the number of elements in the array
void NU32_ReadUART3(char * message, int maxLength) {
  char data = 0;
  int complete = 0, num_bytes = 0;
9d003e38:	00003021 	move	a2,zero
  // loop until you get a '\r' or '\n'
  while (!complete) {
    if (U3STAbits.URXDA) { // if data is available
9d003e3c:	3c03bf80 	lui	v1,0xbf80
      data = U3RXREG;      // read the data
9d003e40:	3c08bf80 	lui	t0,0xbf80
      if ((data == '\n') || (data == '\r')) {
9d003e44:	2407000a 	li	a3,10
9d003e48:	0b400fa2 	j	9d003e88 <NU32_ReadUART3+0x50>
9d003e4c:	2409000d 	li	t1,13
void NU32_ReadUART3(char * message, int maxLength) {
  char data = 0;
  int complete = 0, num_bytes = 0;
  // loop until you get a '\r' or '\n'
  while (!complete) {
    if (U3STAbits.URXDA) { // if data is available
9d003e50:	8c626410 	lw	v0,25616(v1)
9d003e54:	30420001 	andi	v0,v0,0x1
9d003e58:	1040fffd 	beqz	v0,9d003e50 <NU32_ReadUART3+0x18>
9d003e5c:	00000000 	nop
      data = U3RXREG;      // read the data
9d003e60:	8d026430 	lw	v0,25648(t0)
9d003e64:	7c021420 	seb	v0,v0
      if ((data == '\n') || (data == '\r')) {
9d003e68:	5047000e 	beql	v0,a3,9d003ea4 <NU32_ReadUART3+0x6c>
9d003e6c:	00862021 	addu	a0,a0,a2
9d003e70:	1049000b 	beq	v0,t1,9d003ea0 <NU32_ReadUART3+0x68>
9d003e74:	00865021 	addu	t2,a0,a2
        complete = 1;
      } else {
        message[num_bytes] = data;
9d003e78:	a1420000 	sb	v0,0(t2)
        ++num_bytes;
9d003e7c:	24c60001 	addiu	a2,a2,1
        // roll over if the array is too small
        if (num_bytes >= maxLength) {
9d003e80:	00c5102a 	slt	v0,a2,a1
          num_bytes = 0;
9d003e84:	0002300a 	movz	a2,zero,v0
void NU32_ReadUART3(char * message, int maxLength) {
  char data = 0;
  int complete = 0, num_bytes = 0;
  // loop until you get a '\r' or '\n'
  while (!complete) {
    if (U3STAbits.URXDA) { // if data is available
9d003e88:	8c626410 	lw	v0,25616(v1)
9d003e8c:	30420001 	andi	v0,v0,0x1
9d003e90:	1040ffef 	beqz	v0,9d003e50 <NU32_ReadUART3+0x18>
9d003e94:	00000000 	nop
9d003e98:	0b400f98 	j	9d003e60 <NU32_ReadUART3+0x28>
9d003e9c:	00000000 	nop
        }
      }
    }
  }
  // end the string
  message[num_bytes] = '\0';
9d003ea0:	00862021 	addu	a0,a0,a2
9d003ea4:	03e00008 	jr	ra
9d003ea8:	a0800000 	sb	zero,0(a0)

9d003eac <NU32_WriteUART3>:
}

// Write a character array using UART3
void NU32_WriteUART3(const char * string) {
  while (*string != '\0') {
9d003eac:	80850000 	lb	a1,0(a0)
9d003eb0:	10a0000b 	beqz	a1,9d003ee0 <NU32_WriteUART3+0x34>
9d003eb4:	3c03bf80 	lui	v1,0xbf80
    while (U3STAbits.UTXBF) {
      ; // wait until tx buffer isn't full
    }
    U3TXREG = *string;
9d003eb8:	3c06bf80 	lui	a2,0xbf80
}

// Write a character array using UART3
void NU32_WriteUART3(const char * string) {
  while (*string != '\0') {
    while (U3STAbits.UTXBF) {
9d003ebc:	8c626410 	lw	v0,25616(v1)
9d003ec0:	30420200 	andi	v0,v0,0x200
9d003ec4:	1440fffd 	bnez	v0,9d003ebc <NU32_WriteUART3+0x10>
9d003ec8:	00000000 	nop
      ; // wait until tx buffer isn't full
    }
    U3TXREG = *string;
9d003ecc:	acc56420 	sw	a1,25632(a2)
    ++string;
9d003ed0:	24840001 	addiu	a0,a0,1
  message[num_bytes] = '\0';
}

// Write a character array using UART3
void NU32_WriteUART3(const char * string) {
  while (*string != '\0') {
9d003ed4:	80850000 	lb	a1,0(a0)
9d003ed8:	14a0fff8 	bnez	a1,9d003ebc <NU32_WriteUART3+0x10>
9d003edc:	00000000 	nop
9d003ee0:	03e00008 	jr	ra
9d003ee4:	00000000 	nop

Disassembly of section .text.fp32mul:

9d003ee8 <__mulsf3>:
9d003ee8:	00043dc2 30e700ff 00054dc2 312900ff     .=.....0.M....)1
9d003ef8:	3c0a8000 00043200 00ca3025 00054200     ...<.2..%0...B..
9d003f08:	010a4025 00856026 014c5024 24ecffff     %@..&`..$PL....$
9d003f18:	2d8100fe 10200021 00000000              ...-!. .....

9d003f24 <Clab1>:
9d003f24:	252cffff 	addiu	t4,t1,-1
9d003f28:	2d8100fe 	sltiu	at,t4,254
9d003f2c:	10200036 	beqz	at,9d004008 <CspecB>
9d003f30:	00000000 	nop

9d003f34 <Clab2>:
9d003f34:	00c80019 	multu	a2,t0
9d003f38:	00005812 	mflo	t3
9d003f3c:	11600002 	beqz	t3,9d003f48 <i17>
9d003f40:	00003010 	mfhi	a2
9d003f44:	34c60001 	ori	a2,a2,0x1

9d003f48 <i17>:
9d003f48:	04c00003 	bltz	a2,9d003f58 <i18>
9d003f4c:	00000000 	nop
9d003f50:	00063040 	sll	a2,a2,0x1
9d003f54:	24e7ffff 	addiu	a3,a3,-1

9d003f58 <i18>:
9d003f58:	252cff82 	addiu	t4,t1,-126
9d003f5c:	00ec3821 	addu	a3,a3,t4
9d003f60:	24ecffff 	addiu	t4,a3,-1
9d003f64:	2d8100fe 	sltiu	at,t4,254
9d003f68:	1020003a 	beqz	at,9d004054 <Coveund>
9d003f6c:	00000000 	nop

9d003f70 <Clab8>:
9d003f70:	24c60080 	addiu	a2,a2,128
9d003f74:	2ccc0080 	sltiu	t4,a2,128
9d003f78:	00ec3821 	addu	a3,a3,t4
9d003f7c:	00066202 	srl	t4,a2,0x8
9d003f80:	318c0001 	andi	t4,t4,0x1
9d003f84:	00cc3023 	subu	a2,a2,t4
9d003f88:	00063040 	sll	a2,a2,0x1
9d003f8c:	00063242 	srl	a2,a2,0x9
9d003f90:	000765c0 	sll	t4,a3,0x17
9d003f94:	00cc3025 	or	a2,a2,t4
9d003f98:	00ca1025 	or	v0,a2,t2

9d003f9c <C999>:
9d003f9c:	03e00008 	jr	ra
9d003fa0:	00000000 	nop

9d003fa4 <CspecA>:
9d003fa4:	14e0000d 	bnez	a3,9d003fdc <i19>
9d003fa8:	00000000 	nop
9d003fac:	00c63021 	addu	a2,a2,a2
9d003fb0:	10c00005 	beqz	a2,9d003fc8 <i20>
9d003fb4:	00000000 	nop
9d003fb8:	70cb5820 	clz	t3,a2
9d003fbc:	00eb3823 	subu	a3,a3,t3
9d003fc0:	1000ffd8 	b	9d003f24 <Clab1>
9d003fc4:	01663004 	sllv	a2,a2,t3

9d003fc8 <i20>:
9d003fc8:	240100ff 	li	at,255
9d003fcc:	1121001f 	beq	t1,at,9d00404c <Cnan>
9d003fd0:	00000000 	nop
9d003fd4:	10000015 	b	9d00402c <Czer>
9d003fd8:	00000000 	nop

9d003fdc <i19>:
9d003fdc:	00c66021 	addu	t4,a2,a2
9d003fe0:	1580001a 	bnez	t4,9d00404c <Cnan>
9d003fe4:	00000000 	nop
9d003fe8:	15200004 	bnez	t1,9d003ffc <i21>
9d003fec:	00000000 	nop
9d003ff0:	01086021 	addu	t4,t0,t0
9d003ff4:	11800015 	beqz	t4,9d00404c <Cnan>
9d003ff8:	00000000 	nop

9d003ffc <i21>:
9d003ffc:	240100ff 	li	at,255
9d004000:	1521000f 	bne	t1,at,9d004040 <Cinf>
9d004004:	00000000 	nop

9d004008 <CspecB>:
9d004008:	1520000a 	bnez	t1,9d004034 <i22>
9d00400c:	00000000 	nop
9d004010:	01084021 	addu	t0,t0,t0
9d004014:	11000005 	beqz	t0,9d00402c <Czer>
9d004018:	00000000 	nop
9d00401c:	710b5820 	clz	t3,t0
9d004020:	012b4823 	subu	t1,t1,t3
9d004024:	1000ffc3 	b	9d003f34 <Clab2>
9d004028:	01684004 	sllv	t0,t0,t3

9d00402c <Czer>:
9d00402c:	1000ffdb 	b	9d003f9c <C999>
9d004030:	000a1025 	or	v0,zero,t2

9d004034 <i22>:
9d004034:	01086021 	addu	t4,t0,t0
9d004038:	15800004 	bnez	t4,9d00404c <Cnan>
9d00403c:	00000000 	nop

9d004040 <Cinf>:
9d004040:	3c017f80 	lui	at,0x7f80
9d004044:	1000ffd5 	b	9d003f9c <C999>
9d004048:	01411025 	or	v0,t2,at

9d00404c <Cnan>:
9d00404c:	1000ffd3 	b	9d003f9c <C999>
9d004050:	3c02ffc0 	lui	v0,0xffc0

9d004054 <Coveund>:
9d004054:	1ce0fffa 	bgtz	a3,9d004040 <Cinf>
9d004058:	00000000 	nop
9d00405c:	240b0001 	li	t3,1
9d004060:	01675823 	subu	t3,t3,a3
9d004064:	2d610020 	sltiu	at,t3,32
9d004068:	1020fff0 	beqz	at,9d00402c <Czer>
9d00406c:	00000000 	nop
9d004070:	240c0020 	li	t4,32
9d004074:	018b6023 	subu	t4,t4,t3
9d004078:	01863804 	sllv	a3,a2,t4
9d00407c:	10e00002 	beqz	a3,9d004088 <i25>
9d004080:	01663006 	srlv	a2,a2,t3
9d004084:	34c60002 	ori	a2,a2,0x2

9d004088 <i25>:
9d004088:	24070000 	li	a3,0
9d00408c:	24cc0080 	addiu	t4,a2,128
9d004090:	0581ffb7 	bgez	t4,9d003f70 <Clab8>
9d004094:	00000000 	nop
9d004098:	1000ffb5 	b	9d003f70 <Clab8>
9d00409c:	24070001 	li	a3,1
9d0040a0:	00000000 	nop

Disassembly of section .dinit:

9d0040a4 <.dinit>:
9d0040a4:	a000000c 	sb	zero,12(zero)
9d0040a8:	00000014 	0x14
9d0040ac:	00000000 	nop
9d0040b0:	a0000000 	sb	zero,0(zero)
9d0040b4:	00000004 	sllv	zero,zero,zero
9d0040b8:	00000001 	movf	zero,zero,$fcc0
9d0040bc:	00000384 	0x384
9d0040c0:	a0000034 	sb	zero,52(zero)
9d0040c4:	000000d4 	0xd4
9d0040c8:	00000001 	movf	zero,zero,$fcc0
9d0040cc:	a0000098 	sb	zero,152(zero)
9d0040d0:	a00000b4 	sb	zero,180(zero)
9d0040d4:	a00000d0 	sb	zero,208(zero)
9d0040d8:	a0000094 	sb	zero,148(zero)
9d0040dc:	a0000108 	sb	zero,264(zero)
9d0040e0:	00000001 	movf	zero,zero,$fcc0
	...
9d004130:	ffffffff 	sdc3	$31,-1(ra)
9d004134:	ffffffff 	sdc3	$31,-1(ra)
9d004138:	00000000 	nop
9d00413c:	00000040 	ssnop
9d004140:	00001009 	jalr	v0,zero
9d004144:	00000000 	nop
9d004148:	9d004ddc 	0x9d004ddc
9d00414c:	ffffffff 	sdc3	$31,-1(ra)
	...
9d00415c:	00011002 	srl	v0,at,0x0
9d004160:	00000000 	nop
9d004164:	9d004ddc 	0x9d004ddc
9d004168:	ffffffff 	sdc3	$31,-1(ra)
	...
9d004178:	00020002 	srl	zero,v0,0x0
9d00417c:	00000000 	nop
9d004180:	9d004ddc 	0x9d004ddc
9d004184:	fffffffd 	sdc3	$31,-3(ra)
	...
9d0041a0:	a0000108 	sb	zero,264(zero)
9d0041a4:	00000088 	0x88
9d0041a8:	00000000 	nop
9d0041ac:	a0000004 	sb	zero,4(zero)
9d0041b0:	00000004 	sllv	zero,zero,zero
9d0041b4:	00000001 	movf	zero,zero,$fcc0
9d0041b8:	a0000034 	sb	zero,52(zero)
9d0041bc:	a0000020 	sb	zero,32(zero)
9d0041c0:	00000004 	sllv	zero,zero,zero
9d0041c4:	00000000 	nop
9d0041c8:	a0000008 	sb	zero,8(zero)
9d0041cc:	00000004 	sllv	zero,zero,zero
9d0041d0:	00000001 	movf	zero,zero,$fcc0
9d0041d4:	00000002 	srl	zero,zero,0x0
9d0041d8:	00000000 	nop
9d0041dc:	22222222 	addi	v0,s1,8738
9d0041e0:	22222222 	addi	v0,s1,8738

Disassembly of section .text._outcnvrt:

9d0041e4 <_outcnvrt>:
9d0041e4:	27bdffc8 	addiu	sp,sp,-56
9d0041e8:	afbf0034 	sw	ra,52(sp)
9d0041ec:	afb70030 	sw	s7,48(sp)
9d0041f0:	afb6002c 	sw	s6,44(sp)
9d0041f4:	afb50028 	sw	s5,40(sp)
9d0041f8:	afb40024 	sw	s4,36(sp)
9d0041fc:	afb30020 	sw	s3,32(sp)
9d004200:	afb2001c 	sw	s2,28(sp)
9d004204:	afb10018 	sw	s1,24(sp)
9d004208:	afb00014 	sw	s0,20(sp)
9d00420c:	00808821 	move	s1,a0
9d004210:	00a08021 	move	s0,a1
9d004214:	97b70048 	lhu	s7,72(sp)
9d004218:	32f70008 	andi	s7,s7,0x8
9d00421c:	32f7ffff 	andi	s7,s7,0xffff
9d004220:	00c0a021 	move	s4,a2
9d004224:	00e0a821 	move	s5,a3
9d004228:	16e00003 	bnez	s7,9d004238 <_outcnvrt+0x54>
9d00422c:	00c7b02a 	slt	s6,a2,a3
9d004230:	16c0002a 	bnez	s6,9d0042dc <_outcnvrt+0xf8>
9d004234:	00000000 	nop
9d004238:	02149021 	addu	s2,s0,s4
9d00423c:	0b401096 	j	9d004258 <_outcnvrt+0x74>
9d004240:	2413ffff 	li	s3,-1
9d004244:	26100001 	addiu	s0,s0,1
9d004248:	0f4011d7 	jal	9d00475c <fputc>
9d00424c:	8204ffff 	lb	a0,-1(s0)
9d004250:	10530007 	beq	v0,s3,9d004270 <_outcnvrt+0x8c>
9d004254:	02a01021 	move	v0,s5
9d004258:	1612fffa 	bne	s0,s2,9d004244 <_outcnvrt+0x60>
9d00425c:	02202821 	move	a1,s1
9d004260:	12e00003 	beqz	s7,9d004270 <_outcnvrt+0x8c>
9d004264:	02a01021 	move	v0,s5
9d004268:	56c0000d 	bnezl	s6,9d0042a0 <_outcnvrt+0xbc>
9d00426c:	02202021 	move	a0,s1
9d004270:	0296100a 	movz	v0,s4,s6
9d004274:	8fbf0034 	lw	ra,52(sp)
9d004278:	8fb70030 	lw	s7,48(sp)
9d00427c:	8fb6002c 	lw	s6,44(sp)
9d004280:	8fb50028 	lw	s5,40(sp)
9d004284:	8fb40024 	lw	s4,36(sp)
9d004288:	8fb30020 	lw	s3,32(sp)
9d00428c:	8fb2001c 	lw	s2,28(sp)
9d004290:	8fb10018 	lw	s1,24(sp)
9d004294:	8fb00014 	lw	s0,20(sp)
9d004298:	03e00008 	jr	ra
9d00429c:	27bd0038 	addiu	sp,sp,56
9d0042a0:	0f4011ac 	jal	9d0046b0 <.LFE0>
9d0042a4:	02b42823 	subu	a1,s5,s4
9d0042a8:	02a01021 	move	v0,s5
9d0042ac:	0296100a 	movz	v0,s4,s6
9d0042b0:	8fbf0034 	lw	ra,52(sp)
9d0042b4:	8fb70030 	lw	s7,48(sp)
9d0042b8:	8fb6002c 	lw	s6,44(sp)
9d0042bc:	8fb50028 	lw	s5,40(sp)
9d0042c0:	8fb40024 	lw	s4,36(sp)
9d0042c4:	8fb30020 	lw	s3,32(sp)
9d0042c8:	8fb2001c 	lw	s2,28(sp)
9d0042cc:	8fb10018 	lw	s1,24(sp)
9d0042d0:	8fb00014 	lw	s0,20(sp)
9d0042d4:	03e00008 	jr	ra
9d0042d8:	27bd0038 	addiu	sp,sp,56
9d0042dc:	0f4011ac 	jal	9d0046b0 <.LFE0>
9d0042e0:	00e62823 	subu	a1,a3,a2
9d0042e4:	2403ffff 	li	v1,-1
9d0042e8:	1443ffd3 	bne	v0,v1,9d004238 <_outcnvrt+0x54>
9d0042ec:	02a01021 	move	v0,s5
9d0042f0:	0296100a 	movz	v0,s4,s6
9d0042f4:	8fbf0034 	lw	ra,52(sp)
9d0042f8:	8fb70030 	lw	s7,48(sp)
9d0042fc:	8fb6002c 	lw	s6,44(sp)
9d004300:	8fb50028 	lw	s5,40(sp)
9d004304:	8fb40024 	lw	s4,36(sp)
9d004308:	8fb30020 	lw	s3,32(sp)
9d00430c:	8fb2001c 	lw	s2,28(sp)
9d004310:	8fb10018 	lw	s1,24(sp)
9d004314:	8fb00014 	lw	s0,20(sp)
9d004318:	03e00008 	jr	ra
9d00431c:	27bd0038 	addiu	sp,sp,56

Disassembly of section .text._flsbuf_simple:

9d004320 <_flsbuf_simple>:
9d004320:	27bdffd8 	addiu	sp,sp,-40
9d004324:	afbf0024 	sw	ra,36(sp)
9d004328:	afb10020 	sw	s1,32(sp)
9d00432c:	afb0001c 	sw	s0,28(sp)
9d004330:	00a08021 	move	s0,a1
9d004334:	8ca2000c 	lw	v0,12(a1)
9d004338:	1040002d 	beqz	v0,9d0043f0 <_flsbuf_simple+0xd0>
9d00433c:	00808821 	move	s1,a0
9d004340:	8ca20000 	lw	v0,0(a1)
9d004344:	24420001 	addiu	v0,v0,1
9d004348:	2403ffff 	li	v1,-1
9d00434c:	1043001e 	beq	v0,v1,9d0043c8 <_flsbuf_simple+0xa8>
9d004350:	aca20000 	sw	v0,0(a1)
9d004354:	0f401248 	jal	9d004920 <_fflush_simple>
9d004358:	02002021 	move	a0,s0
9d00435c:	8e040000 	lw	a0,0(s0)
9d004360:	8e020004 	lw	v0,4(s0)
9d004364:	2484ffff 	addiu	a0,a0,-1
9d004368:	24430001 	addiu	v1,v0,1
9d00436c:	ae040000 	sw	a0,0(s0)
9d004370:	ae030004 	sw	v1,4(s0)
9d004374:	a0510000 	sb	s1,0(v0)
9d004378:	2402000a 	li	v0,10
9d00437c:	52220007 	beql	s1,v0,9d00439c <_flsbuf_simple+0x7c>
9d004380:	96020010 	lhu	v0,16(s0)
9d004384:	02201021 	move	v0,s1
9d004388:	8fbf0024 	lw	ra,36(sp)
9d00438c:	8fb10020 	lw	s1,32(sp)
9d004390:	8fb0001c 	lw	s0,28(sp)
9d004394:	03e00008 	jr	ra
9d004398:	27bd0028 	addiu	sp,sp,40
9d00439c:	30420008 	andi	v0,v0,0x8
9d0043a0:	1040fff9 	beqz	v0,9d004388 <_flsbuf_simple+0x68>
9d0043a4:	02201021 	move	v0,s1
9d0043a8:	0f401248 	jal	9d004920 <_fflush_simple>
9d0043ac:	02002021 	move	a0,s0
9d0043b0:	02201021 	move	v0,s1
9d0043b4:	8fbf0024 	lw	ra,36(sp)
9d0043b8:	8fb10020 	lw	s1,32(sp)
9d0043bc:	8fb0001c 	lw	s0,28(sp)
9d0043c0:	03e00008 	jr	ra
9d0043c4:	27bd0028 	addiu	sp,sp,40
9d0043c8:	8ca20008 	lw	v0,8(a1)
9d0043cc:	1440ffe1 	bnez	v0,9d004354 <_flsbuf_simple+0x34>
9d0043d0:	00000000 	nop
9d0043d4:	94a20010 	lhu	v0,16(a1)
9d0043d8:	aca00004 	sw	zero,4(a1)
9d0043dc:	aca0000c 	sw	zero,12(a1)
9d0043e0:	34420010 	ori	v0,v0,0x10
9d0043e4:	aca00000 	sw	zero,0(a1)
9d0043e8:	0b4010d5 	j	9d004354 <_flsbuf_simple+0x34>
9d0043ec:	a4a20010 	sh	v0,16(a1)
9d0043f0:	27a40010 	addiu	a0,sp,16
9d0043f4:	24050001 	li	a1,1
9d0043f8:	0f4012d8 	jal	9d004b60 <_mon_write>
9d0043fc:	a3b10010 	sb	s1,16(sp)
9d004400:	ae000000 	sw	zero,0(s0)
9d004404:	02201021 	move	v0,s1
9d004408:	8fbf0024 	lw	ra,36(sp)
9d00440c:	8fb10020 	lw	s1,32(sp)
9d004410:	8fb0001c 	lw	s0,28(sp)
9d004414:	03e00008 	jr	ra
9d004418:	27bd0028 	addiu	sp,sp,40

Disassembly of section .text._mon_getc:

9d00441c <_mon_getc>:
9d00441c:	27bdffe8 	addiu	sp,sp,-24

9d004420 <.LCFI0>:
9d004420:	afbf0014 	sw	ra,20(sp)
9d004424:	3c02a000 	lui	v0,0xa000
9d004428:	8c420008 	lw	v0,8(v0)
9d00442c:	1440000a 	bnez	v0,9d004458 <.LCFI0+0x38>
9d004430:	24030002 	li	v1,2
9d004434:	3c020000 	lui	v0,0x0
9d004438:	24420000 	addiu	v0,v0,0
9d00443c:	10400029 	beqz	v0,9d0044e4 <.LCFI0+0xc4>
9d004440:	3c020000 	lui	v0,0x0
9d004444:	0c000000 	jal	90000000 <_bmxdudba_address+0x8ffe0000>
9d004448:	00000000 	nop
9d00444c:	8fbf0014 	lw	ra,20(sp)
9d004450:	03e00008 	jr	ra
9d004454:	27bd0018 	addiu	sp,sp,24
9d004458:	1043001c 	beq	v0,v1,9d0044cc <.LCFI0+0xac>
9d00445c:	3c02bf80 	lui	v0,0xbf80
9d004460:	3c02bf80 	lui	v0,0xbf80
9d004464:	8c426000 	lw	v0,24576(v0)
9d004468:	3c05bf80 	lui	a1,0xbf80
9d00446c:	24a56030 	addiu	a1,a1,24624
9d004470:	3c04bf80 	lui	a0,0xbf80
9d004474:	24846010 	addiu	a0,a0,24592
9d004478:	30428000 	andi	v0,v0,0x8000
9d00447c:	14400003 	bnez	v0,9d00448c <.LCFI0+0x6c>
9d004480:	34038000 	li	v1,0x8000
9d004484:	3c02bf80 	lui	v0,0xbf80
9d004488:	ac436008 	sw	v1,24584(v0)
9d00448c:	8c820000 	lw	v0,0(a0)
9d004490:	30420001 	andi	v0,v0,0x1
9d004494:	14400009 	bnez	v0,9d0044bc <.LCFI0+0x9c>
9d004498:	240200a0 	li	v0,160
9d00449c:	0b40112b 	j	9d0044ac <.LCFI0+0x8c>
9d0044a0:	00000000 	nop
9d0044a4:	10400005 	beqz	v0,9d0044bc <.LCFI0+0x9c>
9d0044a8:	00000000 	nop
9d0044ac:	8c830000 	lw	v1,0(a0)
9d0044b0:	30630001 	andi	v1,v1,0x1
9d0044b4:	1060fffb 	beqz	v1,9d0044a4 <.LCFI0+0x84>
9d0044b8:	2442ffff 	addiu	v0,v0,-1
9d0044bc:	8ca20000 	lw	v0,0(a1)
9d0044c0:	8fbf0014 	lw	ra,20(sp)
9d0044c4:	03e00008 	jr	ra
9d0044c8:	27bd0018 	addiu	sp,sp,24
9d0044cc:	8c426800 	lw	v0,26624(v0)
9d0044d0:	3c05bf80 	lui	a1,0xbf80
9d0044d4:	24a56830 	addiu	a1,a1,26672
9d0044d8:	3c04bf80 	lui	a0,0xbf80
9d0044dc:	0b40111e 	j	9d004478 <.LCFI0+0x58>
9d0044e0:	24846810 	addiu	a0,a0,26640
9d0044e4:	24420000 	addiu	v0,v0,0
9d0044e8:	5040ffde 	beqzl	v0,9d004464 <.LCFI0+0x44>
9d0044ec:	3c02bf80 	lui	v0,0xbf80
9d0044f0:	0c000000 	jal	90000000 <_bmxdudba_address+0x8ffe0000>
9d0044f4:	00000000 	nop
9d0044f8:	0b401114 	j	9d004450 <.LCFI0+0x30>
9d0044fc:	8fbf0014 	lw	ra,20(sp)

Disassembly of section .text.general_exception:

9d004500 <_general_exception_context>:
9d004500:	27bdffa8 	addiu	sp,sp,-88
9d004504:	afa10004 	sw	at,4(sp)
9d004508:	afa20008 	sw	v0,8(sp)
9d00450c:	afa3000c 	sw	v1,12(sp)
9d004510:	afa40010 	sw	a0,16(sp)
9d004514:	afa50014 	sw	a1,20(sp)
9d004518:	afa60018 	sw	a2,24(sp)
9d00451c:	afa7001c 	sw	a3,28(sp)
9d004520:	afa80020 	sw	t0,32(sp)
9d004524:	afa90024 	sw	t1,36(sp)
9d004528:	afaa0028 	sw	t2,40(sp)
9d00452c:	afab002c 	sw	t3,44(sp)
9d004530:	afac0030 	sw	t4,48(sp)
9d004534:	afad0034 	sw	t5,52(sp)
9d004538:	afae0038 	sw	t6,56(sp)
9d00453c:	afaf003c 	sw	t7,60(sp)
9d004540:	afb80040 	sw	t8,64(sp)
9d004544:	afb90044 	sw	t9,68(sp)
9d004548:	afbf0048 	sw	ra,72(sp)
9d00454c:	00004012 	mflo	t0
9d004550:	afa8004c 	sw	t0,76(sp)
9d004554:	00004010 	mfhi	t0
9d004558:	afa80050 	sw	t0,80(sp)
9d00455c:	3c1a9d00 	lui	k0,0x9d00
9d004560:	275a4bf4 	addiu	k0,k0,19444
9d004564:	00000000 	nop
9d004568:	40046800 	mfc0	a0,c0_cause
9d00456c:	40056000 	mfc0	a1,c0_status
9d004570:	0340f809 	jalr	k0
9d004574:	00000000 	nop
9d004578:	8fa80050 	lw	t0,80(sp)
9d00457c:	01000011 	mthi	t0
9d004580:	8fa8004c 	lw	t0,76(sp)
9d004584:	01000013 	mtlo	t0
9d004588:	8fa10004 	lw	at,4(sp)
9d00458c:	8fa20008 	lw	v0,8(sp)
9d004590:	8fa3000c 	lw	v1,12(sp)
9d004594:	8fa40010 	lw	a0,16(sp)
9d004598:	8fa50014 	lw	a1,20(sp)
9d00459c:	8fa60018 	lw	a2,24(sp)
9d0045a0:	8fa7001c 	lw	a3,28(sp)
9d0045a4:	8fa80020 	lw	t0,32(sp)
9d0045a8:	8fa90024 	lw	t1,36(sp)
9d0045ac:	8faa0028 	lw	t2,40(sp)
9d0045b0:	8fab002c 	lw	t3,44(sp)
9d0045b4:	8fac0030 	lw	t4,48(sp)
9d0045b8:	8fad0034 	lw	t5,52(sp)
9d0045bc:	8fae0038 	lw	t6,56(sp)
9d0045c0:	8faf003c 	lw	t7,60(sp)
9d0045c4:	8fb80040 	lw	t8,64(sp)
9d0045c8:	8fb90044 	lw	t9,68(sp)
9d0045cc:	8fbf0048 	lw	ra,72(sp)
9d0045d0:	27bd0058 	addiu	sp,sp,88
9d0045d4:	000000c0 	ehb
9d0045d8:	42000018 	eret

Disassembly of section .text._mon_putc:

9d0045dc <_mon_putc>:
9d0045dc:	27bdffe8 	addiu	sp,sp,-24

9d0045e0 <.LCFI0>:
9d0045e0:	afbf0014 	sw	ra,20(sp)
9d0045e4:	3c02a000 	lui	v0,0xa000
9d0045e8:	8c420008 	lw	v0,8(v0)
9d0045ec:	1440000a 	bnez	v0,9d004618 <.LCFI0+0x38>
9d0045f0:	00802821 	move	a1,a0
9d0045f4:	3c020000 	lui	v0,0x0
9d0045f8:	24420000 	addiu	v0,v0,0
9d0045fc:	10400025 	beqz	v0,9d004694 <.LCFI0+0xb4>
9d004600:	3c020000 	lui	v0,0x0
9d004604:	0c000000 	jal	90000000 <_bmxdudba_address+0x8ffe0000>
9d004608:	00000000 	nop
9d00460c:	8fbf0014 	lw	ra,20(sp)
9d004610:	03e00008 	jr	ra
9d004614:	27bd0018 	addiu	sp,sp,24
9d004618:	24030001 	li	v1,1
9d00461c:	10430015 	beq	v0,v1,9d004674 <.LCFI0+0x94>
9d004620:	3c04bf80 	lui	a0,0xbf80
9d004624:	3c04bf80 	lui	a0,0xbf80
9d004628:	24846820 	addiu	a0,a0,26656
9d00462c:	3c02bf80 	lui	v0,0xbf80
9d004630:	24426818 	addiu	v0,v0,26648
9d004634:	3c06bf80 	lui	a2,0xbf80
9d004638:	24c66808 	addiu	a2,a2,26632
9d00463c:	3c03bf80 	lui	v1,0xbf80
9d004640:	24636810 	addiu	v1,v1,26640
9d004644:	34078000 	li	a3,0x8000
9d004648:	acc70000 	sw	a3,0(a2)
9d00464c:	24060400 	li	a2,1024
9d004650:	ac460000 	sw	a2,0(v0)
9d004654:	8c620000 	lw	v0,0(v1)
9d004658:	30420100 	andi	v0,v0,0x100
9d00465c:	1040fffd 	beqz	v0,9d004654 <.LCFI0+0x74>
9d004660:	00000000 	nop
9d004664:	ac850000 	sw	a1,0(a0)
9d004668:	8fbf0014 	lw	ra,20(sp)
9d00466c:	03e00008 	jr	ra
9d004670:	27bd0018 	addiu	sp,sp,24
9d004674:	24846020 	addiu	a0,a0,24608
9d004678:	3c02bf80 	lui	v0,0xbf80
9d00467c:	24426018 	addiu	v0,v0,24600
9d004680:	3c06bf80 	lui	a2,0xbf80
9d004684:	24c66008 	addiu	a2,a2,24584
9d004688:	3c03bf80 	lui	v1,0xbf80
9d00468c:	0b401191 	j	9d004644 <.LCFI0+0x64>
9d004690:	24636010 	addiu	v1,v1,24592
9d004694:	24420000 	addiu	v0,v0,0
9d004698:	5040ffe3 	beqzl	v0,9d004628 <.LCFI0+0x48>
9d00469c:	3c04bf80 	lui	a0,0xbf80
9d0046a0:	0c000000 	jal	90000000 <_bmxdudba_address+0x8ffe0000>
9d0046a4:	00000000 	nop
9d0046a8:	0b401184 	j	9d004610 <.LCFI0+0x30>
9d0046ac:	8fbf0014 	lw	ra,20(sp)

Disassembly of section .text.repl.constprop.0:

9d0046b0 <repl.constprop.0>:
9d0046b0:	27bdffd0 	addiu	sp,sp,-48
9d0046b4:	afbf002c 	sw	ra,44(sp)
9d0046b8:	afb60028 	sw	s6,40(sp)
9d0046bc:	afb50024 	sw	s5,36(sp)
9d0046c0:	afb40020 	sw	s4,32(sp)
9d0046c4:	afb3001c 	sw	s3,28(sp)
9d0046c8:	afb20018 	sw	s2,24(sp)
9d0046cc:	afb10014 	sw	s1,20(sp)
9d0046d0:	afb00010 	sw	s0,16(sp)
9d0046d4:	10a00016 	beqz	a1,9d004730 <repl.constprop.0+0x80>
9d0046d8:	00a0a021 	move	s4,a1
9d0046dc:	00809021 	move	s2,a0
9d0046e0:	3c159d00 	lui	s5,0x9d00
9d0046e4:	26b54d34 	addiu	s5,s5,19764
9d0046e8:	24160020 	li	s6,32
9d0046ec:	2413ffff 	li	s3,-1
9d0046f0:	2e910021 	sltiu	s1,s4,33
9d0046f4:	02c01021 	move	v0,s6
9d0046f8:	0291100b 	movn	v0,s4,s1
9d0046fc:	0282a023 	subu	s4,s4,v0
9d004700:	02a28821 	addu	s1,s5,v0
9d004704:	0b4011c8 	j	9d004720 <repl.constprop.0+0x70>
9d004708:	02a08021 	move	s0,s5
9d00470c:	26100001 	addiu	s0,s0,1
9d004710:	0f4011d7 	jal	9d00475c <fputc>
9d004714:	8204ffff 	lb	a0,-1(s0)
9d004718:	10530007 	beq	v0,s3,9d004738 <repl.constprop.0+0x88>
9d00471c:	8fbf002c 	lw	ra,44(sp)
9d004720:	1611fffa 	bne	s0,s1,9d00470c <repl.constprop.0+0x5c>
9d004724:	02402821 	move	a1,s2
9d004728:	1680fff2 	bnez	s4,9d0046f4 <repl.constprop.0+0x44>
9d00472c:	2e910021 	sltiu	s1,s4,33
9d004730:	00001021 	move	v0,zero
9d004734:	8fbf002c 	lw	ra,44(sp)
9d004738:	8fb60028 	lw	s6,40(sp)
9d00473c:	8fb50024 	lw	s5,36(sp)
9d004740:	8fb40020 	lw	s4,32(sp)
9d004744:	8fb3001c 	lw	s3,28(sp)
9d004748:	8fb20018 	lw	s2,24(sp)
9d00474c:	8fb10014 	lw	s1,20(sp)
9d004750:	8fb00010 	lw	s0,16(sp)
9d004754:	03e00008 	jr	ra
9d004758:	27bd0030 	addiu	sp,sp,48

Disassembly of section .text.fputc:

9d00475c <fputc>:
9d00475c:	27bdffe0 	addiu	sp,sp,-32
9d004760:	afbf001c 	sw	ra,28(sp)
9d004764:	afb10018 	sw	s1,24(sp)
9d004768:	afb00014 	sw	s0,20(sp)
9d00476c:	00a08021 	move	s0,a1
9d004770:	8ca20018 	lw	v0,24(a1)
9d004774:	00808821 	move	s1,a0
9d004778:	24050001 	li	a1,1
9d00477c:	8c420010 	lw	v0,16(v0)
9d004780:	0040f809 	jalr	v0
9d004784:	02002021 	move	a0,s0
9d004788:	1040000e 	beqz	v0,9d0047c4 <fputc+0x68>
9d00478c:	2402ffff 	li	v0,-1
9d004790:	8e020000 	lw	v0,0(s0)
9d004794:	2442ffff 	addiu	v0,v0,-1
9d004798:	04400011 	bltz	v0,9d0047e0 <fputc+0x84>
9d00479c:	ae020000 	sw	v0,0(s0)
9d0047a0:	96020010 	lhu	v0,16(s0)
9d0047a4:	30420008 	andi	v0,v0,0x8
9d0047a8:	1440000b 	bnez	v0,9d0047d8 <fputc+0x7c>
9d0047ac:	2402000a 	li	v0,10
9d0047b0:	8e030004 	lw	v1,4(s0)
9d0047b4:	02201021 	move	v0,s1
9d0047b8:	24640001 	addiu	a0,v1,1
9d0047bc:	ae040004 	sw	a0,4(s0)
9d0047c0:	a0710000 	sb	s1,0(v1)
9d0047c4:	8fbf001c 	lw	ra,28(sp)
9d0047c8:	8fb10018 	lw	s1,24(sp)
9d0047cc:	8fb00014 	lw	s0,20(sp)
9d0047d0:	03e00008 	jr	ra
9d0047d4:	27bd0020 	addiu	sp,sp,32
9d0047d8:	5622fff6 	bnel	s1,v0,9d0047b4 <fputc+0x58>
9d0047dc:	8e030004 	lw	v1,4(s0)
9d0047e0:	8e020018 	lw	v0,24(s0)
9d0047e4:	02202021 	move	a0,s1
9d0047e8:	8c420004 	lw	v0,4(v0)
9d0047ec:	0040f809 	jalr	v0
9d0047f0:	02002821 	move	a1,s0
9d0047f4:	8fbf001c 	lw	ra,28(sp)
9d0047f8:	8fb10018 	lw	s1,24(sp)
9d0047fc:	8fb00014 	lw	s0,20(sp)
9d004800:	03e00008 	jr	ra
9d004804:	27bd0020 	addiu	sp,sp,32

Disassembly of section .text.strlen:

9d004808 <strlen>:
9d004808:	30830003 	andi	v1,a0,0x3
9d00480c:	1460001e 	bnez	v1,9d004888 <strlen+0x80>
9d004810:	00801021 	move	v0,a0
9d004814:	8c820000 	lw	v0,0(a0)
9d004818:	3c07fefe 	lui	a3,0xfefe
9d00481c:	34e7feff 	ori	a3,a3,0xfeff
9d004820:	00471821 	addu	v1,v0,a3
9d004824:	00021027 	nor	v0,zero,v0
9d004828:	3c068080 	lui	a2,0x8080
9d00482c:	34c68080 	ori	a2,a2,0x8080
9d004830:	00621824 	and	v1,v1,v0
9d004834:	00661824 	and	v1,v1,a2
9d004838:	14600013 	bnez	v1,9d004888 <strlen+0x80>
9d00483c:	00801021 	move	v0,a0
9d004840:	24420004 	addiu	v0,v0,4
9d004844:	8c430000 	lw	v1,0(v0)
9d004848:	00672821 	addu	a1,v1,a3
9d00484c:	00031827 	nor	v1,zero,v1
9d004850:	00a31824 	and	v1,a1,v1
9d004854:	00661824 	and	v1,v1,a2
9d004858:	5460000c 	bnezl	v1,9d00488c <strlen+0x84>
9d00485c:	80430000 	lb	v1,0(v0)
9d004860:	24420004 	addiu	v0,v0,4
9d004864:	8c430000 	lw	v1,0(v0)
9d004868:	00672821 	addu	a1,v1,a3
9d00486c:	00031827 	nor	v1,zero,v1
9d004870:	00a31824 	and	v1,a1,v1
9d004874:	00661824 	and	v1,v1,a2
9d004878:	5060fff2 	beqzl	v1,9d004844 <strlen+0x3c>
9d00487c:	24420004 	addiu	v0,v0,4
9d004880:	0b401223 	j	9d00488c <strlen+0x84>
9d004884:	80430000 	lb	v1,0(v0)
9d004888:	80430000 	lb	v1,0(v0)
9d00488c:	5460fffe 	bnezl	v1,9d004888 <strlen+0x80>
9d004890:	24420001 	addiu	v0,v0,1
9d004894:	03e00008 	jr	ra
9d004898:	00441023 	subu	v0,v0,a0

Disassembly of section .text:

9d00489c <__pic32_data_init>:
9d00489c:	03e01821 	move	v1,ra

9d0048a0 <_dinit_init>:
9d0048a0:	3c089d00 	lui	t0,0x9d00
9d0048a4:	250840a4 	addiu	t0,t0,16548
9d0048a8:	8d090000 	lw	t1,0(t0)
9d0048ac:	11200018 	beqz	t1,9d004910 <_dinit_end+0x18>
9d0048b0:	25080004 	addiu	t0,t0,4
9d0048b4:	8d0a0000 	lw	t2,0(t0)
9d0048b8:	25080004 	addiu	t0,t0,4
9d0048bc:	8d0b0000 	lw	t3,0(t0)
9d0048c0:	11600009 	beqz	t3,9d0048e8 <_dinit_clear>
9d0048c4:	25080004 	addiu	t0,t0,4

9d0048c8 <_dinit_copy>:
9d0048c8:	910c0000 	lbu	t4,0(t0)
9d0048cc:	254affff 	addiu	t2,t2,-1
9d0048d0:	25080001 	addiu	t0,t0,1
9d0048d4:	a12c0000 	sb	t4,0(t1)
9d0048d8:	1540fffb 	bnez	t2,9d0048c8 <_dinit_copy>
9d0048dc:	25290001 	addiu	t1,t1,1
9d0048e0:	10000005 	b	9d0048f8 <_dinit_end>
9d0048e4:	00000000 	nop

9d0048e8 <_dinit_clear>:
9d0048e8:	a1200000 	sb	zero,0(t1)
9d0048ec:	254affff 	addiu	t2,t2,-1
9d0048f0:	1540fffd 	bnez	t2,9d0048e8 <_dinit_clear>
9d0048f4:	25290001 	addiu	t1,t1,1

9d0048f8 <_dinit_end>:
9d0048f8:	25080003 	addiu	t0,t0,3
9d0048fc:	240afffc 	li	t2,-4
9d004900:	01484024 	and	t0,t2,t0
9d004904:	8d090000 	lw	t1,0(t0)
9d004908:	1520ffe7 	bnez	t1,9d0048a8 <_dinit_init+0x8>
9d00490c:	00000000 	nop
9d004910:	0060f821 	move	ra,v1
9d004914:	03e00008 	jr	ra
9d004918:	00000000 	nop
9d00491c:	00000000 	nop

Disassembly of section .text._fflush_simple:

9d004920 <_fflush_simple>:
9d004920:	27bdffe8 	addiu	sp,sp,-24
9d004924:	afbf0014 	sw	ra,20(sp)
9d004928:	afb00010 	sw	s0,16(sp)
9d00492c:	94820010 	lhu	v0,16(a0)
9d004930:	30420002 	andi	v0,v0,0x2
9d004934:	10400013 	beqz	v0,9d004984 <_fflush_simple+0x64>
9d004938:	00808021 	move	s0,a0
9d00493c:	8c850000 	lw	a1,0(a0)
9d004940:	04a0000c 	bltz	a1,9d004974 <_fflush_simple+0x54>
9d004944:	00001021 	move	v0,zero
9d004948:	8c82000c 	lw	v0,12(a0)
9d00494c:	50a20006 	beql	a1,v0,9d004968 <_fflush_simple+0x48>
9d004950:	8e030008 	lw	v1,8(s0)
9d004954:	8c840008 	lw	a0,8(a0)
9d004958:	0f4012d8 	jal	9d004b60 <_mon_write>
9d00495c:	00452823 	subu	a1,v0,a1
9d004960:	8e02000c 	lw	v0,12(s0)
9d004964:	8e030008 	lw	v1,8(s0)
9d004968:	ae020000 	sw	v0,0(s0)
9d00496c:	ae030004 	sw	v1,4(s0)
9d004970:	00001021 	move	v0,zero
9d004974:	8fbf0014 	lw	ra,20(sp)
9d004978:	8fb00010 	lw	s0,16(sp)
9d00497c:	03e00008 	jr	ra
9d004980:	27bd0018 	addiu	sp,sp,24
9d004984:	2402ffff 	li	v0,-1
9d004988:	ac820004 	sw	v0,4(a0)
9d00498c:	00001021 	move	v0,zero
9d004990:	8fbf0014 	lw	ra,20(sp)
9d004994:	8fb00010 	lw	s0,16(sp)
9d004998:	03e00008 	jr	ra
9d00499c:	27bd0018 	addiu	sp,sp,24

Disassembly of section .text._fwrite_simple:

9d0049a0 <_fwrite_simple>:
9d0049a0:	27bdffd8 	addiu	sp,sp,-40
9d0049a4:	afbf0024 	sw	ra,36(sp)
9d0049a8:	afb10020 	sw	s1,32(sp)
9d0049ac:	afb0001c 	sw	s0,28(sp)
9d0049b0:	70c58002 	mul	s0,a2,a1
9d0049b4:	12000007 	beqz	s0,9d0049d4 <_fwrite_simple+0x34>
9d0049b8:	00001021 	move	v0,zero
9d0049bc:	94e30010 	lhu	v1,16(a3)
9d0049c0:	30630001 	andi	v1,v1,0x1
9d0049c4:	10600008 	beqz	v1,9d0049e8 <_fwrite_simple+0x48>
9d0049c8:	3c03a000 	lui	v1,0xa000
9d0049cc:	24040009 	li	a0,9
9d0049d0:	ac640020 	sw	a0,32(v1)
9d0049d4:	8fbf0024 	lw	ra,36(sp)
9d0049d8:	8fb10020 	lw	s1,32(sp)
9d0049dc:	8fb0001c 	lw	s0,28(sp)
9d0049e0:	03e00008 	jr	ra
9d0049e4:	27bd0028 	addiu	sp,sp,40
9d0049e8:	00808821 	move	s1,a0
9d0049ec:	00e02021 	move	a0,a3
9d0049f0:	0f401248 	jal	9d004920 <_fflush_simple>
9d0049f4:	afa60010 	sw	a2,16(sp)
9d0049f8:	02202021 	move	a0,s1
9d0049fc:	0f4012d8 	jal	9d004b60 <_mon_write>
9d004a00:	02002821 	move	a1,s0
9d004a04:	8fa60010 	lw	a2,16(sp)
9d004a08:	00c01021 	move	v0,a2
9d004a0c:	8fbf0024 	lw	ra,36(sp)
9d004a10:	8fb10020 	lw	s1,32(sp)
9d004a14:	8fb0001c 	lw	s0,28(sp)
9d004a18:	03e00008 	jr	ra
9d004a1c:	27bd0028 	addiu	sp,sp,40

Disassembly of section .text.fptoli:

9d004a20 <__fixsfsi>:
9d004a20:	00042a00 3c018000 00a12825 00043dc2     .*.....<%(...=..
9d004a30:	30e700ff 2406009e 00c73023 18c0000d     ...0...$#0......
9d004a40:	00000000 28c10020 14200003 00000000     .... ..(.. .....
9d004a50:	10000005 24020000                       .......$

9d004a58 <i42>:
9d004a58:	04810002 	bgez	a0,9d004a64 <i43>
9d004a5c:	00c52806 	srlv	a1,a1,a2
9d004a60:	00052823 	negu	a1,a1

9d004a64 <i43>:
9d004a64:	00051025 	or	v0,zero,a1

9d004a68 <G999>:
9d004a68:	03e00008 	jr	ra
9d004a6c:	00000000 	nop
9d004a70:	00000000 	nop

9d004a74 <Gspec>:
9d004a74:	3c017f80 	lui	at,0x7f80
9d004a78:	34210001 	ori	at,at,0x1
9d004a7c:	0081082b 	sltu	at,a0,at
9d004a80:	14200003 	bnez	at,9d004a90 <i44>
9d004a84:	00000000 	nop
9d004a88:	1000fff7 	b	9d004a68 <G999>
9d004a8c:	3c028000 	lui	v0,0x8000

9d004a90 <i44>:
9d004a90:	3c027fff 	lui	v0,0x7fff
9d004a94:	1000fff4 	b	9d004a68 <G999>
9d004a98:	3442ffff 	ori	v0,v0,0xffff
9d004a9c:	00000000 	nop

Disassembly of section .text._sprintf_cdnopuxX:

9d004aa0 <_sprintf_cdnopuxX>:
9d004aa0:	27bdffc8 	addiu	sp,sp,-56
9d004aa4:	afbf0034 	sw	ra,52(sp)
9d004aa8:	27a20040 	addiu	v0,sp,64
9d004aac:	00801821 	move	v1,a0
9d004ab0:	afa60040 	sw	a2,64(sp)
9d004ab4:	27a40010 	addiu	a0,sp,16
9d004ab8:	00403021 	move	a2,v0
9d004abc:	afa70044 	sw	a3,68(sp)
9d004ac0:	2407ffff 	li	a3,-1
9d004ac4:	a7a70022 	sh	a3,34(sp)
9d004ac8:	24070082 	li	a3,130
9d004acc:	a7a70020 	sh	a3,32(sp)
9d004ad0:	3c077fff 	lui	a3,0x7fff
9d004ad4:	34e7fffe 	ori	a3,a3,0xfffe
9d004ad8:	afa70010 	sw	a3,16(sp)
9d004adc:	afa30018 	sw	v1,24(sp)
9d004ae0:	afa30014 	sw	v1,20(sp)
9d004ae4:	3c039d00 	lui	v1,0x9d00
9d004ae8:	24634e04 	addiu	v1,v1,19972
9d004aec:	afa30028 	sw	v1,40(sp)
9d004af0:	0f400780 	jal	9d001e00 <_do_print_cdnopuxX>
9d004af4:	afa2002c 	sw	v0,44(sp)
9d004af8:	8fa30014 	lw	v1,20(sp)
9d004afc:	a0600000 	sb	zero,0(v1)
9d004b00:	8fbf0034 	lw	ra,52(sp)
9d004b04:	03e00008 	jr	ra
9d004b08:	27bd0038 	addiu	sp,sp,56

Disassembly of section .text.main_entry:

9d004b0c <_main_entry>:
9d004b0c:	3c040000 	lui	a0,0x0
9d004b10:	27bdffe8 	addiu	sp,sp,-24
9d004b14:	24840000 	addiu	a0,a0,0
9d004b18:	10800003 	beqz	a0,9d004b28 <_main_entry+0x1c>
9d004b1c:	afbf0014 	sw	ra,20(sp)
9d004b20:	0080f809 	jalr	a0
9d004b24:	00000000 	nop
9d004b28:	30840000 	andi	a0,a0,0x0
9d004b2c:	30a50000 	andi	a1,a1,0x0
9d004b30:	3c089d00 	lui	t0,0x9d00
9d004b34:	25082ea0 	addiu	t0,t0,11936
9d004b38:	0100f809 	jalr	t0
9d004b3c:	00000000 	nop

9d004b40 <__crt0_exit>:
9d004b40:	3c020000 24420000 10400003 00000000     ...<..B$..@.....
9d004b50:	0040f809 00000000 1000fff9 00000000     ..@.............

Disassembly of section .text._mon_write:

9d004b60 <_mon_write>:
9d004b60:	27bdffe0 	addiu	sp,sp,-32

9d004b64 <.LCFI0>:
9d004b64:	afbf001c 	sw	ra,28(sp)
9d004b68:	afb10018 	sw	s1,24(sp)
9d004b6c:	afb00014 	sw	s0,20(sp)
9d004b70:	10800009 	beqz	a0,9d004b98 <.LCFI0+0x34>
9d004b74:	00808021 	move	s0,a0
9d004b78:	10a00007 	beqz	a1,9d004b98 <.LCFI0+0x34>
9d004b7c:	00a08821 	move	s1,a1
9d004b80:	82040000 	lb	a0,0(s0)
9d004b84:	2631ffff 	addiu	s1,s1,-1
9d004b88:	0f401177 	jal	9d0045dc <_mon_putc>
9d004b8c:	26100001 	addiu	s0,s0,1
9d004b90:	5620fffc 	bnezl	s1,9d004b84 <.LCFI0+0x20>
9d004b94:	82040000 	lb	a0,0(s0)
9d004b98:	8fbf001c 	lw	ra,28(sp)
9d004b9c:	8fb10018 	lw	s1,24(sp)
9d004ba0:	8fb00014 	lw	s0,20(sp)
9d004ba4:	03e00008 	jr	ra
9d004ba8:	27bd0020 	addiu	sp,sp,32

Disassembly of section .text._bootstrap_exception_handler:

9d004bac <_bootstrap_exception_handler>:
9d004bac:	3c020000 	lui	v0,0x0
9d004bb0:	24420000 	addiu	v0,v0,0
9d004bb4:	10400005 	beqz	v0,9d004bcc <_bootstrap_exception_handler+0x20>
9d004bb8:	3c020000 	lui	v0,0x0
9d004bbc:	24420000 	addiu	v0,v0,0
9d004bc0:	10400003 	beqz	v0,9d004bd0 <_bootstrap_exception_handler+0x24>
9d004bc4:	3c029d00 	lui	v0,0x9d00
9d004bc8:	7000003f 	sdbbp
9d004bcc:	3c029d00 	lui	v0,0x9d00
9d004bd0:	24424c84 	addiu	v0,v0,19588
9d004bd4:	10400005 	beqz	v0,9d004bec <.LCFI2>
9d004bd8:	00000000 	nop
9d004bdc:	27bdffe8 	addiu	sp,sp,-24

9d004be0 <.LCFI0>:
9d004be0:	afbf0014 	sw	ra,20(sp)
9d004be4:	0040f809 	jalr	v0
9d004be8:	00000000 	nop

9d004bec <.LCFI2>:
9d004bec:	0b4012fb 	j	9d004bec <.LCFI2>
9d004bf0:	00000000 	nop

Disassembly of section .text._general_exception_handler:

9d004bf4 <_general_exception_handler>:
9d004bf4:	3c020000 	lui	v0,0x0
9d004bf8:	24420000 	addiu	v0,v0,0
9d004bfc:	10400005 	beqz	v0,9d004c14 <_general_exception_handler+0x20>
9d004c00:	3c020000 	lui	v0,0x0
9d004c04:	24420000 	addiu	v0,v0,0
9d004c08:	10400003 	beqz	v0,9d004c18 <_general_exception_handler+0x24>
9d004c0c:	3c029d00 	lui	v0,0x9d00
9d004c10:	7000003f 	sdbbp
9d004c14:	3c029d00 	lui	v0,0x9d00
9d004c18:	24424c84 	addiu	v0,v0,19588
9d004c1c:	10400005 	beqz	v0,9d004c34 <.LCFI2>
9d004c20:	00000000 	nop
9d004c24:	27bdffe8 	addiu	sp,sp,-24

9d004c28 <.LCFI0>:
9d004c28:	afbf0014 	sw	ra,20(sp)
9d004c2c:	0040f809 	jalr	v0
9d004c30:	00000000 	nop

9d004c34 <.LCFI2>:
9d004c34:	0b40130d 	j	9d004c34 <.LCFI2>
9d004c38:	00000000 	nop

Disassembly of section .vector_default:

9d004c3c <_DefaultInterrupt>:
9d004c3c:	3c020000 	lui	v0,0x0
9d004c40:	24420000 	addiu	v0,v0,0
9d004c44:	10400007 	beqz	v0,9d004c64 <_DefaultInterrupt+0x28>
9d004c48:	3c020000 	lui	v0,0x0
9d004c4c:	24420000 	addiu	v0,v0,0
9d004c50:	50400005 	beqzl	v0,9d004c68 <_DefaultInterrupt+0x2c>
9d004c54:	3c029d00 	lui	v0,0x9d00
9d004c58:	7000003f 	sdbbp
9d004c5c:	03e00008 	jr	ra
9d004c60:	00000000 	nop
9d004c64:	3c029d00 	lui	v0,0x9d00
9d004c68:	24424c84 	addiu	v0,v0,19588
9d004c6c:	10400003 	beqz	v0,9d004c7c <_DefaultInterrupt+0x40>
9d004c70:	00000000 	nop
9d004c74:	0040f809 	jalr	v0
9d004c78:	00000000 	nop
9d004c7c:	03e00008 	jr	ra
9d004c80:	00000000 	nop

Disassembly of section .text:

9d004c84 <__pic32_software_reset>:
9d004c84:	41606000 	di
9d004c88:	000000c0 	ehb
9d004c8c:	3c03aa99 	lui	v1,0xaa99
9d004c90:	3c02bf81 	lui	v0,0xbf81
9d004c94:	24636655 	addiu	v1,v1,26197
9d004c98:	ac40f230 	sw	zero,-3536(v0)
9d004c9c:	ac43f230 	sw	v1,-3536(v0)
9d004ca0:	3c035566 	lui	v1,0x5566
9d004ca4:	346399aa 	ori	v1,v1,0x99aa
9d004ca8:	ac43f230 	sw	v1,-3536(v0)
9d004cac:	3c02bf81 	lui	v0,0xbf81
9d004cb0:	24030001 	li	v1,1
9d004cb4:	ac43f618 	sw	v1,-2536(v0)
9d004cb8:	3c02bf81 	lui	v0,0xbf81
9d004cbc:	8c42f610 	lw	v0,-2544(v0)
9d004cc0:	0b401323 	j	9d004c8c <__pic32_software_reset+0x8>
9d004cc4:	00000000 	nop

Disassembly of section .text._filbuf_simple:

9d004cc8 <_filbuf_simple>:
9d004cc8:	8c820004 	lw	v0,4(a0)
9d004ccc:	2403ffff 	li	v1,-1
9d004cd0:	10430003 	beq	v0,v1,9d004ce0 <_filbuf_simple+0x18>
9d004cd4:	ac800000 	sw	zero,0(a0)
9d004cd8:	03e00008 	jr	ra
9d004cdc:	ac830004 	sw	v1,4(a0)
9d004ce0:	27bdffe8 	addiu	sp,sp,-24
9d004ce4:	afbf0014 	sw	ra,20(sp)
9d004ce8:	0f401107 	jal	9d00441c <_mon_getc>
9d004cec:	24040001 	li	a0,1
9d004cf0:	8fbf0014 	lw	ra,20(sp)
9d004cf4:	03e00008 	jr	ra
9d004cf8:	27bd0018 	addiu	sp,sp,24

Disassembly of section .text._fsync_simple:

9d004cfc <_fsync_simple>:
9d004cfc:	94830010 	lhu	v1,16(a0)
9d004d00:	00a32824 	and	a1,a1,v1
9d004d04:	10a00007 	beqz	a1,9d004d24 <_fsync_simple+0x28>
9d004d08:	24020001 	li	v0,1
9d004d0c:	34630040 	ori	v1,v1,0x40
9d004d10:	a4830010 	sh	v1,16(a0)
9d004d14:	24030009 	li	v1,9
9d004d18:	3c02a000 	lui	v0,0xa000
9d004d1c:	ac430020 	sw	v1,32(v0)
9d004d20:	00001021 	move	v0,zero
9d004d24:	03e00008 	jr	ra
9d004d28:	00000000 	nop

Disassembly of section .rodata:

9d004d2c <spaceData-0x8>:
9d004d2c:	6c756e28 	0x6c756e28
9d004d30:	0000296c 	0x296c

9d004d34 <spaceData>:
9d004d34:	20202020 20202020 20202020 20202020                     
9d004d44:	20202020 20202020 20202020 20202020                     

Disassembly of section .text.putchar:

9d004d54 <putchar>:
9d004d54:	27bdffe8 	addiu	sp,sp,-24
9d004d58:	afbf0014 	sw	ra,20(sp)
9d004d5c:	3c02a000 	lui	v0,0xa000
9d004d60:	8c420004 	lw	v0,4(v0)
9d004d64:	0f4011d7 	jal	9d00475c <fputc>
9d004d68:	8c450004 	lw	a1,4(v0)
9d004d6c:	8fbf0014 	lw	ra,20(sp)
9d004d70:	03e00008 	jr	ra
9d004d74:	27bd0018 	addiu	sp,sp,24

Disassembly of section .text._vfprintf_cdnopuxX:

9d004d78 <_vfprintf_cdnopuxX>:
9d004d78:	27bdffe8 	addiu	sp,sp,-24
9d004d7c:	afbf0014 	sw	ra,20(sp)
9d004d80:	0f400780 	jal	9d001e00 <_do_print_cdnopuxX>
9d004d84:	00000000 	nop
9d004d88:	8fbf0014 	lw	ra,20(sp)
9d004d8c:	03e00008 	jr	ra
9d004d90:	27bd0018 	addiu	sp,sp,24

Disassembly of section .text.putc:

9d004d94 <putc>:
9d004d94:	27bdffe8 	addiu	sp,sp,-24
9d004d98:	afbf0014 	sw	ra,20(sp)
9d004d9c:	0f4011d7 	jal	9d00475c <fputc>
9d004da0:	00000000 	nop
9d004da4:	8fbf0014 	lw	ra,20(sp)
9d004da8:	03e00008 	jr	ra
9d004dac:	27bd0018 	addiu	sp,sp,24

Disassembly of section .text:

9d004db0 <_nmi_handler>:
9d004db0:	401a6000 	mfc0	k0,c0_status
9d004db4:	3c1bffbf 	lui	k1,0xffbf
9d004db8:	377bffff 	ori	k1,k1,0xffff
9d004dbc:	035bd024 	and	k0,k0,k1
9d004dc0:	409a6000 	mtc0	k0,c0_status
9d004dc4:	42000018 	eret

Disassembly of section .text._io_exit:

9d004dc8 <_io_exit>:
9d004dc8:	3c02a000 	lui	v0,0xa000
9d004dcc:	8c420004 	lw	v0,4(v0)
9d004dd0:	24030001 	li	v1,1
9d004dd4:	03e00008 	jr	ra
9d004dd8:	ac430038 	sw	v1,56(v0)

Disassembly of section .rodata:

9d004ddc <_io_funcs>:
9d004ddc:	9d004cc8 9d004320 9d004920 9d0049a0     .L.. C.. I...I..
9d004dec:	9d004cfc                                .L..

Disassembly of section .text._io_exit:

9d004df0 <.text._io_exit>:
9d004df0:	3c02a000 	lui	v0,0xa000
9d004df4:	8c420004 	lw	v0,4(v0)
9d004df8:	24030001 	li	v1,1
9d004dfc:	03e00008 	jr	ra
9d004e00:	ac430038 	sw	v1,56(v0)

Disassembly of section .rodata:

9d004e04 <_io_strfuncs>:
9d004e04:	9d004e38 9d004e40 9d004e48 9d004e50     8N..@N..HN..PN..
9d004e14:	9d004e58                                XN..

9d004e18 <.LC1>:
9d004e18:	706f7244 	0x706f7244
9d004e1c:	25203a73 	addiu	zero,t1,14963
9d004e20:	00000064 	0x64
9d004e24:	4c189680 	0x4c189680

Disassembly of section .text._on_reset:

9d004e28 <_on_reset>:
9d004e28:	03e00008 	jr	ra
9d004e2c:	00000000 	nop

Disassembly of section .text._on_bootstrap:

9d004e30 <_on_bootstrap>:
9d004e30:	03e00008 	jr	ra
9d004e34:	00000000 	nop

Disassembly of section .text._filbuf_string:

9d004e38 <_filbuf_string>:
9d004e38:	03e00008 	jr	ra
9d004e3c:	2402ffff 	li	v0,-1

Disassembly of section .text._flsbuf_string:

9d004e40 <_flsbuf_string>:
9d004e40:	03e00008 	jr	ra
9d004e44:	00801021 	move	v0,a0

Disassembly of section .text._fflush_string:

9d004e48 <_fflush_string>:
9d004e48:	03e00008 	jr	ra
9d004e4c:	00001021 	move	v0,zero

Disassembly of section .text._fwrite_string:

9d004e50 <_fwrite_string>:
9d004e50:	03e00008 	jr	ra
9d004e54:	00001021 	move	v0,zero

Disassembly of section .text._fsync_string:

9d004e58 <_fsync_string>:
9d004e58:	03e00008 	jr	ra
9d004e5c:	24020001 	li	v0,1
